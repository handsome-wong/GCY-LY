// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Simplebox_test.pb.h"
// @@protoc_insertion_point(imports)

@implementation SimpleboxRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SimpleboxRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL YesOrNoIsValidValue(YesOrNo value) {
  switch (value) {
    case YesOrNoNo:
    case YesOrNoYes:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromYesOrNo(YesOrNo value) {
  switch (value) {
    case YesOrNoNo:
      return @"YesOrNoNo";
    case YesOrNoYes:
      return @"YesOrNoYes";
    default:
      return nil;
  }
}

BOOL DeviceParameterSyncStatusIsValidValue(DeviceParameterSyncStatus value) {
  switch (value) {
    case DeviceParameterSyncStatusSyncStart:
    case DeviceParameterSyncStatusSyncEnd:
    case DeviceParameterSyncStatusSyncError:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromDeviceParameterSyncStatus(DeviceParameterSyncStatus value) {
  switch (value) {
    case DeviceParameterSyncStatusSyncStart:
      return @"DeviceParameterSyncStatusSyncStart";
    case DeviceParameterSyncStatusSyncEnd:
      return @"DeviceParameterSyncStatusSyncEnd";
    case DeviceParameterSyncStatusSyncError:
      return @"DeviceParameterSyncStatusSyncError";
    default:
      return nil;
  }
}

BOOL RspCodeIsValidValue(RspCode value) {
  switch (value) {
    case RspCodeFailed:
    case RspCodeSuccess:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromRspCode(RspCode value) {
  switch (value) {
    case RspCodeFailed:
      return @"RspCodeFailed";
    case RspCodeSuccess:
      return @"RspCodeSuccess";
    default:
      return nil;
  }
}

BOOL ErrorCodeIsValidValue(ErrorCode value) {
  switch (value) {
    case ErrorCodeNormal:
    case ErrorCodeDataInvalid:
    case ErrorCodeDataEmpty:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromErrorCode(ErrorCode value) {
  switch (value) {
    case ErrorCodeNormal:
      return @"ErrorCodeNormal";
    case ErrorCodeDataInvalid:
      return @"ErrorCodeDataInvalid";
    case ErrorCodeDataEmpty:
      return @"ErrorCodeDataEmpty";
    default:
      return nil;
  }
}

BOOL UpdateKindIsValidValue(UpdateKind value) {
  switch (value) {
    case UpdateKindQueryUpdate:
    case UpdateKindChangeUpdate:
    case UpdateKindFixFrequencyUpdate:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromUpdateKind(UpdateKind value) {
  switch (value) {
    case UpdateKindQueryUpdate:
      return @"UpdateKindQueryUpdate";
    case UpdateKindChangeUpdate:
      return @"UpdateKindChangeUpdate";
    case UpdateKindFixFrequencyUpdate:
      return @"UpdateKindFixFrequencyUpdate";
    default:
      return nil;
  }
}

BOOL WifiStatusIsValidValue(WifiStatus value) {
  switch (value) {
    case WifiStatusWifiStatusConnected:
    case WifiStatusWifiStatusConnecting:
    case WifiStatusWifiStatusDisconnecting:
    case WifiStatusWifiStatusDisconnect:
    case WifiStatusWifiStatusUnknowable:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromWifiStatus(WifiStatus value) {
  switch (value) {
    case WifiStatusWifiStatusConnected:
      return @"WifiStatusWifiStatusConnected";
    case WifiStatusWifiStatusConnecting:
      return @"WifiStatusWifiStatusConnecting";
    case WifiStatusWifiStatusDisconnecting:
      return @"WifiStatusWifiStatusDisconnecting";
    case WifiStatusWifiStatusDisconnect:
      return @"WifiStatusWifiStatusDisconnect";
    case WifiStatusWifiStatusUnknowable:
      return @"WifiStatusWifiStatusUnknowable";
    default:
      return nil;
  }
}

BOOL BtCallTypeIsValidValue(BtCallType value) {
  switch (value) {
    case BtCallTypeBtcallNumber:
    case BtCallTypeBtcallPhoneBook:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBtCallType(BtCallType value) {
  switch (value) {
    case BtCallTypeBtcallNumber:
      return @"BtCallTypeBtcallNumber";
    case BtCallTypeBtcallPhoneBook:
      return @"BtCallTypeBtcallPhoneBook";
    default:
      return nil;
  }
}

BOOL BtCallChannelIsValidValue(BtCallChannel value) {
  switch (value) {
    case BtCallChannelBtcallChannel1:
    case BtCallChannelBtcallChannel2:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBtCallChannel(BtCallChannel value) {
  switch (value) {
    case BtCallChannelBtcallChannel1:
      return @"BtCallChannelBtcallChannel1";
    case BtCallChannelBtcallChannel2:
      return @"BtCallChannelBtcallChannel2";
    default:
      return nil;
  }
}

BOOL BtCallStatusIsValidValue(BtCallStatus value) {
  switch (value) {
    case BtCallStatusCallIn:
    case BtCallStatusCallOut:
    case BtCallStatusCallConnected:
    case BtCallStatusCallSuspend:
    case BtCallStatusCallDisconnect:
    case BtCallStatusCallConnecting:
    case BtCallStatusCallEngaged:
    case BtCallStatusCallError:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBtCallStatus(BtCallStatus value) {
  switch (value) {
    case BtCallStatusCallIn:
      return @"BtCallStatusCallIn";
    case BtCallStatusCallOut:
      return @"BtCallStatusCallOut";
    case BtCallStatusCallConnected:
      return @"BtCallStatusCallConnected";
    case BtCallStatusCallSuspend:
      return @"BtCallStatusCallSuspend";
    case BtCallStatusCallDisconnect:
      return @"BtCallStatusCallDisconnect";
    case BtCallStatusCallConnecting:
      return @"BtCallStatusCallConnecting";
    case BtCallStatusCallEngaged:
      return @"BtCallStatusCallEngaged";
    case BtCallStatusCallError:
      return @"BtCallStatusCallError";
    default:
      return nil;
  }
}

BOOL BtChannelIsValidValue(BtChannel value) {
  switch (value) {
    case BtChannelA2Dp:
    case BtChannelHfp:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBtChannel(BtChannel value) {
  switch (value) {
    case BtChannelA2Dp:
      return @"BtChannelA2Dp";
    case BtChannelHfp:
      return @"BtChannelHfp";
    default:
      return nil;
  }
}

BOOL SoundChannelIsValidValue(SoundChannel value) {
  switch (value) {
    case SoundChannelSoundChannelA2Dp:
    case SoundChannelSoundChannelHfp:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromSoundChannel(SoundChannel value) {
  switch (value) {
    case SoundChannelSoundChannelA2Dp:
      return @"SoundChannelSoundChannelA2Dp";
    case SoundChannelSoundChannelHfp:
      return @"SoundChannelSoundChannelHfp";
    default:
      return nil;
  }
}

BOOL BtStatusIsValidValue(BtStatus value) {
  switch (value) {
    case BtStatusBtOpen:
    case BtStatusBtClose:
    case BtStatusBtScan:
    case BtStatusBtDiscover:
    case BtStatusBtConnecting:
    case BtStatusBtConnected:
    case BtStatusBtDisconnect:
    case BtStatusBtError:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBtStatus(BtStatus value) {
  switch (value) {
    case BtStatusBtOpen:
      return @"BtStatusBtOpen";
    case BtStatusBtClose:
      return @"BtStatusBtClose";
    case BtStatusBtScan:
      return @"BtStatusBtScan";
    case BtStatusBtDiscover:
      return @"BtStatusBtDiscover";
    case BtStatusBtConnecting:
      return @"BtStatusBtConnecting";
    case BtStatusBtConnected:
      return @"BtStatusBtConnected";
    case BtStatusBtDisconnect:
      return @"BtStatusBtDisconnect";
    case BtStatusBtError:
      return @"BtStatusBtError";
    default:
      return nil;
  }
}

BOOL RevesedStateIsValidValue(RevesedState value) {
  switch (value) {
    case RevesedStateRend:
    case RevesedStateRstart:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromRevesedState(RevesedState value) {
  switch (value) {
    case RevesedStateRend:
      return @"RevesedStateRend";
    case RevesedStateRstart:
      return @"RevesedStateRstart";
    default:
      return nil;
  }
}

BOOL SeatAdjustIsValidValue(SeatAdjust value) {
  switch (value) {
    case SeatAdjustSetatAdjustUp:
    case SeatAdjustSetatAdjustDown:
    case SeatAdjustSetatAdjustForward:
    case SeatAdjustSetatAdjustBack:
    case SeatAdjustSetatAdjustPronate:
    case SeatAdjustSetatAdjustAdmire:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromSeatAdjust(SeatAdjust value) {
  switch (value) {
    case SeatAdjustSetatAdjustUp:
      return @"SeatAdjustSetatAdjustUp";
    case SeatAdjustSetatAdjustDown:
      return @"SeatAdjustSetatAdjustDown";
    case SeatAdjustSetatAdjustForward:
      return @"SeatAdjustSetatAdjustForward";
    case SeatAdjustSetatAdjustBack:
      return @"SeatAdjustSetatAdjustBack";
    case SeatAdjustSetatAdjustPronate:
      return @"SeatAdjustSetatAdjustPronate";
    case SeatAdjustSetatAdjustAdmire:
      return @"SeatAdjustSetatAdjustAdmire";
    default:
      return nil;
  }
}

BOOL CycModeIsValidValue(CycMode value) {
  switch (value) {
    case CycModeCycModeInside:
    case CycModeCycModeOuter:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromCycMode(CycMode value) {
  switch (value) {
    case CycModeCycModeInside:
      return @"CycModeCycModeInside";
    case CycModeCycModeOuter:
      return @"CycModeCycModeOuter";
    default:
      return nil;
  }
}

BOOL BlowModeIsValidValue(BlowMode value) {
  switch (value) {
    case BlowModeBlowFace:
    case BlowModeBlowFoot:
    case BlowModeBlowFaceFoot:
    case BlowModeBlowDemist:
    case BlowModeBlowFootDemist:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBlowMode(BlowMode value) {
  switch (value) {
    case BlowModeBlowFace:
      return @"BlowModeBlowFace";
    case BlowModeBlowFoot:
      return @"BlowModeBlowFoot";
    case BlowModeBlowFaceFoot:
      return @"BlowModeBlowFaceFoot";
    case BlowModeBlowDemist:
      return @"BlowModeBlowDemist";
    case BlowModeBlowFootDemist:
      return @"BlowModeBlowFootDemist";
    default:
      return nil;
  }
}

BOOL SystemPowerStatusIsValidValue(SystemPowerStatus value) {
  switch (value) {
    case SystemPowerStatusSystemPowerStart:
    case SystemPowerStatusSystemPowerSleep:
    case SystemPowerStatusSystemPowerWakeup:
    case SystemPowerStatusSystemPowerPoweroff:
    case SystemPowerStatusSystemPowerWorking:
    case SystemPowerStatusSystemPowerRestart:
    case SystemPowerStatusSystemPowerError:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromSystemPowerStatus(SystemPowerStatus value) {
  switch (value) {
    case SystemPowerStatusSystemPowerStart:
      return @"SystemPowerStatusSystemPowerStart";
    case SystemPowerStatusSystemPowerSleep:
      return @"SystemPowerStatusSystemPowerSleep";
    case SystemPowerStatusSystemPowerWakeup:
      return @"SystemPowerStatusSystemPowerWakeup";
    case SystemPowerStatusSystemPowerPoweroff:
      return @"SystemPowerStatusSystemPowerPoweroff";
    case SystemPowerStatusSystemPowerWorking:
      return @"SystemPowerStatusSystemPowerWorking";
    case SystemPowerStatusSystemPowerRestart:
      return @"SystemPowerStatusSystemPowerRestart";
    case SystemPowerStatusSystemPowerError:
      return @"SystemPowerStatusSystemPowerError";
    default:
      return nil;
  }
}

BOOL PhoneBookStatusIsValidValue(PhoneBookStatus value) {
  switch (value) {
    case PhoneBookStatusPhoneBookSyncStart:
    case PhoneBookStatusPhoneBookSyncEnd:
    case PhoneBookStatusPhoneBookSyncError:
    case PhoneBookStatusPhoneBookDel:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPhoneBookStatus(PhoneBookStatus value) {
  switch (value) {
    case PhoneBookStatusPhoneBookSyncStart:
      return @"PhoneBookStatusPhoneBookSyncStart";
    case PhoneBookStatusPhoneBookSyncEnd:
      return @"PhoneBookStatusPhoneBookSyncEnd";
    case PhoneBookStatusPhoneBookSyncError:
      return @"PhoneBookStatusPhoneBookSyncError";
    case PhoneBookStatusPhoneBookDel:
      return @"PhoneBookStatusPhoneBookDel";
    default:
      return nil;
  }
}

BOOL ReverseStatusIsValidValue(ReverseStatus value) {
  switch (value) {
    case ReverseStatusReverseStart:
    case ReverseStatusReverseEnd:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromReverseStatus(ReverseStatus value) {
  switch (value) {
    case ReverseStatusReverseStart:
      return @"ReverseStatusReverseStart";
    case ReverseStatusReverseEnd:
      return @"ReverseStatusReverseEnd";
    default:
      return nil;
  }
}

@interface ConnectReq ()
@property (strong) NSString* deviceSn;
@property (strong) NSString* softwareVersion;
@end

@implementation ConnectReq

- (BOOL) hasDeviceSn {
  return !!hasDeviceSn_;
}
- (void) setHasDeviceSn:(BOOL) _value_ {
  hasDeviceSn_ = !!_value_;
}
@synthesize deviceSn;
- (BOOL) hasSoftwareVersion {
  return !!hasSoftwareVersion_;
}
- (void) setHasSoftwareVersion:(BOOL) _value_ {
  hasSoftwareVersion_ = !!_value_;
}
@synthesize softwareVersion;
- (instancetype) init {
  if ((self = [super init])) {
    self.deviceSn = @"";
    self.softwareVersion = @"";
  }
  return self;
}
static ConnectReq* defaultConnectReqInstance = nil;
+ (void) initialize {
  if (self == [ConnectReq class]) {
    defaultConnectReqInstance = [[ConnectReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultConnectReqInstance;
}
- (instancetype) defaultInstance {
  return defaultConnectReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDeviceSn) {
    return NO;
  }
  if (!self.hasSoftwareVersion) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDeviceSn) {
    [output writeString:1 value:self.deviceSn];
  }
  if (self.hasSoftwareVersion) {
    [output writeString:2 value:self.softwareVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDeviceSn) {
    size_ += computeStringSize(1, self.deviceSn);
  }
  if (self.hasSoftwareVersion) {
    size_ += computeStringSize(2, self.softwareVersion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConnectReq*) parseFromData:(NSData*) data {
  return (ConnectReq*)[[[ConnectReq builder] mergeFromData:data] build];
}
+ (ConnectReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectReq*)[[[ConnectReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ConnectReq*) parseFromInputStream:(NSInputStream*) input {
  return (ConnectReq*)[[[ConnectReq builder] mergeFromInputStream:input] build];
}
+ (ConnectReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectReq*)[[[ConnectReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConnectReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ConnectReq*)[[[ConnectReq builder] mergeFromCodedInputStream:input] build];
}
+ (ConnectReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectReq*)[[[ConnectReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConnectReqBuilder*) builder {
  return [[ConnectReqBuilder alloc] init];
}
+ (ConnectReqBuilder*) builderWithPrototype:(ConnectReq*) prototype {
  return [[ConnectReq builder] mergeFrom:prototype];
}
- (ConnectReqBuilder*) builder {
  return [ConnectReq builder];
}
- (ConnectReqBuilder*) toBuilder {
  return [ConnectReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDeviceSn) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceSn", self.deviceSn];
  }
  if (self.hasSoftwareVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"softwareVersion", self.softwareVersion];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDeviceSn) {
    [dictionary setObject: self.deviceSn forKey: @"deviceSn"];
  }
  if (self.hasSoftwareVersion) {
    [dictionary setObject: self.softwareVersion forKey: @"softwareVersion"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ConnectReq class]]) {
    return NO;
  }
  ConnectReq *otherMessage = other;
  return
      self.hasDeviceSn == otherMessage.hasDeviceSn &&
      (!self.hasDeviceSn || [self.deviceSn isEqual:otherMessage.deviceSn]) &&
      self.hasSoftwareVersion == otherMessage.hasSoftwareVersion &&
      (!self.hasSoftwareVersion || [self.softwareVersion isEqual:otherMessage.softwareVersion]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDeviceSn) {
    hashCode = hashCode * 31 + [self.deviceSn hash];
  }
  if (self.hasSoftwareVersion) {
    hashCode = hashCode * 31 + [self.softwareVersion hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ConnectReqBuilder()
@property (strong) ConnectReq* resultConnectReq;
@end

@implementation ConnectReqBuilder
@synthesize resultConnectReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConnectReq = [[ConnectReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConnectReq;
}
- (ConnectReqBuilder*) clear {
  self.resultConnectReq = [[ConnectReq alloc] init];
  return self;
}
- (ConnectReqBuilder*) clone {
  return [ConnectReq builderWithPrototype:resultConnectReq];
}
- (ConnectReq*) defaultInstance {
  return [ConnectReq defaultInstance];
}
- (ConnectReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ConnectReq*) buildPartial {
  ConnectReq* returnMe = resultConnectReq;
  self.resultConnectReq = nil;
  return returnMe;
}
- (ConnectReqBuilder*) mergeFrom:(ConnectReq*) other {
  if (other == [ConnectReq defaultInstance]) {
    return self;
  }
  if (other.hasDeviceSn) {
    [self setDeviceSn:other.deviceSn];
  }
  if (other.hasSoftwareVersion) {
    [self setSoftwareVersion:other.softwareVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ConnectReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ConnectReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDeviceSn:[input readString]];
        break;
      }
      case 18: {
        [self setSoftwareVersion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDeviceSn {
  return resultConnectReq.hasDeviceSn;
}
- (NSString*) deviceSn {
  return resultConnectReq.deviceSn;
}
- (ConnectReqBuilder*) setDeviceSn:(NSString*) value {
  resultConnectReq.hasDeviceSn = YES;
  resultConnectReq.deviceSn = value;
  return self;
}
- (ConnectReqBuilder*) clearDeviceSn {
  resultConnectReq.hasDeviceSn = NO;
  resultConnectReq.deviceSn = @"";
  return self;
}
- (BOOL) hasSoftwareVersion {
  return resultConnectReq.hasSoftwareVersion;
}
- (NSString*) softwareVersion {
  return resultConnectReq.softwareVersion;
}
- (ConnectReqBuilder*) setSoftwareVersion:(NSString*) value {
  resultConnectReq.hasSoftwareVersion = YES;
  resultConnectReq.softwareVersion = value;
  return self;
}
- (ConnectReqBuilder*) clearSoftwareVersion {
  resultConnectReq.hasSoftwareVersion = NO;
  resultConnectReq.softwareVersion = @"";
  return self;
}
@end

@interface ConnectRsp ()
@property RspCode result;
@property UInt32 developId;
@property (strong) NSString* deviceSn;
@property (strong) NSString* softwareVersion;
@end

@implementation ConnectRsp

- (BOOL) hasResult {
  return !!hasResult_;
}
- (void) setHasResult:(BOOL) _value_ {
  hasResult_ = !!_value_;
}
@synthesize result;
- (BOOL) hasDevelopId {
  return !!hasDevelopId_;
}
- (void) setHasDevelopId:(BOOL) _value_ {
  hasDevelopId_ = !!_value_;
}
@synthesize developId;
- (BOOL) hasDeviceSn {
  return !!hasDeviceSn_;
}
- (void) setHasDeviceSn:(BOOL) _value_ {
  hasDeviceSn_ = !!_value_;
}
@synthesize deviceSn;
- (BOOL) hasSoftwareVersion {
  return !!hasSoftwareVersion_;
}
- (void) setHasSoftwareVersion:(BOOL) _value_ {
  hasSoftwareVersion_ = !!_value_;
}
@synthesize softwareVersion;
- (instancetype) init {
  if ((self = [super init])) {
    self.result = RspCodeFailed;
    self.developId = 0;
    self.deviceSn = @"";
    self.softwareVersion = @"";
  }
  return self;
}
static ConnectRsp* defaultConnectRspInstance = nil;
+ (void) initialize {
  if (self == [ConnectRsp class]) {
    defaultConnectRspInstance = [[ConnectRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultConnectRspInstance;
}
- (instancetype) defaultInstance {
  return defaultConnectRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasResult) {
    return NO;
  }
  if (!self.hasDevelopId) {
    return NO;
  }
  if (!self.hasDeviceSn) {
    return NO;
  }
  if (!self.hasSoftwareVersion) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResult) {
    [output writeEnum:1 value:self.result];
  }
  if (self.hasDevelopId) {
    [output writeUInt32:2 value:self.developId];
  }
  if (self.hasDeviceSn) {
    [output writeString:3 value:self.deviceSn];
  }
  if (self.hasSoftwareVersion) {
    [output writeString:4 value:self.softwareVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResult) {
    size_ += computeEnumSize(1, self.result);
  }
  if (self.hasDevelopId) {
    size_ += computeUInt32Size(2, self.developId);
  }
  if (self.hasDeviceSn) {
    size_ += computeStringSize(3, self.deviceSn);
  }
  if (self.hasSoftwareVersion) {
    size_ += computeStringSize(4, self.softwareVersion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConnectRsp*) parseFromData:(NSData*) data {
  return (ConnectRsp*)[[[ConnectRsp builder] mergeFromData:data] build];
}
+ (ConnectRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectRsp*)[[[ConnectRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ConnectRsp*) parseFromInputStream:(NSInputStream*) input {
  return (ConnectRsp*)[[[ConnectRsp builder] mergeFromInputStream:input] build];
}
+ (ConnectRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectRsp*)[[[ConnectRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConnectRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ConnectRsp*)[[[ConnectRsp builder] mergeFromCodedInputStream:input] build];
}
+ (ConnectRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectRsp*)[[[ConnectRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConnectRspBuilder*) builder {
  return [[ConnectRspBuilder alloc] init];
}
+ (ConnectRspBuilder*) builderWithPrototype:(ConnectRsp*) prototype {
  return [[ConnectRsp builder] mergeFrom:prototype];
}
- (ConnectRspBuilder*) builder {
  return [ConnectRsp builder];
}
- (ConnectRspBuilder*) toBuilder {
  return [ConnectRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"result", NSStringFromRspCode(self.result)];
  }
  if (self.hasDevelopId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"developId", [NSNumber numberWithInteger:self.developId]];
  }
  if (self.hasDeviceSn) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceSn", self.deviceSn];
  }
  if (self.hasSoftwareVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"softwareVersion", self.softwareVersion];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResult) {
    [dictionary setObject: @(self.result) forKey: @"result"];
  }
  if (self.hasDevelopId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.developId] forKey: @"developId"];
  }
  if (self.hasDeviceSn) {
    [dictionary setObject: self.deviceSn forKey: @"deviceSn"];
  }
  if (self.hasSoftwareVersion) {
    [dictionary setObject: self.softwareVersion forKey: @"softwareVersion"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ConnectRsp class]]) {
    return NO;
  }
  ConnectRsp *otherMessage = other;
  return
      self.hasResult == otherMessage.hasResult &&
      (!self.hasResult || self.result == otherMessage.result) &&
      self.hasDevelopId == otherMessage.hasDevelopId &&
      (!self.hasDevelopId || self.developId == otherMessage.developId) &&
      self.hasDeviceSn == otherMessage.hasDeviceSn &&
      (!self.hasDeviceSn || [self.deviceSn isEqual:otherMessage.deviceSn]) &&
      self.hasSoftwareVersion == otherMessage.hasSoftwareVersion &&
      (!self.hasSoftwareVersion || [self.softwareVersion isEqual:otherMessage.softwareVersion]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResult) {
    hashCode = hashCode * 31 + self.result;
  }
  if (self.hasDevelopId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.developId] hash];
  }
  if (self.hasDeviceSn) {
    hashCode = hashCode * 31 + [self.deviceSn hash];
  }
  if (self.hasSoftwareVersion) {
    hashCode = hashCode * 31 + [self.softwareVersion hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ConnectRspBuilder()
@property (strong) ConnectRsp* resultConnectRsp;
@end

@implementation ConnectRspBuilder
@synthesize resultConnectRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConnectRsp = [[ConnectRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConnectRsp;
}
- (ConnectRspBuilder*) clear {
  self.resultConnectRsp = [[ConnectRsp alloc] init];
  return self;
}
- (ConnectRspBuilder*) clone {
  return [ConnectRsp builderWithPrototype:resultConnectRsp];
}
- (ConnectRsp*) defaultInstance {
  return [ConnectRsp defaultInstance];
}
- (ConnectRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ConnectRsp*) buildPartial {
  ConnectRsp* returnMe = resultConnectRsp;
  self.resultConnectRsp = nil;
  return returnMe;
}
- (ConnectRspBuilder*) mergeFrom:(ConnectRsp*) other {
  if (other == [ConnectRsp defaultInstance]) {
    return self;
  }
  if (other.hasResult) {
    [self setResult:other.result];
  }
  if (other.hasDevelopId) {
    [self setDevelopId:other.developId];
  }
  if (other.hasDeviceSn) {
    [self setDeviceSn:other.deviceSn];
  }
  if (other.hasSoftwareVersion) {
    [self setSoftwareVersion:other.softwareVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ConnectRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ConnectRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setResult:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setDevelopId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setDeviceSn:[input readString]];
        break;
      }
      case 34: {
        [self setSoftwareVersion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasResult {
  return resultConnectRsp.hasResult;
}
- (RspCode) result {
  return resultConnectRsp.result;
}
- (ConnectRspBuilder*) setResult:(RspCode) value {
  resultConnectRsp.hasResult = YES;
  resultConnectRsp.result = value;
  return self;
}
- (ConnectRspBuilder*) clearResult {
  resultConnectRsp.hasResult = NO;
  resultConnectRsp.result = RspCodeFailed;
  return self;
}
- (BOOL) hasDevelopId {
  return resultConnectRsp.hasDevelopId;
}
- (UInt32) developId {
  return resultConnectRsp.developId;
}
- (ConnectRspBuilder*) setDevelopId:(UInt32) value {
  resultConnectRsp.hasDevelopId = YES;
  resultConnectRsp.developId = value;
  return self;
}
- (ConnectRspBuilder*) clearDevelopId {
  resultConnectRsp.hasDevelopId = NO;
  resultConnectRsp.developId = 0;
  return self;
}
- (BOOL) hasDeviceSn {
  return resultConnectRsp.hasDeviceSn;
}
- (NSString*) deviceSn {
  return resultConnectRsp.deviceSn;
}
- (ConnectRspBuilder*) setDeviceSn:(NSString*) value {
  resultConnectRsp.hasDeviceSn = YES;
  resultConnectRsp.deviceSn = value;
  return self;
}
- (ConnectRspBuilder*) clearDeviceSn {
  resultConnectRsp.hasDeviceSn = NO;
  resultConnectRsp.deviceSn = @"";
  return self;
}
- (BOOL) hasSoftwareVersion {
  return resultConnectRsp.hasSoftwareVersion;
}
- (NSString*) softwareVersion {
  return resultConnectRsp.softwareVersion;
}
- (ConnectRspBuilder*) setSoftwareVersion:(NSString*) value {
  resultConnectRsp.hasSoftwareVersion = YES;
  resultConnectRsp.softwareVersion = value;
  return self;
}
- (ConnectRspBuilder*) clearSoftwareVersion {
  resultConnectRsp.hasSoftwareVersion = NO;
  resultConnectRsp.softwareVersion = @"";
  return self;
}
@end

@interface DeviceParameterSyncGetReq ()
@property YesOrNo getDeviceParameter;
@end

@implementation DeviceParameterSyncGetReq

- (BOOL) hasGetDeviceParameter {
  return !!hasGetDeviceParameter_;
}
- (void) setHasGetDeviceParameter:(BOOL) _value_ {
  hasGetDeviceParameter_ = !!_value_;
}
@synthesize getDeviceParameter;
- (instancetype) init {
  if ((self = [super init])) {
    self.getDeviceParameter = YesOrNoNo;
  }
  return self;
}
static DeviceParameterSyncGetReq* defaultDeviceParameterSyncGetReqInstance = nil;
+ (void) initialize {
  if (self == [DeviceParameterSyncGetReq class]) {
    defaultDeviceParameterSyncGetReqInstance = [[DeviceParameterSyncGetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDeviceParameterSyncGetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultDeviceParameterSyncGetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetDeviceParameter) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetDeviceParameter) {
    [output writeEnum:1 value:self.getDeviceParameter];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetDeviceParameter) {
    size_ += computeEnumSize(1, self.getDeviceParameter);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DeviceParameterSyncGetReq*) parseFromData:(NSData*) data {
  return (DeviceParameterSyncGetReq*)[[[DeviceParameterSyncGetReq builder] mergeFromData:data] build];
}
+ (DeviceParameterSyncGetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceParameterSyncGetReq*)[[[DeviceParameterSyncGetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DeviceParameterSyncGetReq*) parseFromInputStream:(NSInputStream*) input {
  return (DeviceParameterSyncGetReq*)[[[DeviceParameterSyncGetReq builder] mergeFromInputStream:input] build];
}
+ (DeviceParameterSyncGetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceParameterSyncGetReq*)[[[DeviceParameterSyncGetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeviceParameterSyncGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DeviceParameterSyncGetReq*)[[[DeviceParameterSyncGetReq builder] mergeFromCodedInputStream:input] build];
}
+ (DeviceParameterSyncGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceParameterSyncGetReq*)[[[DeviceParameterSyncGetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeviceParameterSyncGetReqBuilder*) builder {
  return [[DeviceParameterSyncGetReqBuilder alloc] init];
}
+ (DeviceParameterSyncGetReqBuilder*) builderWithPrototype:(DeviceParameterSyncGetReq*) prototype {
  return [[DeviceParameterSyncGetReq builder] mergeFrom:prototype];
}
- (DeviceParameterSyncGetReqBuilder*) builder {
  return [DeviceParameterSyncGetReq builder];
}
- (DeviceParameterSyncGetReqBuilder*) toBuilder {
  return [DeviceParameterSyncGetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetDeviceParameter) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getDeviceParameter", NSStringFromYesOrNo(self.getDeviceParameter)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetDeviceParameter) {
    [dictionary setObject: @(self.getDeviceParameter) forKey: @"getDeviceParameter"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DeviceParameterSyncGetReq class]]) {
    return NO;
  }
  DeviceParameterSyncGetReq *otherMessage = other;
  return
      self.hasGetDeviceParameter == otherMessage.hasGetDeviceParameter &&
      (!self.hasGetDeviceParameter || self.getDeviceParameter == otherMessage.getDeviceParameter) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetDeviceParameter) {
    hashCode = hashCode * 31 + self.getDeviceParameter;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DeviceParameterSyncGetReqBuilder()
@property (strong) DeviceParameterSyncGetReq* resultDeviceParameterSyncGetReq;
@end

@implementation DeviceParameterSyncGetReqBuilder
@synthesize resultDeviceParameterSyncGetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDeviceParameterSyncGetReq = [[DeviceParameterSyncGetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDeviceParameterSyncGetReq;
}
- (DeviceParameterSyncGetReqBuilder*) clear {
  self.resultDeviceParameterSyncGetReq = [[DeviceParameterSyncGetReq alloc] init];
  return self;
}
- (DeviceParameterSyncGetReqBuilder*) clone {
  return [DeviceParameterSyncGetReq builderWithPrototype:resultDeviceParameterSyncGetReq];
}
- (DeviceParameterSyncGetReq*) defaultInstance {
  return [DeviceParameterSyncGetReq defaultInstance];
}
- (DeviceParameterSyncGetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DeviceParameterSyncGetReq*) buildPartial {
  DeviceParameterSyncGetReq* returnMe = resultDeviceParameterSyncGetReq;
  self.resultDeviceParameterSyncGetReq = nil;
  return returnMe;
}
- (DeviceParameterSyncGetReqBuilder*) mergeFrom:(DeviceParameterSyncGetReq*) other {
  if (other == [DeviceParameterSyncGetReq defaultInstance]) {
    return self;
  }
  if (other.hasGetDeviceParameter) {
    [self setGetDeviceParameter:other.getDeviceParameter];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DeviceParameterSyncGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DeviceParameterSyncGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        YesOrNo value = (YesOrNo)[input readEnum];
        if (YesOrNoIsValidValue(value)) {
          [self setGetDeviceParameter:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasGetDeviceParameter {
  return resultDeviceParameterSyncGetReq.hasGetDeviceParameter;
}
- (YesOrNo) getDeviceParameter {
  return resultDeviceParameterSyncGetReq.getDeviceParameter;
}
- (DeviceParameterSyncGetReqBuilder*) setGetDeviceParameter:(YesOrNo) value {
  resultDeviceParameterSyncGetReq.hasGetDeviceParameter = YES;
  resultDeviceParameterSyncGetReq.getDeviceParameter = value;
  return self;
}
- (DeviceParameterSyncGetReqBuilder*) clearGetDeviceParameter {
  resultDeviceParameterSyncGetReq.hasGetDeviceParameter = NO;
  resultDeviceParameterSyncGetReq.getDeviceParameter = YesOrNoNo;
  return self;
}
@end

@interface DeviceParameterSyncSetRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@property (strong) NSData* deviceParameter;
@end

@implementation DeviceParameterSyncSetRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasDeviceParameter {
  return !!hasDeviceParameter_;
}
- (void) setHasDeviceParameter:(BOOL) _value_ {
  hasDeviceParameter_ = !!_value_;
}
@synthesize deviceParameter;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
    self.deviceParameter = [NSData data];
  }
  return self;
}
static DeviceParameterSyncSetRsp* defaultDeviceParameterSyncSetRspInstance = nil;
+ (void) initialize {
  if (self == [DeviceParameterSyncSetRsp class]) {
    defaultDeviceParameterSyncSetRspInstance = [[DeviceParameterSyncSetRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDeviceParameterSyncSetRspInstance;
}
- (instancetype) defaultInstance {
  return defaultDeviceParameterSyncSetRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  if (self.hasDeviceParameter) {
    [output writeData:3 value:self.deviceParameter];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  if (self.hasDeviceParameter) {
    size_ += computeDataSize(3, self.deviceParameter);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DeviceParameterSyncSetRsp*) parseFromData:(NSData*) data {
  return (DeviceParameterSyncSetRsp*)[[[DeviceParameterSyncSetRsp builder] mergeFromData:data] build];
}
+ (DeviceParameterSyncSetRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceParameterSyncSetRsp*)[[[DeviceParameterSyncSetRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DeviceParameterSyncSetRsp*) parseFromInputStream:(NSInputStream*) input {
  return (DeviceParameterSyncSetRsp*)[[[DeviceParameterSyncSetRsp builder] mergeFromInputStream:input] build];
}
+ (DeviceParameterSyncSetRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceParameterSyncSetRsp*)[[[DeviceParameterSyncSetRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeviceParameterSyncSetRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DeviceParameterSyncSetRsp*)[[[DeviceParameterSyncSetRsp builder] mergeFromCodedInputStream:input] build];
}
+ (DeviceParameterSyncSetRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceParameterSyncSetRsp*)[[[DeviceParameterSyncSetRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeviceParameterSyncSetRspBuilder*) builder {
  return [[DeviceParameterSyncSetRspBuilder alloc] init];
}
+ (DeviceParameterSyncSetRspBuilder*) builderWithPrototype:(DeviceParameterSyncSetRsp*) prototype {
  return [[DeviceParameterSyncSetRsp builder] mergeFrom:prototype];
}
- (DeviceParameterSyncSetRspBuilder*) builder {
  return [DeviceParameterSyncSetRsp builder];
}
- (DeviceParameterSyncSetRspBuilder*) toBuilder {
  return [DeviceParameterSyncSetRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  if (self.hasDeviceParameter) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceParameter", self.deviceParameter];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  if (self.hasDeviceParameter) {
    [dictionary setObject: self.deviceParameter forKey: @"deviceParameter"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DeviceParameterSyncSetRsp class]]) {
    return NO;
  }
  DeviceParameterSyncSetRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasDeviceParameter == otherMessage.hasDeviceParameter &&
      (!self.hasDeviceParameter || [self.deviceParameter isEqual:otherMessage.deviceParameter]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  if (self.hasDeviceParameter) {
    hashCode = hashCode * 31 + [self.deviceParameter hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DeviceParameterSyncSetRspBuilder()
@property (strong) DeviceParameterSyncSetRsp* resultDeviceParameterSyncSetRsp;
@end

@implementation DeviceParameterSyncSetRspBuilder
@synthesize resultDeviceParameterSyncSetRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDeviceParameterSyncSetRsp = [[DeviceParameterSyncSetRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDeviceParameterSyncSetRsp;
}
- (DeviceParameterSyncSetRspBuilder*) clear {
  self.resultDeviceParameterSyncSetRsp = [[DeviceParameterSyncSetRsp alloc] init];
  return self;
}
- (DeviceParameterSyncSetRspBuilder*) clone {
  return [DeviceParameterSyncSetRsp builderWithPrototype:resultDeviceParameterSyncSetRsp];
}
- (DeviceParameterSyncSetRsp*) defaultInstance {
  return [DeviceParameterSyncSetRsp defaultInstance];
}
- (DeviceParameterSyncSetRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DeviceParameterSyncSetRsp*) buildPartial {
  DeviceParameterSyncSetRsp* returnMe = resultDeviceParameterSyncSetRsp;
  self.resultDeviceParameterSyncSetRsp = nil;
  return returnMe;
}
- (DeviceParameterSyncSetRspBuilder*) mergeFrom:(DeviceParameterSyncSetRsp*) other {
  if (other == [DeviceParameterSyncSetRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasDeviceParameter) {
    [self setDeviceParameter:other.deviceParameter];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DeviceParameterSyncSetRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DeviceParameterSyncSetRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setDeviceParameter:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultDeviceParameterSyncSetRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultDeviceParameterSyncSetRsp.rspCode;
}
- (DeviceParameterSyncSetRspBuilder*) setRspCode:(RspCode) value {
  resultDeviceParameterSyncSetRsp.hasRspCode = YES;
  resultDeviceParameterSyncSetRsp.rspCode = value;
  return self;
}
- (DeviceParameterSyncSetRspBuilder*) clearRspCode {
  resultDeviceParameterSyncSetRsp.hasRspCode = NO;
  resultDeviceParameterSyncSetRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultDeviceParameterSyncSetRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultDeviceParameterSyncSetRsp.errorCode;
}
- (DeviceParameterSyncSetRspBuilder*) setErrorCode:(ErrorCode) value {
  resultDeviceParameterSyncSetRsp.hasErrorCode = YES;
  resultDeviceParameterSyncSetRsp.errorCode = value;
  return self;
}
- (DeviceParameterSyncSetRspBuilder*) clearErrorCode {
  resultDeviceParameterSyncSetRsp.hasErrorCode = NO;
  resultDeviceParameterSyncSetRsp.errorCode = ErrorCodeNormal;
  return self;
}
- (BOOL) hasDeviceParameter {
  return resultDeviceParameterSyncSetRsp.hasDeviceParameter;
}
- (NSData*) deviceParameter {
  return resultDeviceParameterSyncSetRsp.deviceParameter;
}
- (DeviceParameterSyncSetRspBuilder*) setDeviceParameter:(NSData*) value {
  resultDeviceParameterSyncSetRsp.hasDeviceParameter = YES;
  resultDeviceParameterSyncSetRsp.deviceParameter = value;
  return self;
}
- (DeviceParameterSyncSetRspBuilder*) clearDeviceParameter {
  resultDeviceParameterSyncSetRsp.hasDeviceParameter = NO;
  resultDeviceParameterSyncSetRsp.deviceParameter = [NSData data];
  return self;
}
@end

@interface DeviceParameterSyncNotification ()
@property DeviceParameterSyncStatus deviceParStatus;
@end

@implementation DeviceParameterSyncNotification

- (BOOL) hasDeviceParStatus {
  return !!hasDeviceParStatus_;
}
- (void) setHasDeviceParStatus:(BOOL) _value_ {
  hasDeviceParStatus_ = !!_value_;
}
@synthesize deviceParStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.deviceParStatus = DeviceParameterSyncStatusSyncStart;
  }
  return self;
}
static DeviceParameterSyncNotification* defaultDeviceParameterSyncNotificationInstance = nil;
+ (void) initialize {
  if (self == [DeviceParameterSyncNotification class]) {
    defaultDeviceParameterSyncNotificationInstance = [[DeviceParameterSyncNotification alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDeviceParameterSyncNotificationInstance;
}
- (instancetype) defaultInstance {
  return defaultDeviceParameterSyncNotificationInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDeviceParStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDeviceParStatus) {
    [output writeEnum:1 value:self.deviceParStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDeviceParStatus) {
    size_ += computeEnumSize(1, self.deviceParStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DeviceParameterSyncNotification*) parseFromData:(NSData*) data {
  return (DeviceParameterSyncNotification*)[[[DeviceParameterSyncNotification builder] mergeFromData:data] build];
}
+ (DeviceParameterSyncNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceParameterSyncNotification*)[[[DeviceParameterSyncNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DeviceParameterSyncNotification*) parseFromInputStream:(NSInputStream*) input {
  return (DeviceParameterSyncNotification*)[[[DeviceParameterSyncNotification builder] mergeFromInputStream:input] build];
}
+ (DeviceParameterSyncNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceParameterSyncNotification*)[[[DeviceParameterSyncNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeviceParameterSyncNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DeviceParameterSyncNotification*)[[[DeviceParameterSyncNotification builder] mergeFromCodedInputStream:input] build];
}
+ (DeviceParameterSyncNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceParameterSyncNotification*)[[[DeviceParameterSyncNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeviceParameterSyncNotificationBuilder*) builder {
  return [[DeviceParameterSyncNotificationBuilder alloc] init];
}
+ (DeviceParameterSyncNotificationBuilder*) builderWithPrototype:(DeviceParameterSyncNotification*) prototype {
  return [[DeviceParameterSyncNotification builder] mergeFrom:prototype];
}
- (DeviceParameterSyncNotificationBuilder*) builder {
  return [DeviceParameterSyncNotification builder];
}
- (DeviceParameterSyncNotificationBuilder*) toBuilder {
  return [DeviceParameterSyncNotification builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDeviceParStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceParStatus", NSStringFromDeviceParameterSyncStatus(self.deviceParStatus)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDeviceParStatus) {
    [dictionary setObject: @(self.deviceParStatus) forKey: @"deviceParStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DeviceParameterSyncNotification class]]) {
    return NO;
  }
  DeviceParameterSyncNotification *otherMessage = other;
  return
      self.hasDeviceParStatus == otherMessage.hasDeviceParStatus &&
      (!self.hasDeviceParStatus || self.deviceParStatus == otherMessage.deviceParStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDeviceParStatus) {
    hashCode = hashCode * 31 + self.deviceParStatus;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DeviceParameterSyncNotificationBuilder()
@property (strong) DeviceParameterSyncNotification* resultDeviceParameterSyncNotification;
@end

@implementation DeviceParameterSyncNotificationBuilder
@synthesize resultDeviceParameterSyncNotification;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDeviceParameterSyncNotification = [[DeviceParameterSyncNotification alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDeviceParameterSyncNotification;
}
- (DeviceParameterSyncNotificationBuilder*) clear {
  self.resultDeviceParameterSyncNotification = [[DeviceParameterSyncNotification alloc] init];
  return self;
}
- (DeviceParameterSyncNotificationBuilder*) clone {
  return [DeviceParameterSyncNotification builderWithPrototype:resultDeviceParameterSyncNotification];
}
- (DeviceParameterSyncNotification*) defaultInstance {
  return [DeviceParameterSyncNotification defaultInstance];
}
- (DeviceParameterSyncNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DeviceParameterSyncNotification*) buildPartial {
  DeviceParameterSyncNotification* returnMe = resultDeviceParameterSyncNotification;
  self.resultDeviceParameterSyncNotification = nil;
  return returnMe;
}
- (DeviceParameterSyncNotificationBuilder*) mergeFrom:(DeviceParameterSyncNotification*) other {
  if (other == [DeviceParameterSyncNotification defaultInstance]) {
    return self;
  }
  if (other.hasDeviceParStatus) {
    [self setDeviceParStatus:other.deviceParStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DeviceParameterSyncNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DeviceParameterSyncNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        DeviceParameterSyncStatus value = (DeviceParameterSyncStatus)[input readEnum];
        if (DeviceParameterSyncStatusIsValidValue(value)) {
          [self setDeviceParStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasDeviceParStatus {
  return resultDeviceParameterSyncNotification.hasDeviceParStatus;
}
- (DeviceParameterSyncStatus) deviceParStatus {
  return resultDeviceParameterSyncNotification.deviceParStatus;
}
- (DeviceParameterSyncNotificationBuilder*) setDeviceParStatus:(DeviceParameterSyncStatus) value {
  resultDeviceParameterSyncNotification.hasDeviceParStatus = YES;
  resultDeviceParameterSyncNotification.deviceParStatus = value;
  return self;
}
- (DeviceParameterSyncNotificationBuilder*) clearDeviceParStatus {
  resultDeviceParameterSyncNotification.hasDeviceParStatus = NO;
  resultDeviceParameterSyncNotification.deviceParStatus = DeviceParameterSyncStatusSyncStart;
  return self;
}
@end

@interface SystemSetDataGetReq ()
@property YesOrNo getWifi;
@property YesOrNo getBt;
@property YesOrNo getSound;
@property YesOrNo getGps;
@property YesOrNo getBackGroDataSync;
@end

@implementation SystemSetDataGetReq

- (BOOL) hasGetWifi {
  return !!hasGetWifi_;
}
- (void) setHasGetWifi:(BOOL) _value_ {
  hasGetWifi_ = !!_value_;
}
@synthesize getWifi;
- (BOOL) hasGetBt {
  return !!hasGetBt_;
}
- (void) setHasGetBt:(BOOL) _value_ {
  hasGetBt_ = !!_value_;
}
@synthesize getBt;
- (BOOL) hasGetSound {
  return !!hasGetSound_;
}
- (void) setHasGetSound:(BOOL) _value_ {
  hasGetSound_ = !!_value_;
}
@synthesize getSound;
- (BOOL) hasGetGps {
  return !!hasGetGps_;
}
- (void) setHasGetGps:(BOOL) _value_ {
  hasGetGps_ = !!_value_;
}
@synthesize getGps;
- (BOOL) hasGetBackGroDataSync {
  return !!hasGetBackGroDataSync_;
}
- (void) setHasGetBackGroDataSync:(BOOL) _value_ {
  hasGetBackGroDataSync_ = !!_value_;
}
@synthesize getBackGroDataSync;
- (instancetype) init {
  if ((self = [super init])) {
    self.getWifi = YesOrNoNo;
    self.getBt = YesOrNoNo;
    self.getSound = YesOrNoNo;
    self.getGps = YesOrNoNo;
    self.getBackGroDataSync = YesOrNoNo;
  }
  return self;
}
static SystemSetDataGetReq* defaultSystemSetDataGetReqInstance = nil;
+ (void) initialize {
  if (self == [SystemSetDataGetReq class]) {
    defaultSystemSetDataGetReqInstance = [[SystemSetDataGetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSystemSetDataGetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultSystemSetDataGetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetWifi) {
    return NO;
  }
  if (!self.hasGetBt) {
    return NO;
  }
  if (!self.hasGetSound) {
    return NO;
  }
  if (!self.hasGetGps) {
    return NO;
  }
  if (!self.hasGetBackGroDataSync) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetWifi) {
    [output writeEnum:1 value:self.getWifi];
  }
  if (self.hasGetBt) {
    [output writeEnum:2 value:self.getBt];
  }
  if (self.hasGetSound) {
    [output writeEnum:3 value:self.getSound];
  }
  if (self.hasGetGps) {
    [output writeEnum:4 value:self.getGps];
  }
  if (self.hasGetBackGroDataSync) {
    [output writeEnum:5 value:self.getBackGroDataSync];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetWifi) {
    size_ += computeEnumSize(1, self.getWifi);
  }
  if (self.hasGetBt) {
    size_ += computeEnumSize(2, self.getBt);
  }
  if (self.hasGetSound) {
    size_ += computeEnumSize(3, self.getSound);
  }
  if (self.hasGetGps) {
    size_ += computeEnumSize(4, self.getGps);
  }
  if (self.hasGetBackGroDataSync) {
    size_ += computeEnumSize(5, self.getBackGroDataSync);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SystemSetDataGetReq*) parseFromData:(NSData*) data {
  return (SystemSetDataGetReq*)[[[SystemSetDataGetReq builder] mergeFromData:data] build];
}
+ (SystemSetDataGetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SystemSetDataGetReq*)[[[SystemSetDataGetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SystemSetDataGetReq*) parseFromInputStream:(NSInputStream*) input {
  return (SystemSetDataGetReq*)[[[SystemSetDataGetReq builder] mergeFromInputStream:input] build];
}
+ (SystemSetDataGetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SystemSetDataGetReq*)[[[SystemSetDataGetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SystemSetDataGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SystemSetDataGetReq*)[[[SystemSetDataGetReq builder] mergeFromCodedInputStream:input] build];
}
+ (SystemSetDataGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SystemSetDataGetReq*)[[[SystemSetDataGetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SystemSetDataGetReqBuilder*) builder {
  return [[SystemSetDataGetReqBuilder alloc] init];
}
+ (SystemSetDataGetReqBuilder*) builderWithPrototype:(SystemSetDataGetReq*) prototype {
  return [[SystemSetDataGetReq builder] mergeFrom:prototype];
}
- (SystemSetDataGetReqBuilder*) builder {
  return [SystemSetDataGetReq builder];
}
- (SystemSetDataGetReqBuilder*) toBuilder {
  return [SystemSetDataGetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetWifi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getWifi", NSStringFromYesOrNo(self.getWifi)];
  }
  if (self.hasGetBt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getBt", NSStringFromYesOrNo(self.getBt)];
  }
  if (self.hasGetSound) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getSound", NSStringFromYesOrNo(self.getSound)];
  }
  if (self.hasGetGps) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getGps", NSStringFromYesOrNo(self.getGps)];
  }
  if (self.hasGetBackGroDataSync) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getBackGroDataSync", NSStringFromYesOrNo(self.getBackGroDataSync)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetWifi) {
    [dictionary setObject: @(self.getWifi) forKey: @"getWifi"];
  }
  if (self.hasGetBt) {
    [dictionary setObject: @(self.getBt) forKey: @"getBt"];
  }
  if (self.hasGetSound) {
    [dictionary setObject: @(self.getSound) forKey: @"getSound"];
  }
  if (self.hasGetGps) {
    [dictionary setObject: @(self.getGps) forKey: @"getGps"];
  }
  if (self.hasGetBackGroDataSync) {
    [dictionary setObject: @(self.getBackGroDataSync) forKey: @"getBackGroDataSync"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SystemSetDataGetReq class]]) {
    return NO;
  }
  SystemSetDataGetReq *otherMessage = other;
  return
      self.hasGetWifi == otherMessage.hasGetWifi &&
      (!self.hasGetWifi || self.getWifi == otherMessage.getWifi) &&
      self.hasGetBt == otherMessage.hasGetBt &&
      (!self.hasGetBt || self.getBt == otherMessage.getBt) &&
      self.hasGetSound == otherMessage.hasGetSound &&
      (!self.hasGetSound || self.getSound == otherMessage.getSound) &&
      self.hasGetGps == otherMessage.hasGetGps &&
      (!self.hasGetGps || self.getGps == otherMessage.getGps) &&
      self.hasGetBackGroDataSync == otherMessage.hasGetBackGroDataSync &&
      (!self.hasGetBackGroDataSync || self.getBackGroDataSync == otherMessage.getBackGroDataSync) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetWifi) {
    hashCode = hashCode * 31 + self.getWifi;
  }
  if (self.hasGetBt) {
    hashCode = hashCode * 31 + self.getBt;
  }
  if (self.hasGetSound) {
    hashCode = hashCode * 31 + self.getSound;
  }
  if (self.hasGetGps) {
    hashCode = hashCode * 31 + self.getGps;
  }
  if (self.hasGetBackGroDataSync) {
    hashCode = hashCode * 31 + self.getBackGroDataSync;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SystemSetDataGetReqBuilder()
@property (strong) SystemSetDataGetReq* resultSystemSetDataGetReq;
@end

@implementation SystemSetDataGetReqBuilder
@synthesize resultSystemSetDataGetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSystemSetDataGetReq = [[SystemSetDataGetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSystemSetDataGetReq;
}
- (SystemSetDataGetReqBuilder*) clear {
  self.resultSystemSetDataGetReq = [[SystemSetDataGetReq alloc] init];
  return self;
}
- (SystemSetDataGetReqBuilder*) clone {
  return [SystemSetDataGetReq builderWithPrototype:resultSystemSetDataGetReq];
}
- (SystemSetDataGetReq*) defaultInstance {
  return [SystemSetDataGetReq defaultInstance];
}
- (SystemSetDataGetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SystemSetDataGetReq*) buildPartial {
  SystemSetDataGetReq* returnMe = resultSystemSetDataGetReq;
  self.resultSystemSetDataGetReq = nil;
  return returnMe;
}
- (SystemSetDataGetReqBuilder*) mergeFrom:(SystemSetDataGetReq*) other {
  if (other == [SystemSetDataGetReq defaultInstance]) {
    return self;
  }
  if (other.hasGetWifi) {
    [self setGetWifi:other.getWifi];
  }
  if (other.hasGetBt) {
    [self setGetBt:other.getBt];
  }
  if (other.hasGetSound) {
    [self setGetSound:other.getSound];
  }
  if (other.hasGetGps) {
    [self setGetGps:other.getGps];
  }
  if (other.hasGetBackGroDataSync) {
    [self setGetBackGroDataSync:other.getBackGroDataSync];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SystemSetDataGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SystemSetDataGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        YesOrNo value = (YesOrNo)[input readEnum];
        if (YesOrNoIsValidValue(value)) {
          [self setGetWifi:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        YesOrNo value = (YesOrNo)[input readEnum];
        if (YesOrNoIsValidValue(value)) {
          [self setGetBt:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        YesOrNo value = (YesOrNo)[input readEnum];
        if (YesOrNoIsValidValue(value)) {
          [self setGetSound:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        YesOrNo value = (YesOrNo)[input readEnum];
        if (YesOrNoIsValidValue(value)) {
          [self setGetGps:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        YesOrNo value = (YesOrNo)[input readEnum];
        if (YesOrNoIsValidValue(value)) {
          [self setGetBackGroDataSync:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasGetWifi {
  return resultSystemSetDataGetReq.hasGetWifi;
}
- (YesOrNo) getWifi {
  return resultSystemSetDataGetReq.getWifi;
}
- (SystemSetDataGetReqBuilder*) setGetWifi:(YesOrNo) value {
  resultSystemSetDataGetReq.hasGetWifi = YES;
  resultSystemSetDataGetReq.getWifi = value;
  return self;
}
- (SystemSetDataGetReqBuilder*) clearGetWifi {
  resultSystemSetDataGetReq.hasGetWifi = NO;
  resultSystemSetDataGetReq.getWifi = YesOrNoNo;
  return self;
}
- (BOOL) hasGetBt {
  return resultSystemSetDataGetReq.hasGetBt;
}
- (YesOrNo) getBt {
  return resultSystemSetDataGetReq.getBt;
}
- (SystemSetDataGetReqBuilder*) setGetBt:(YesOrNo) value {
  resultSystemSetDataGetReq.hasGetBt = YES;
  resultSystemSetDataGetReq.getBt = value;
  return self;
}
- (SystemSetDataGetReqBuilder*) clearGetBt {
  resultSystemSetDataGetReq.hasGetBt = NO;
  resultSystemSetDataGetReq.getBt = YesOrNoNo;
  return self;
}
- (BOOL) hasGetSound {
  return resultSystemSetDataGetReq.hasGetSound;
}
- (YesOrNo) getSound {
  return resultSystemSetDataGetReq.getSound;
}
- (SystemSetDataGetReqBuilder*) setGetSound:(YesOrNo) value {
  resultSystemSetDataGetReq.hasGetSound = YES;
  resultSystemSetDataGetReq.getSound = value;
  return self;
}
- (SystemSetDataGetReqBuilder*) clearGetSound {
  resultSystemSetDataGetReq.hasGetSound = NO;
  resultSystemSetDataGetReq.getSound = YesOrNoNo;
  return self;
}
- (BOOL) hasGetGps {
  return resultSystemSetDataGetReq.hasGetGps;
}
- (YesOrNo) getGps {
  return resultSystemSetDataGetReq.getGps;
}
- (SystemSetDataGetReqBuilder*) setGetGps:(YesOrNo) value {
  resultSystemSetDataGetReq.hasGetGps = YES;
  resultSystemSetDataGetReq.getGps = value;
  return self;
}
- (SystemSetDataGetReqBuilder*) clearGetGps {
  resultSystemSetDataGetReq.hasGetGps = NO;
  resultSystemSetDataGetReq.getGps = YesOrNoNo;
  return self;
}
- (BOOL) hasGetBackGroDataSync {
  return resultSystemSetDataGetReq.hasGetBackGroDataSync;
}
- (YesOrNo) getBackGroDataSync {
  return resultSystemSetDataGetReq.getBackGroDataSync;
}
- (SystemSetDataGetReqBuilder*) setGetBackGroDataSync:(YesOrNo) value {
  resultSystemSetDataGetReq.hasGetBackGroDataSync = YES;
  resultSystemSetDataGetReq.getBackGroDataSync = value;
  return self;
}
- (SystemSetDataGetReqBuilder*) clearGetBackGroDataSync {
  resultSystemSetDataGetReq.hasGetBackGroDataSync = NO;
  resultSystemSetDataGetReq.getBackGroDataSync = YesOrNoNo;
  return self;
}
@end

@interface SystemSetDataSetReq ()
@property YesOrNo setWifi;
@property YesOrNo setBt;
@property YesOrNo setSound;
@property YesOrNo setGps;
@property YesOrNo setBackGroDataSync;
@end

@implementation SystemSetDataSetReq

- (BOOL) hasSetWifi {
  return !!hasSetWifi_;
}
- (void) setHasSetWifi:(BOOL) _value_ {
  hasSetWifi_ = !!_value_;
}
@synthesize setWifi;
- (BOOL) hasSetBt {
  return !!hasSetBt_;
}
- (void) setHasSetBt:(BOOL) _value_ {
  hasSetBt_ = !!_value_;
}
@synthesize setBt;
- (BOOL) hasSetSound {
  return !!hasSetSound_;
}
- (void) setHasSetSound:(BOOL) _value_ {
  hasSetSound_ = !!_value_;
}
@synthesize setSound;
- (BOOL) hasSetGps {
  return !!hasSetGps_;
}
- (void) setHasSetGps:(BOOL) _value_ {
  hasSetGps_ = !!_value_;
}
@synthesize setGps;
- (BOOL) hasSetBackGroDataSync {
  return !!hasSetBackGroDataSync_;
}
- (void) setHasSetBackGroDataSync:(BOOL) _value_ {
  hasSetBackGroDataSync_ = !!_value_;
}
@synthesize setBackGroDataSync;
- (instancetype) init {
  if ((self = [super init])) {
    self.setWifi = YesOrNoNo;
    self.setBt = YesOrNoNo;
    self.setSound = YesOrNoNo;
    self.setGps = YesOrNoNo;
    self.setBackGroDataSync = YesOrNoNo;
  }
  return self;
}
static SystemSetDataSetReq* defaultSystemSetDataSetReqInstance = nil;
+ (void) initialize {
  if (self == [SystemSetDataSetReq class]) {
    defaultSystemSetDataSetReqInstance = [[SystemSetDataSetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSystemSetDataSetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultSystemSetDataSetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSetWifi) {
    return NO;
  }
  if (!self.hasSetBt) {
    return NO;
  }
  if (!self.hasSetSound) {
    return NO;
  }
  if (!self.hasSetGps) {
    return NO;
  }
  if (!self.hasSetBackGroDataSync) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSetWifi) {
    [output writeEnum:1 value:self.setWifi];
  }
  if (self.hasSetBt) {
    [output writeEnum:2 value:self.setBt];
  }
  if (self.hasSetSound) {
    [output writeEnum:3 value:self.setSound];
  }
  if (self.hasSetGps) {
    [output writeEnum:4 value:self.setGps];
  }
  if (self.hasSetBackGroDataSync) {
    [output writeEnum:5 value:self.setBackGroDataSync];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSetWifi) {
    size_ += computeEnumSize(1, self.setWifi);
  }
  if (self.hasSetBt) {
    size_ += computeEnumSize(2, self.setBt);
  }
  if (self.hasSetSound) {
    size_ += computeEnumSize(3, self.setSound);
  }
  if (self.hasSetGps) {
    size_ += computeEnumSize(4, self.setGps);
  }
  if (self.hasSetBackGroDataSync) {
    size_ += computeEnumSize(5, self.setBackGroDataSync);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SystemSetDataSetReq*) parseFromData:(NSData*) data {
  return (SystemSetDataSetReq*)[[[SystemSetDataSetReq builder] mergeFromData:data] build];
}
+ (SystemSetDataSetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SystemSetDataSetReq*)[[[SystemSetDataSetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SystemSetDataSetReq*) parseFromInputStream:(NSInputStream*) input {
  return (SystemSetDataSetReq*)[[[SystemSetDataSetReq builder] mergeFromInputStream:input] build];
}
+ (SystemSetDataSetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SystemSetDataSetReq*)[[[SystemSetDataSetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SystemSetDataSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SystemSetDataSetReq*)[[[SystemSetDataSetReq builder] mergeFromCodedInputStream:input] build];
}
+ (SystemSetDataSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SystemSetDataSetReq*)[[[SystemSetDataSetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SystemSetDataSetReqBuilder*) builder {
  return [[SystemSetDataSetReqBuilder alloc] init];
}
+ (SystemSetDataSetReqBuilder*) builderWithPrototype:(SystemSetDataSetReq*) prototype {
  return [[SystemSetDataSetReq builder] mergeFrom:prototype];
}
- (SystemSetDataSetReqBuilder*) builder {
  return [SystemSetDataSetReq builder];
}
- (SystemSetDataSetReqBuilder*) toBuilder {
  return [SystemSetDataSetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSetWifi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"setWifi", NSStringFromYesOrNo(self.setWifi)];
  }
  if (self.hasSetBt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"setBt", NSStringFromYesOrNo(self.setBt)];
  }
  if (self.hasSetSound) {
    [output appendFormat:@"%@%@: %@\n", indent, @"setSound", NSStringFromYesOrNo(self.setSound)];
  }
  if (self.hasSetGps) {
    [output appendFormat:@"%@%@: %@\n", indent, @"setGps", NSStringFromYesOrNo(self.setGps)];
  }
  if (self.hasSetBackGroDataSync) {
    [output appendFormat:@"%@%@: %@\n", indent, @"setBackGroDataSync", NSStringFromYesOrNo(self.setBackGroDataSync)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSetWifi) {
    [dictionary setObject: @(self.setWifi) forKey: @"setWifi"];
  }
  if (self.hasSetBt) {
    [dictionary setObject: @(self.setBt) forKey: @"setBt"];
  }
  if (self.hasSetSound) {
    [dictionary setObject: @(self.setSound) forKey: @"setSound"];
  }
  if (self.hasSetGps) {
    [dictionary setObject: @(self.setGps) forKey: @"setGps"];
  }
  if (self.hasSetBackGroDataSync) {
    [dictionary setObject: @(self.setBackGroDataSync) forKey: @"setBackGroDataSync"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SystemSetDataSetReq class]]) {
    return NO;
  }
  SystemSetDataSetReq *otherMessage = other;
  return
      self.hasSetWifi == otherMessage.hasSetWifi &&
      (!self.hasSetWifi || self.setWifi == otherMessage.setWifi) &&
      self.hasSetBt == otherMessage.hasSetBt &&
      (!self.hasSetBt || self.setBt == otherMessage.setBt) &&
      self.hasSetSound == otherMessage.hasSetSound &&
      (!self.hasSetSound || self.setSound == otherMessage.setSound) &&
      self.hasSetGps == otherMessage.hasSetGps &&
      (!self.hasSetGps || self.setGps == otherMessage.setGps) &&
      self.hasSetBackGroDataSync == otherMessage.hasSetBackGroDataSync &&
      (!self.hasSetBackGroDataSync || self.setBackGroDataSync == otherMessage.setBackGroDataSync) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSetWifi) {
    hashCode = hashCode * 31 + self.setWifi;
  }
  if (self.hasSetBt) {
    hashCode = hashCode * 31 + self.setBt;
  }
  if (self.hasSetSound) {
    hashCode = hashCode * 31 + self.setSound;
  }
  if (self.hasSetGps) {
    hashCode = hashCode * 31 + self.setGps;
  }
  if (self.hasSetBackGroDataSync) {
    hashCode = hashCode * 31 + self.setBackGroDataSync;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SystemSetDataSetReqBuilder()
@property (strong) SystemSetDataSetReq* resultSystemSetDataSetReq;
@end

@implementation SystemSetDataSetReqBuilder
@synthesize resultSystemSetDataSetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSystemSetDataSetReq = [[SystemSetDataSetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSystemSetDataSetReq;
}
- (SystemSetDataSetReqBuilder*) clear {
  self.resultSystemSetDataSetReq = [[SystemSetDataSetReq alloc] init];
  return self;
}
- (SystemSetDataSetReqBuilder*) clone {
  return [SystemSetDataSetReq builderWithPrototype:resultSystemSetDataSetReq];
}
- (SystemSetDataSetReq*) defaultInstance {
  return [SystemSetDataSetReq defaultInstance];
}
- (SystemSetDataSetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SystemSetDataSetReq*) buildPartial {
  SystemSetDataSetReq* returnMe = resultSystemSetDataSetReq;
  self.resultSystemSetDataSetReq = nil;
  return returnMe;
}
- (SystemSetDataSetReqBuilder*) mergeFrom:(SystemSetDataSetReq*) other {
  if (other == [SystemSetDataSetReq defaultInstance]) {
    return self;
  }
  if (other.hasSetWifi) {
    [self setSetWifi:other.setWifi];
  }
  if (other.hasSetBt) {
    [self setSetBt:other.setBt];
  }
  if (other.hasSetSound) {
    [self setSetSound:other.setSound];
  }
  if (other.hasSetGps) {
    [self setSetGps:other.setGps];
  }
  if (other.hasSetBackGroDataSync) {
    [self setSetBackGroDataSync:other.setBackGroDataSync];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SystemSetDataSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SystemSetDataSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        YesOrNo value = (YesOrNo)[input readEnum];
        if (YesOrNoIsValidValue(value)) {
          [self setSetWifi:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        YesOrNo value = (YesOrNo)[input readEnum];
        if (YesOrNoIsValidValue(value)) {
          [self setSetBt:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        YesOrNo value = (YesOrNo)[input readEnum];
        if (YesOrNoIsValidValue(value)) {
          [self setSetSound:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        YesOrNo value = (YesOrNo)[input readEnum];
        if (YesOrNoIsValidValue(value)) {
          [self setSetGps:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        YesOrNo value = (YesOrNo)[input readEnum];
        if (YesOrNoIsValidValue(value)) {
          [self setSetBackGroDataSync:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasSetWifi {
  return resultSystemSetDataSetReq.hasSetWifi;
}
- (YesOrNo) setWifi {
  return resultSystemSetDataSetReq.setWifi;
}
- (SystemSetDataSetReqBuilder*) setSetWifi:(YesOrNo) value {
  resultSystemSetDataSetReq.hasSetWifi = YES;
  resultSystemSetDataSetReq.setWifi = value;
  return self;
}
- (SystemSetDataSetReqBuilder*) clearSetWifi {
  resultSystemSetDataSetReq.hasSetWifi = NO;
  resultSystemSetDataSetReq.setWifi = YesOrNoNo;
  return self;
}
- (BOOL) hasSetBt {
  return resultSystemSetDataSetReq.hasSetBt;
}
- (YesOrNo) setBt {
  return resultSystemSetDataSetReq.setBt;
}
- (SystemSetDataSetReqBuilder*) setSetBt:(YesOrNo) value {
  resultSystemSetDataSetReq.hasSetBt = YES;
  resultSystemSetDataSetReq.setBt = value;
  return self;
}
- (SystemSetDataSetReqBuilder*) clearSetBt {
  resultSystemSetDataSetReq.hasSetBt = NO;
  resultSystemSetDataSetReq.setBt = YesOrNoNo;
  return self;
}
- (BOOL) hasSetSound {
  return resultSystemSetDataSetReq.hasSetSound;
}
- (YesOrNo) setSound {
  return resultSystemSetDataSetReq.setSound;
}
- (SystemSetDataSetReqBuilder*) setSetSound:(YesOrNo) value {
  resultSystemSetDataSetReq.hasSetSound = YES;
  resultSystemSetDataSetReq.setSound = value;
  return self;
}
- (SystemSetDataSetReqBuilder*) clearSetSound {
  resultSystemSetDataSetReq.hasSetSound = NO;
  resultSystemSetDataSetReq.setSound = YesOrNoNo;
  return self;
}
- (BOOL) hasSetGps {
  return resultSystemSetDataSetReq.hasSetGps;
}
- (YesOrNo) setGps {
  return resultSystemSetDataSetReq.setGps;
}
- (SystemSetDataSetReqBuilder*) setSetGps:(YesOrNo) value {
  resultSystemSetDataSetReq.hasSetGps = YES;
  resultSystemSetDataSetReq.setGps = value;
  return self;
}
- (SystemSetDataSetReqBuilder*) clearSetGps {
  resultSystemSetDataSetReq.hasSetGps = NO;
  resultSystemSetDataSetReq.setGps = YesOrNoNo;
  return self;
}
- (BOOL) hasSetBackGroDataSync {
  return resultSystemSetDataSetReq.hasSetBackGroDataSync;
}
- (YesOrNo) setBackGroDataSync {
  return resultSystemSetDataSetReq.setBackGroDataSync;
}
- (SystemSetDataSetReqBuilder*) setSetBackGroDataSync:(YesOrNo) value {
  resultSystemSetDataSetReq.hasSetBackGroDataSync = YES;
  resultSystemSetDataSetReq.setBackGroDataSync = value;
  return self;
}
- (SystemSetDataSetReqBuilder*) clearSetBackGroDataSync {
  resultSystemSetDataSetReq.hasSetBackGroDataSync = NO;
  resultSystemSetDataSetReq.setBackGroDataSync = YesOrNoNo;
  return self;
}
@end

@interface HacvSetRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@property BOOL onOff;
@property BOOL desOnOff;
@property BOOL acopen;
@property BOOL desAcopen;
@property CycMode cycMode;
@property CycMode desCycMode;
@property BlowMode blowMode0;
@property BlowMode desBlowMode0;
@property BlowMode blowMode1;
@property BlowMode desBlowMode1;
@property UInt32 windSpeed;
@property UInt32 desWindSpeed;
@property UInt32 temperature0;
@property UInt32 desTemperature0;
@property UInt32 temperature1;
@property UInt32 desTemperature1;
@end

@implementation HacvSetRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasOnOff {
  return !!hasOnOff_;
}
- (void) setHasOnOff:(BOOL) _value_ {
  hasOnOff_ = !!_value_;
}
- (BOOL) onOff {
  return !!onOff_;
}
- (void) setOnOff:(BOOL) _value_ {
  onOff_ = !!_value_;
}
- (BOOL) hasDesOnOff {
  return !!hasDesOnOff_;
}
- (void) setHasDesOnOff:(BOOL) _value_ {
  hasDesOnOff_ = !!_value_;
}
- (BOOL) desOnOff {
  return !!desOnOff_;
}
- (void) setDesOnOff:(BOOL) _value_ {
  desOnOff_ = !!_value_;
}
- (BOOL) hasAcopen {
  return !!hasAcopen_;
}
- (void) setHasAcopen:(BOOL) _value_ {
  hasAcopen_ = !!_value_;
}
- (BOOL) acopen {
  return !!acopen_;
}
- (void) setAcopen:(BOOL) _value_ {
  acopen_ = !!_value_;
}
- (BOOL) hasDesAcopen {
  return !!hasDesAcopen_;
}
- (void) setHasDesAcopen:(BOOL) _value_ {
  hasDesAcopen_ = !!_value_;
}
- (BOOL) desAcopen {
  return !!desAcopen_;
}
- (void) setDesAcopen:(BOOL) _value_ {
  desAcopen_ = !!_value_;
}
- (BOOL) hasCycMode {
  return !!hasCycMode_;
}
- (void) setHasCycMode:(BOOL) _value_ {
  hasCycMode_ = !!_value_;
}
@synthesize cycMode;
- (BOOL) hasDesCycMode {
  return !!hasDesCycMode_;
}
- (void) setHasDesCycMode:(BOOL) _value_ {
  hasDesCycMode_ = !!_value_;
}
@synthesize desCycMode;
- (BOOL) hasBlowMode0 {
  return !!hasBlowMode0_;
}
- (void) setHasBlowMode0:(BOOL) _value_ {
  hasBlowMode0_ = !!_value_;
}
@synthesize blowMode0;
- (BOOL) hasDesBlowMode0 {
  return !!hasDesBlowMode0_;
}
- (void) setHasDesBlowMode0:(BOOL) _value_ {
  hasDesBlowMode0_ = !!_value_;
}
@synthesize desBlowMode0;
- (BOOL) hasBlowMode1 {
  return !!hasBlowMode1_;
}
- (void) setHasBlowMode1:(BOOL) _value_ {
  hasBlowMode1_ = !!_value_;
}
@synthesize blowMode1;
- (BOOL) hasDesBlowMode1 {
  return !!hasDesBlowMode1_;
}
- (void) setHasDesBlowMode1:(BOOL) _value_ {
  hasDesBlowMode1_ = !!_value_;
}
@synthesize desBlowMode1;
- (BOOL) hasWindSpeed {
  return !!hasWindSpeed_;
}
- (void) setHasWindSpeed:(BOOL) _value_ {
  hasWindSpeed_ = !!_value_;
}
@synthesize windSpeed;
- (BOOL) hasDesWindSpeed {
  return !!hasDesWindSpeed_;
}
- (void) setHasDesWindSpeed:(BOOL) _value_ {
  hasDesWindSpeed_ = !!_value_;
}
@synthesize desWindSpeed;
- (BOOL) hasTemperature0 {
  return !!hasTemperature0_;
}
- (void) setHasTemperature0:(BOOL) _value_ {
  hasTemperature0_ = !!_value_;
}
@synthesize temperature0;
- (BOOL) hasDesTemperature0 {
  return !!hasDesTemperature0_;
}
- (void) setHasDesTemperature0:(BOOL) _value_ {
  hasDesTemperature0_ = !!_value_;
}
@synthesize desTemperature0;
- (BOOL) hasTemperature1 {
  return !!hasTemperature1_;
}
- (void) setHasTemperature1:(BOOL) _value_ {
  hasTemperature1_ = !!_value_;
}
@synthesize temperature1;
- (BOOL) hasDesTemperature1 {
  return !!hasDesTemperature1_;
}
- (void) setHasDesTemperature1:(BOOL) _value_ {
  hasDesTemperature1_ = !!_value_;
}
@synthesize desTemperature1;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
    self.onOff = NO;
    self.desOnOff = NO;
    self.acopen = NO;
    self.desAcopen = NO;
    self.cycMode = CycModeCycModeInside;
    self.desCycMode = CycModeCycModeInside;
    self.blowMode0 = BlowModeBlowFace;
    self.desBlowMode0 = BlowModeBlowFace;
    self.blowMode1 = BlowModeBlowFace;
    self.desBlowMode1 = BlowModeBlowFace;
    self.windSpeed = 0;
    self.desWindSpeed = 0;
    self.temperature0 = 0;
    self.desTemperature0 = 0;
    self.temperature1 = 0;
    self.desTemperature1 = 0;
  }
  return self;
}
static HacvSetRsp* defaultHacvSetRspInstance = nil;
+ (void) initialize {
  if (self == [HacvSetRsp class]) {
    defaultHacvSetRspInstance = [[HacvSetRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultHacvSetRspInstance;
}
- (instancetype) defaultInstance {
  return defaultHacvSetRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  if (self.hasOnOff) {
    [output writeBool:3 value:self.onOff];
  }
  if (self.hasDesOnOff) {
    [output writeBool:4 value:self.desOnOff];
  }
  if (self.hasAcopen) {
    [output writeBool:5 value:self.acopen];
  }
  if (self.hasDesAcopen) {
    [output writeBool:6 value:self.desAcopen];
  }
  if (self.hasCycMode) {
    [output writeEnum:7 value:self.cycMode];
  }
  if (self.hasDesCycMode) {
    [output writeEnum:8 value:self.desCycMode];
  }
  if (self.hasBlowMode0) {
    [output writeEnum:9 value:self.blowMode0];
  }
  if (self.hasDesBlowMode0) {
    [output writeEnum:10 value:self.desBlowMode0];
  }
  if (self.hasBlowMode1) {
    [output writeEnum:11 value:self.blowMode1];
  }
  if (self.hasDesBlowMode1) {
    [output writeEnum:12 value:self.desBlowMode1];
  }
  if (self.hasWindSpeed) {
    [output writeUInt32:13 value:self.windSpeed];
  }
  if (self.hasDesWindSpeed) {
    [output writeUInt32:14 value:self.desWindSpeed];
  }
  if (self.hasTemperature0) {
    [output writeUInt32:15 value:self.temperature0];
  }
  if (self.hasDesTemperature0) {
    [output writeUInt32:16 value:self.desTemperature0];
  }
  if (self.hasTemperature1) {
    [output writeUInt32:17 value:self.temperature1];
  }
  if (self.hasDesTemperature1) {
    [output writeUInt32:18 value:self.desTemperature1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  if (self.hasOnOff) {
    size_ += computeBoolSize(3, self.onOff);
  }
  if (self.hasDesOnOff) {
    size_ += computeBoolSize(4, self.desOnOff);
  }
  if (self.hasAcopen) {
    size_ += computeBoolSize(5, self.acopen);
  }
  if (self.hasDesAcopen) {
    size_ += computeBoolSize(6, self.desAcopen);
  }
  if (self.hasCycMode) {
    size_ += computeEnumSize(7, self.cycMode);
  }
  if (self.hasDesCycMode) {
    size_ += computeEnumSize(8, self.desCycMode);
  }
  if (self.hasBlowMode0) {
    size_ += computeEnumSize(9, self.blowMode0);
  }
  if (self.hasDesBlowMode0) {
    size_ += computeEnumSize(10, self.desBlowMode0);
  }
  if (self.hasBlowMode1) {
    size_ += computeEnumSize(11, self.blowMode1);
  }
  if (self.hasDesBlowMode1) {
    size_ += computeEnumSize(12, self.desBlowMode1);
  }
  if (self.hasWindSpeed) {
    size_ += computeUInt32Size(13, self.windSpeed);
  }
  if (self.hasDesWindSpeed) {
    size_ += computeUInt32Size(14, self.desWindSpeed);
  }
  if (self.hasTemperature0) {
    size_ += computeUInt32Size(15, self.temperature0);
  }
  if (self.hasDesTemperature0) {
    size_ += computeUInt32Size(16, self.desTemperature0);
  }
  if (self.hasTemperature1) {
    size_ += computeUInt32Size(17, self.temperature1);
  }
  if (self.hasDesTemperature1) {
    size_ += computeUInt32Size(18, self.desTemperature1);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (HacvSetRsp*) parseFromData:(NSData*) data {
  return (HacvSetRsp*)[[[HacvSetRsp builder] mergeFromData:data] build];
}
+ (HacvSetRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HacvSetRsp*)[[[HacvSetRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HacvSetRsp*) parseFromInputStream:(NSInputStream*) input {
  return (HacvSetRsp*)[[[HacvSetRsp builder] mergeFromInputStream:input] build];
}
+ (HacvSetRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HacvSetRsp*)[[[HacvSetRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HacvSetRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HacvSetRsp*)[[[HacvSetRsp builder] mergeFromCodedInputStream:input] build];
}
+ (HacvSetRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HacvSetRsp*)[[[HacvSetRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HacvSetRspBuilder*) builder {
  return [[HacvSetRspBuilder alloc] init];
}
+ (HacvSetRspBuilder*) builderWithPrototype:(HacvSetRsp*) prototype {
  return [[HacvSetRsp builder] mergeFrom:prototype];
}
- (HacvSetRspBuilder*) builder {
  return [HacvSetRsp builder];
}
- (HacvSetRspBuilder*) toBuilder {
  return [HacvSetRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  if (self.hasOnOff) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onOff", [NSNumber numberWithBool:self.onOff]];
  }
  if (self.hasDesOnOff) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desOnOff", [NSNumber numberWithBool:self.desOnOff]];
  }
  if (self.hasAcopen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"acopen", [NSNumber numberWithBool:self.acopen]];
  }
  if (self.hasDesAcopen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desAcopen", [NSNumber numberWithBool:self.desAcopen]];
  }
  if (self.hasCycMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cycMode", NSStringFromCycMode(self.cycMode)];
  }
  if (self.hasDesCycMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desCycMode", NSStringFromCycMode(self.desCycMode)];
  }
  if (self.hasBlowMode0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"blowMode0", NSStringFromBlowMode(self.blowMode0)];
  }
  if (self.hasDesBlowMode0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desBlowMode0", NSStringFromBlowMode(self.desBlowMode0)];
  }
  if (self.hasBlowMode1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"blowMode1", NSStringFromBlowMode(self.blowMode1)];
  }
  if (self.hasDesBlowMode1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desBlowMode1", NSStringFromBlowMode(self.desBlowMode1)];
  }
  if (self.hasWindSpeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"windSpeed", [NSNumber numberWithInteger:self.windSpeed]];
  }
  if (self.hasDesWindSpeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desWindSpeed", [NSNumber numberWithInteger:self.desWindSpeed]];
  }
  if (self.hasTemperature0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temperature0", [NSNumber numberWithInteger:self.temperature0]];
  }
  if (self.hasDesTemperature0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desTemperature0", [NSNumber numberWithInteger:self.desTemperature0]];
  }
  if (self.hasTemperature1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temperature1", [NSNumber numberWithInteger:self.temperature1]];
  }
  if (self.hasDesTemperature1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desTemperature1", [NSNumber numberWithInteger:self.desTemperature1]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  if (self.hasOnOff) {
    [dictionary setObject: [NSNumber numberWithBool:self.onOff] forKey: @"onOff"];
  }
  if (self.hasDesOnOff) {
    [dictionary setObject: [NSNumber numberWithBool:self.desOnOff] forKey: @"desOnOff"];
  }
  if (self.hasAcopen) {
    [dictionary setObject: [NSNumber numberWithBool:self.acopen] forKey: @"acopen"];
  }
  if (self.hasDesAcopen) {
    [dictionary setObject: [NSNumber numberWithBool:self.desAcopen] forKey: @"desAcopen"];
  }
  if (self.hasCycMode) {
    [dictionary setObject: @(self.cycMode) forKey: @"cycMode"];
  }
  if (self.hasDesCycMode) {
    [dictionary setObject: @(self.desCycMode) forKey: @"desCycMode"];
  }
  if (self.hasBlowMode0) {
    [dictionary setObject: @(self.blowMode0) forKey: @"blowMode0"];
  }
  if (self.hasDesBlowMode0) {
    [dictionary setObject: @(self.desBlowMode0) forKey: @"desBlowMode0"];
  }
  if (self.hasBlowMode1) {
    [dictionary setObject: @(self.blowMode1) forKey: @"blowMode1"];
  }
  if (self.hasDesBlowMode1) {
    [dictionary setObject: @(self.desBlowMode1) forKey: @"desBlowMode1"];
  }
  if (self.hasWindSpeed) {
    [dictionary setObject: [NSNumber numberWithInteger:self.windSpeed] forKey: @"windSpeed"];
  }
  if (self.hasDesWindSpeed) {
    [dictionary setObject: [NSNumber numberWithInteger:self.desWindSpeed] forKey: @"desWindSpeed"];
  }
  if (self.hasTemperature0) {
    [dictionary setObject: [NSNumber numberWithInteger:self.temperature0] forKey: @"temperature0"];
  }
  if (self.hasDesTemperature0) {
    [dictionary setObject: [NSNumber numberWithInteger:self.desTemperature0] forKey: @"desTemperature0"];
  }
  if (self.hasTemperature1) {
    [dictionary setObject: [NSNumber numberWithInteger:self.temperature1] forKey: @"temperature1"];
  }
  if (self.hasDesTemperature1) {
    [dictionary setObject: [NSNumber numberWithInteger:self.desTemperature1] forKey: @"desTemperature1"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[HacvSetRsp class]]) {
    return NO;
  }
  HacvSetRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasOnOff == otherMessage.hasOnOff &&
      (!self.hasOnOff || self.onOff == otherMessage.onOff) &&
      self.hasDesOnOff == otherMessage.hasDesOnOff &&
      (!self.hasDesOnOff || self.desOnOff == otherMessage.desOnOff) &&
      self.hasAcopen == otherMessage.hasAcopen &&
      (!self.hasAcopen || self.acopen == otherMessage.acopen) &&
      self.hasDesAcopen == otherMessage.hasDesAcopen &&
      (!self.hasDesAcopen || self.desAcopen == otherMessage.desAcopen) &&
      self.hasCycMode == otherMessage.hasCycMode &&
      (!self.hasCycMode || self.cycMode == otherMessage.cycMode) &&
      self.hasDesCycMode == otherMessage.hasDesCycMode &&
      (!self.hasDesCycMode || self.desCycMode == otherMessage.desCycMode) &&
      self.hasBlowMode0 == otherMessage.hasBlowMode0 &&
      (!self.hasBlowMode0 || self.blowMode0 == otherMessage.blowMode0) &&
      self.hasDesBlowMode0 == otherMessage.hasDesBlowMode0 &&
      (!self.hasDesBlowMode0 || self.desBlowMode0 == otherMessage.desBlowMode0) &&
      self.hasBlowMode1 == otherMessage.hasBlowMode1 &&
      (!self.hasBlowMode1 || self.blowMode1 == otherMessage.blowMode1) &&
      self.hasDesBlowMode1 == otherMessage.hasDesBlowMode1 &&
      (!self.hasDesBlowMode1 || self.desBlowMode1 == otherMessage.desBlowMode1) &&
      self.hasWindSpeed == otherMessage.hasWindSpeed &&
      (!self.hasWindSpeed || self.windSpeed == otherMessage.windSpeed) &&
      self.hasDesWindSpeed == otherMessage.hasDesWindSpeed &&
      (!self.hasDesWindSpeed || self.desWindSpeed == otherMessage.desWindSpeed) &&
      self.hasTemperature0 == otherMessage.hasTemperature0 &&
      (!self.hasTemperature0 || self.temperature0 == otherMessage.temperature0) &&
      self.hasDesTemperature0 == otherMessage.hasDesTemperature0 &&
      (!self.hasDesTemperature0 || self.desTemperature0 == otherMessage.desTemperature0) &&
      self.hasTemperature1 == otherMessage.hasTemperature1 &&
      (!self.hasTemperature1 || self.temperature1 == otherMessage.temperature1) &&
      self.hasDesTemperature1 == otherMessage.hasDesTemperature1 &&
      (!self.hasDesTemperature1 || self.desTemperature1 == otherMessage.desTemperature1) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  if (self.hasOnOff) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.onOff] hash];
  }
  if (self.hasDesOnOff) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.desOnOff] hash];
  }
  if (self.hasAcopen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.acopen] hash];
  }
  if (self.hasDesAcopen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.desAcopen] hash];
  }
  if (self.hasCycMode) {
    hashCode = hashCode * 31 + self.cycMode;
  }
  if (self.hasDesCycMode) {
    hashCode = hashCode * 31 + self.desCycMode;
  }
  if (self.hasBlowMode0) {
    hashCode = hashCode * 31 + self.blowMode0;
  }
  if (self.hasDesBlowMode0) {
    hashCode = hashCode * 31 + self.desBlowMode0;
  }
  if (self.hasBlowMode1) {
    hashCode = hashCode * 31 + self.blowMode1;
  }
  if (self.hasDesBlowMode1) {
    hashCode = hashCode * 31 + self.desBlowMode1;
  }
  if (self.hasWindSpeed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.windSpeed] hash];
  }
  if (self.hasDesWindSpeed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.desWindSpeed] hash];
  }
  if (self.hasTemperature0) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.temperature0] hash];
  }
  if (self.hasDesTemperature0) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.desTemperature0] hash];
  }
  if (self.hasTemperature1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.temperature1] hash];
  }
  if (self.hasDesTemperature1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.desTemperature1] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface HacvSetRspBuilder()
@property (strong) HacvSetRsp* resultHacvSetRsp;
@end

@implementation HacvSetRspBuilder
@synthesize resultHacvSetRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultHacvSetRsp = [[HacvSetRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultHacvSetRsp;
}
- (HacvSetRspBuilder*) clear {
  self.resultHacvSetRsp = [[HacvSetRsp alloc] init];
  return self;
}
- (HacvSetRspBuilder*) clone {
  return [HacvSetRsp builderWithPrototype:resultHacvSetRsp];
}
- (HacvSetRsp*) defaultInstance {
  return [HacvSetRsp defaultInstance];
}
- (HacvSetRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HacvSetRsp*) buildPartial {
  HacvSetRsp* returnMe = resultHacvSetRsp;
  self.resultHacvSetRsp = nil;
  return returnMe;
}
- (HacvSetRspBuilder*) mergeFrom:(HacvSetRsp*) other {
  if (other == [HacvSetRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasOnOff) {
    [self setOnOff:other.onOff];
  }
  if (other.hasDesOnOff) {
    [self setDesOnOff:other.desOnOff];
  }
  if (other.hasAcopen) {
    [self setAcopen:other.acopen];
  }
  if (other.hasDesAcopen) {
    [self setDesAcopen:other.desAcopen];
  }
  if (other.hasCycMode) {
    [self setCycMode:other.cycMode];
  }
  if (other.hasDesCycMode) {
    [self setDesCycMode:other.desCycMode];
  }
  if (other.hasBlowMode0) {
    [self setBlowMode0:other.blowMode0];
  }
  if (other.hasDesBlowMode0) {
    [self setDesBlowMode0:other.desBlowMode0];
  }
  if (other.hasBlowMode1) {
    [self setBlowMode1:other.blowMode1];
  }
  if (other.hasDesBlowMode1) {
    [self setDesBlowMode1:other.desBlowMode1];
  }
  if (other.hasWindSpeed) {
    [self setWindSpeed:other.windSpeed];
  }
  if (other.hasDesWindSpeed) {
    [self setDesWindSpeed:other.desWindSpeed];
  }
  if (other.hasTemperature0) {
    [self setTemperature0:other.temperature0];
  }
  if (other.hasDesTemperature0) {
    [self setDesTemperature0:other.desTemperature0];
  }
  if (other.hasTemperature1) {
    [self setTemperature1:other.temperature1];
  }
  if (other.hasDesTemperature1) {
    [self setDesTemperature1:other.desTemperature1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HacvSetRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HacvSetRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setOnOff:[input readBool]];
        break;
      }
      case 32: {
        [self setDesOnOff:[input readBool]];
        break;
      }
      case 40: {
        [self setAcopen:[input readBool]];
        break;
      }
      case 48: {
        [self setDesAcopen:[input readBool]];
        break;
      }
      case 56: {
        CycMode value = (CycMode)[input readEnum];
        if (CycModeIsValidValue(value)) {
          [self setCycMode:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 64: {
        CycMode value = (CycMode)[input readEnum];
        if (CycModeIsValidValue(value)) {
          [self setDesCycMode:value];
        } else {
          [unknownFields mergeVarintField:8 value:value];
        }
        break;
      }
      case 72: {
        BlowMode value = (BlowMode)[input readEnum];
        if (BlowModeIsValidValue(value)) {
          [self setBlowMode0:value];
        } else {
          [unknownFields mergeVarintField:9 value:value];
        }
        break;
      }
      case 80: {
        BlowMode value = (BlowMode)[input readEnum];
        if (BlowModeIsValidValue(value)) {
          [self setDesBlowMode0:value];
        } else {
          [unknownFields mergeVarintField:10 value:value];
        }
        break;
      }
      case 88: {
        BlowMode value = (BlowMode)[input readEnum];
        if (BlowModeIsValidValue(value)) {
          [self setBlowMode1:value];
        } else {
          [unknownFields mergeVarintField:11 value:value];
        }
        break;
      }
      case 96: {
        BlowMode value = (BlowMode)[input readEnum];
        if (BlowModeIsValidValue(value)) {
          [self setDesBlowMode1:value];
        } else {
          [unknownFields mergeVarintField:12 value:value];
        }
        break;
      }
      case 104: {
        [self setWindSpeed:[input readUInt32]];
        break;
      }
      case 112: {
        [self setDesWindSpeed:[input readUInt32]];
        break;
      }
      case 120: {
        [self setTemperature0:[input readUInt32]];
        break;
      }
      case 128: {
        [self setDesTemperature0:[input readUInt32]];
        break;
      }
      case 136: {
        [self setTemperature1:[input readUInt32]];
        break;
      }
      case 144: {
        [self setDesTemperature1:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultHacvSetRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultHacvSetRsp.rspCode;
}
- (HacvSetRspBuilder*) setRspCode:(RspCode) value {
  resultHacvSetRsp.hasRspCode = YES;
  resultHacvSetRsp.rspCode = value;
  return self;
}
- (HacvSetRspBuilder*) clearRspCode {
  resultHacvSetRsp.hasRspCode = NO;
  resultHacvSetRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultHacvSetRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultHacvSetRsp.errorCode;
}
- (HacvSetRspBuilder*) setErrorCode:(ErrorCode) value {
  resultHacvSetRsp.hasErrorCode = YES;
  resultHacvSetRsp.errorCode = value;
  return self;
}
- (HacvSetRspBuilder*) clearErrorCode {
  resultHacvSetRsp.hasErrorCode = NO;
  resultHacvSetRsp.errorCode = ErrorCodeNormal;
  return self;
}
- (BOOL) hasOnOff {
  return resultHacvSetRsp.hasOnOff;
}
- (BOOL) onOff {
  return resultHacvSetRsp.onOff;
}
- (HacvSetRspBuilder*) setOnOff:(BOOL) value {
  resultHacvSetRsp.hasOnOff = YES;
  resultHacvSetRsp.onOff = value;
  return self;
}
- (HacvSetRspBuilder*) clearOnOff {
  resultHacvSetRsp.hasOnOff = NO;
  resultHacvSetRsp.onOff = NO;
  return self;
}
- (BOOL) hasDesOnOff {
  return resultHacvSetRsp.hasDesOnOff;
}
- (BOOL) desOnOff {
  return resultHacvSetRsp.desOnOff;
}
- (HacvSetRspBuilder*) setDesOnOff:(BOOL) value {
  resultHacvSetRsp.hasDesOnOff = YES;
  resultHacvSetRsp.desOnOff = value;
  return self;
}
- (HacvSetRspBuilder*) clearDesOnOff {
  resultHacvSetRsp.hasDesOnOff = NO;
  resultHacvSetRsp.desOnOff = NO;
  return self;
}
- (BOOL) hasAcopen {
  return resultHacvSetRsp.hasAcopen;
}
- (BOOL) acopen {
  return resultHacvSetRsp.acopen;
}
- (HacvSetRspBuilder*) setAcopen:(BOOL) value {
  resultHacvSetRsp.hasAcopen = YES;
  resultHacvSetRsp.acopen = value;
  return self;
}
- (HacvSetRspBuilder*) clearAcopen {
  resultHacvSetRsp.hasAcopen = NO;
  resultHacvSetRsp.acopen = NO;
  return self;
}
- (BOOL) hasDesAcopen {
  return resultHacvSetRsp.hasDesAcopen;
}
- (BOOL) desAcopen {
  return resultHacvSetRsp.desAcopen;
}
- (HacvSetRspBuilder*) setDesAcopen:(BOOL) value {
  resultHacvSetRsp.hasDesAcopen = YES;
  resultHacvSetRsp.desAcopen = value;
  return self;
}
- (HacvSetRspBuilder*) clearDesAcopen {
  resultHacvSetRsp.hasDesAcopen = NO;
  resultHacvSetRsp.desAcopen = NO;
  return self;
}
- (BOOL) hasCycMode {
  return resultHacvSetRsp.hasCycMode;
}
- (CycMode) cycMode {
  return resultHacvSetRsp.cycMode;
}
- (HacvSetRspBuilder*) setCycMode:(CycMode) value {
  resultHacvSetRsp.hasCycMode = YES;
  resultHacvSetRsp.cycMode = value;
  return self;
}
- (HacvSetRspBuilder*) clearCycMode {
  resultHacvSetRsp.hasCycMode = NO;
  resultHacvSetRsp.cycMode = CycModeCycModeInside;
  return self;
}
- (BOOL) hasDesCycMode {
  return resultHacvSetRsp.hasDesCycMode;
}
- (CycMode) desCycMode {
  return resultHacvSetRsp.desCycMode;
}
- (HacvSetRspBuilder*) setDesCycMode:(CycMode) value {
  resultHacvSetRsp.hasDesCycMode = YES;
  resultHacvSetRsp.desCycMode = value;
  return self;
}
- (HacvSetRspBuilder*) clearDesCycMode {
  resultHacvSetRsp.hasDesCycMode = NO;
  resultHacvSetRsp.desCycMode = CycModeCycModeInside;
  return self;
}
- (BOOL) hasBlowMode0 {
  return resultHacvSetRsp.hasBlowMode0;
}
- (BlowMode) blowMode0 {
  return resultHacvSetRsp.blowMode0;
}
- (HacvSetRspBuilder*) setBlowMode0:(BlowMode) value {
  resultHacvSetRsp.hasBlowMode0 = YES;
  resultHacvSetRsp.blowMode0 = value;
  return self;
}
- (HacvSetRspBuilder*) clearBlowMode0 {
  resultHacvSetRsp.hasBlowMode0 = NO;
  resultHacvSetRsp.blowMode0 = BlowModeBlowFace;
  return self;
}
- (BOOL) hasDesBlowMode0 {
  return resultHacvSetRsp.hasDesBlowMode0;
}
- (BlowMode) desBlowMode0 {
  return resultHacvSetRsp.desBlowMode0;
}
- (HacvSetRspBuilder*) setDesBlowMode0:(BlowMode) value {
  resultHacvSetRsp.hasDesBlowMode0 = YES;
  resultHacvSetRsp.desBlowMode0 = value;
  return self;
}
- (HacvSetRspBuilder*) clearDesBlowMode0 {
  resultHacvSetRsp.hasDesBlowMode0 = NO;
  resultHacvSetRsp.desBlowMode0 = BlowModeBlowFace;
  return self;
}
- (BOOL) hasBlowMode1 {
  return resultHacvSetRsp.hasBlowMode1;
}
- (BlowMode) blowMode1 {
  return resultHacvSetRsp.blowMode1;
}
- (HacvSetRspBuilder*) setBlowMode1:(BlowMode) value {
  resultHacvSetRsp.hasBlowMode1 = YES;
  resultHacvSetRsp.blowMode1 = value;
  return self;
}
- (HacvSetRspBuilder*) clearBlowMode1 {
  resultHacvSetRsp.hasBlowMode1 = NO;
  resultHacvSetRsp.blowMode1 = BlowModeBlowFace;
  return self;
}
- (BOOL) hasDesBlowMode1 {
  return resultHacvSetRsp.hasDesBlowMode1;
}
- (BlowMode) desBlowMode1 {
  return resultHacvSetRsp.desBlowMode1;
}
- (HacvSetRspBuilder*) setDesBlowMode1:(BlowMode) value {
  resultHacvSetRsp.hasDesBlowMode1 = YES;
  resultHacvSetRsp.desBlowMode1 = value;
  return self;
}
- (HacvSetRspBuilder*) clearDesBlowMode1 {
  resultHacvSetRsp.hasDesBlowMode1 = NO;
  resultHacvSetRsp.desBlowMode1 = BlowModeBlowFace;
  return self;
}
- (BOOL) hasWindSpeed {
  return resultHacvSetRsp.hasWindSpeed;
}
- (UInt32) windSpeed {
  return resultHacvSetRsp.windSpeed;
}
- (HacvSetRspBuilder*) setWindSpeed:(UInt32) value {
  resultHacvSetRsp.hasWindSpeed = YES;
  resultHacvSetRsp.windSpeed = value;
  return self;
}
- (HacvSetRspBuilder*) clearWindSpeed {
  resultHacvSetRsp.hasWindSpeed = NO;
  resultHacvSetRsp.windSpeed = 0;
  return self;
}
- (BOOL) hasDesWindSpeed {
  return resultHacvSetRsp.hasDesWindSpeed;
}
- (UInt32) desWindSpeed {
  return resultHacvSetRsp.desWindSpeed;
}
- (HacvSetRspBuilder*) setDesWindSpeed:(UInt32) value {
  resultHacvSetRsp.hasDesWindSpeed = YES;
  resultHacvSetRsp.desWindSpeed = value;
  return self;
}
- (HacvSetRspBuilder*) clearDesWindSpeed {
  resultHacvSetRsp.hasDesWindSpeed = NO;
  resultHacvSetRsp.desWindSpeed = 0;
  return self;
}
- (BOOL) hasTemperature0 {
  return resultHacvSetRsp.hasTemperature0;
}
- (UInt32) temperature0 {
  return resultHacvSetRsp.temperature0;
}
- (HacvSetRspBuilder*) setTemperature0:(UInt32) value {
  resultHacvSetRsp.hasTemperature0 = YES;
  resultHacvSetRsp.temperature0 = value;
  return self;
}
- (HacvSetRspBuilder*) clearTemperature0 {
  resultHacvSetRsp.hasTemperature0 = NO;
  resultHacvSetRsp.temperature0 = 0;
  return self;
}
- (BOOL) hasDesTemperature0 {
  return resultHacvSetRsp.hasDesTemperature0;
}
- (UInt32) desTemperature0 {
  return resultHacvSetRsp.desTemperature0;
}
- (HacvSetRspBuilder*) setDesTemperature0:(UInt32) value {
  resultHacvSetRsp.hasDesTemperature0 = YES;
  resultHacvSetRsp.desTemperature0 = value;
  return self;
}
- (HacvSetRspBuilder*) clearDesTemperature0 {
  resultHacvSetRsp.hasDesTemperature0 = NO;
  resultHacvSetRsp.desTemperature0 = 0;
  return self;
}
- (BOOL) hasTemperature1 {
  return resultHacvSetRsp.hasTemperature1;
}
- (UInt32) temperature1 {
  return resultHacvSetRsp.temperature1;
}
- (HacvSetRspBuilder*) setTemperature1:(UInt32) value {
  resultHacvSetRsp.hasTemperature1 = YES;
  resultHacvSetRsp.temperature1 = value;
  return self;
}
- (HacvSetRspBuilder*) clearTemperature1 {
  resultHacvSetRsp.hasTemperature1 = NO;
  resultHacvSetRsp.temperature1 = 0;
  return self;
}
- (BOOL) hasDesTemperature1 {
  return resultHacvSetRsp.hasDesTemperature1;
}
- (UInt32) desTemperature1 {
  return resultHacvSetRsp.desTemperature1;
}
- (HacvSetRspBuilder*) setDesTemperature1:(UInt32) value {
  resultHacvSetRsp.hasDesTemperature1 = YES;
  resultHacvSetRsp.desTemperature1 = value;
  return self;
}
- (HacvSetRspBuilder*) clearDesTemperature1 {
  resultHacvSetRsp.hasDesTemperature1 = NO;
  resultHacvSetRsp.desTemperature1 = 0;
  return self;
}
@end

@interface UpdateKindSetReq ()
@property UpdateKind updateKind;
@property UInt32 freq;
@end

@implementation UpdateKindSetReq

- (BOOL) hasUpdateKind {
  return !!hasUpdateKind_;
}
- (void) setHasUpdateKind:(BOOL) _value_ {
  hasUpdateKind_ = !!_value_;
}
@synthesize updateKind;
- (BOOL) hasFreq {
  return !!hasFreq_;
}
- (void) setHasFreq:(BOOL) _value_ {
  hasFreq_ = !!_value_;
}
@synthesize freq;
- (instancetype) init {
  if ((self = [super init])) {
    self.updateKind = UpdateKindQueryUpdate;
    self.freq = 0;
  }
  return self;
}
static UpdateKindSetReq* defaultUpdateKindSetReqInstance = nil;
+ (void) initialize {
  if (self == [UpdateKindSetReq class]) {
    defaultUpdateKindSetReqInstance = [[UpdateKindSetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUpdateKindSetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultUpdateKindSetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUpdateKind) {
    return NO;
  }
  if (!self.hasFreq) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUpdateKind) {
    [output writeEnum:1 value:self.updateKind];
  }
  if (self.hasFreq) {
    [output writeUInt32:2 value:self.freq];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUpdateKind) {
    size_ += computeEnumSize(1, self.updateKind);
  }
  if (self.hasFreq) {
    size_ += computeUInt32Size(2, self.freq);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UpdateKindSetReq*) parseFromData:(NSData*) data {
  return (UpdateKindSetReq*)[[[UpdateKindSetReq builder] mergeFromData:data] build];
}
+ (UpdateKindSetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UpdateKindSetReq*)[[[UpdateKindSetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UpdateKindSetReq*) parseFromInputStream:(NSInputStream*) input {
  return (UpdateKindSetReq*)[[[UpdateKindSetReq builder] mergeFromInputStream:input] build];
}
+ (UpdateKindSetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UpdateKindSetReq*)[[[UpdateKindSetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UpdateKindSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UpdateKindSetReq*)[[[UpdateKindSetReq builder] mergeFromCodedInputStream:input] build];
}
+ (UpdateKindSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UpdateKindSetReq*)[[[UpdateKindSetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UpdateKindSetReqBuilder*) builder {
  return [[UpdateKindSetReqBuilder alloc] init];
}
+ (UpdateKindSetReqBuilder*) builderWithPrototype:(UpdateKindSetReq*) prototype {
  return [[UpdateKindSetReq builder] mergeFrom:prototype];
}
- (UpdateKindSetReqBuilder*) builder {
  return [UpdateKindSetReq builder];
}
- (UpdateKindSetReqBuilder*) toBuilder {
  return [UpdateKindSetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUpdateKind) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updateKind", NSStringFromUpdateKind(self.updateKind)];
  }
  if (self.hasFreq) {
    [output appendFormat:@"%@%@: %@\n", indent, @"freq", [NSNumber numberWithInteger:self.freq]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUpdateKind) {
    [dictionary setObject: @(self.updateKind) forKey: @"updateKind"];
  }
  if (self.hasFreq) {
    [dictionary setObject: [NSNumber numberWithInteger:self.freq] forKey: @"freq"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UpdateKindSetReq class]]) {
    return NO;
  }
  UpdateKindSetReq *otherMessage = other;
  return
      self.hasUpdateKind == otherMessage.hasUpdateKind &&
      (!self.hasUpdateKind || self.updateKind == otherMessage.updateKind) &&
      self.hasFreq == otherMessage.hasFreq &&
      (!self.hasFreq || self.freq == otherMessage.freq) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUpdateKind) {
    hashCode = hashCode * 31 + self.updateKind;
  }
  if (self.hasFreq) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.freq] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UpdateKindSetReqBuilder()
@property (strong) UpdateKindSetReq* resultUpdateKindSetReq;
@end

@implementation UpdateKindSetReqBuilder
@synthesize resultUpdateKindSetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUpdateKindSetReq = [[UpdateKindSetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUpdateKindSetReq;
}
- (UpdateKindSetReqBuilder*) clear {
  self.resultUpdateKindSetReq = [[UpdateKindSetReq alloc] init];
  return self;
}
- (UpdateKindSetReqBuilder*) clone {
  return [UpdateKindSetReq builderWithPrototype:resultUpdateKindSetReq];
}
- (UpdateKindSetReq*) defaultInstance {
  return [UpdateKindSetReq defaultInstance];
}
- (UpdateKindSetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UpdateKindSetReq*) buildPartial {
  UpdateKindSetReq* returnMe = resultUpdateKindSetReq;
  self.resultUpdateKindSetReq = nil;
  return returnMe;
}
- (UpdateKindSetReqBuilder*) mergeFrom:(UpdateKindSetReq*) other {
  if (other == [UpdateKindSetReq defaultInstance]) {
    return self;
  }
  if (other.hasUpdateKind) {
    [self setUpdateKind:other.updateKind];
  }
  if (other.hasFreq) {
    [self setFreq:other.freq];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UpdateKindSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UpdateKindSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        UpdateKind value = (UpdateKind)[input readEnum];
        if (UpdateKindIsValidValue(value)) {
          [self setUpdateKind:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setFreq:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUpdateKind {
  return resultUpdateKindSetReq.hasUpdateKind;
}
- (UpdateKind) updateKind {
  return resultUpdateKindSetReq.updateKind;
}
- (UpdateKindSetReqBuilder*) setUpdateKind:(UpdateKind) value {
  resultUpdateKindSetReq.hasUpdateKind = YES;
  resultUpdateKindSetReq.updateKind = value;
  return self;
}
- (UpdateKindSetReqBuilder*) clearUpdateKind {
  resultUpdateKindSetReq.hasUpdateKind = NO;
  resultUpdateKindSetReq.updateKind = UpdateKindQueryUpdate;
  return self;
}
- (BOOL) hasFreq {
  return resultUpdateKindSetReq.hasFreq;
}
- (UInt32) freq {
  return resultUpdateKindSetReq.freq;
}
- (UpdateKindSetReqBuilder*) setFreq:(UInt32) value {
  resultUpdateKindSetReq.hasFreq = YES;
  resultUpdateKindSetReq.freq = value;
  return self;
}
- (UpdateKindSetReqBuilder*) clearFreq {
  resultUpdateKindSetReq.hasFreq = NO;
  resultUpdateKindSetReq.freq = 0;
  return self;
}
@end

@interface WifiParametersGetReq ()
@property BOOL getWifiName;
@property BOOL getWifiPw;
@end

@implementation WifiParametersGetReq

- (BOOL) hasGetWifiName {
  return !!hasGetWifiName_;
}
- (void) setHasGetWifiName:(BOOL) _value_ {
  hasGetWifiName_ = !!_value_;
}
- (BOOL) getWifiName {
  return !!getWifiName_;
}
- (void) setGetWifiName:(BOOL) _value_ {
  getWifiName_ = !!_value_;
}
- (BOOL) hasGetWifiPw {
  return !!hasGetWifiPw_;
}
- (void) setHasGetWifiPw:(BOOL) _value_ {
  hasGetWifiPw_ = !!_value_;
}
- (BOOL) getWifiPw {
  return !!getWifiPw_;
}
- (void) setGetWifiPw:(BOOL) _value_ {
  getWifiPw_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.getWifiName = NO;
    self.getWifiPw = NO;
  }
  return self;
}
static WifiParametersGetReq* defaultWifiParametersGetReqInstance = nil;
+ (void) initialize {
  if (self == [WifiParametersGetReq class]) {
    defaultWifiParametersGetReqInstance = [[WifiParametersGetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWifiParametersGetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultWifiParametersGetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetWifiName) {
    return NO;
  }
  if (!self.hasGetWifiPw) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetWifiName) {
    [output writeBool:1 value:self.getWifiName];
  }
  if (self.hasGetWifiPw) {
    [output writeBool:2 value:self.getWifiPw];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetWifiName) {
    size_ += computeBoolSize(1, self.getWifiName);
  }
  if (self.hasGetWifiPw) {
    size_ += computeBoolSize(2, self.getWifiPw);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WifiParametersGetReq*) parseFromData:(NSData*) data {
  return (WifiParametersGetReq*)[[[WifiParametersGetReq builder] mergeFromData:data] build];
}
+ (WifiParametersGetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiParametersGetReq*)[[[WifiParametersGetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WifiParametersGetReq*) parseFromInputStream:(NSInputStream*) input {
  return (WifiParametersGetReq*)[[[WifiParametersGetReq builder] mergeFromInputStream:input] build];
}
+ (WifiParametersGetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiParametersGetReq*)[[[WifiParametersGetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WifiParametersGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WifiParametersGetReq*)[[[WifiParametersGetReq builder] mergeFromCodedInputStream:input] build];
}
+ (WifiParametersGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiParametersGetReq*)[[[WifiParametersGetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WifiParametersGetReqBuilder*) builder {
  return [[WifiParametersGetReqBuilder alloc] init];
}
+ (WifiParametersGetReqBuilder*) builderWithPrototype:(WifiParametersGetReq*) prototype {
  return [[WifiParametersGetReq builder] mergeFrom:prototype];
}
- (WifiParametersGetReqBuilder*) builder {
  return [WifiParametersGetReq builder];
}
- (WifiParametersGetReqBuilder*) toBuilder {
  return [WifiParametersGetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetWifiName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getWifiName", [NSNumber numberWithBool:self.getWifiName]];
  }
  if (self.hasGetWifiPw) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getWifiPw", [NSNumber numberWithBool:self.getWifiPw]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetWifiName) {
    [dictionary setObject: [NSNumber numberWithBool:self.getWifiName] forKey: @"getWifiName"];
  }
  if (self.hasGetWifiPw) {
    [dictionary setObject: [NSNumber numberWithBool:self.getWifiPw] forKey: @"getWifiPw"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WifiParametersGetReq class]]) {
    return NO;
  }
  WifiParametersGetReq *otherMessage = other;
  return
      self.hasGetWifiName == otherMessage.hasGetWifiName &&
      (!self.hasGetWifiName || self.getWifiName == otherMessage.getWifiName) &&
      self.hasGetWifiPw == otherMessage.hasGetWifiPw &&
      (!self.hasGetWifiPw || self.getWifiPw == otherMessage.getWifiPw) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetWifiName) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getWifiName] hash];
  }
  if (self.hasGetWifiPw) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getWifiPw] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WifiParametersGetReqBuilder()
@property (strong) WifiParametersGetReq* resultWifiParametersGetReq;
@end

@implementation WifiParametersGetReqBuilder
@synthesize resultWifiParametersGetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWifiParametersGetReq = [[WifiParametersGetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWifiParametersGetReq;
}
- (WifiParametersGetReqBuilder*) clear {
  self.resultWifiParametersGetReq = [[WifiParametersGetReq alloc] init];
  return self;
}
- (WifiParametersGetReqBuilder*) clone {
  return [WifiParametersGetReq builderWithPrototype:resultWifiParametersGetReq];
}
- (WifiParametersGetReq*) defaultInstance {
  return [WifiParametersGetReq defaultInstance];
}
- (WifiParametersGetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WifiParametersGetReq*) buildPartial {
  WifiParametersGetReq* returnMe = resultWifiParametersGetReq;
  self.resultWifiParametersGetReq = nil;
  return returnMe;
}
- (WifiParametersGetReqBuilder*) mergeFrom:(WifiParametersGetReq*) other {
  if (other == [WifiParametersGetReq defaultInstance]) {
    return self;
  }
  if (other.hasGetWifiName) {
    [self setGetWifiName:other.getWifiName];
  }
  if (other.hasGetWifiPw) {
    [self setGetWifiPw:other.getWifiPw];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WifiParametersGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WifiParametersGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGetWifiName:[input readBool]];
        break;
      }
      case 16: {
        [self setGetWifiPw:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasGetWifiName {
  return resultWifiParametersGetReq.hasGetWifiName;
}
- (BOOL) getWifiName {
  return resultWifiParametersGetReq.getWifiName;
}
- (WifiParametersGetReqBuilder*) setGetWifiName:(BOOL) value {
  resultWifiParametersGetReq.hasGetWifiName = YES;
  resultWifiParametersGetReq.getWifiName = value;
  return self;
}
- (WifiParametersGetReqBuilder*) clearGetWifiName {
  resultWifiParametersGetReq.hasGetWifiName = NO;
  resultWifiParametersGetReq.getWifiName = NO;
  return self;
}
- (BOOL) hasGetWifiPw {
  return resultWifiParametersGetReq.hasGetWifiPw;
}
- (BOOL) getWifiPw {
  return resultWifiParametersGetReq.getWifiPw;
}
- (WifiParametersGetReqBuilder*) setGetWifiPw:(BOOL) value {
  resultWifiParametersGetReq.hasGetWifiPw = YES;
  resultWifiParametersGetReq.getWifiPw = value;
  return self;
}
- (WifiParametersGetReqBuilder*) clearGetWifiPw {
  resultWifiParametersGetReq.hasGetWifiPw = NO;
  resultWifiParametersGetReq.getWifiPw = NO;
  return self;
}
@end

@interface WifiParametersRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@property (strong) NSString* wifiName;
@property (strong) NSString* wifiPw;
@end

@implementation WifiParametersRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasWifiName {
  return !!hasWifiName_;
}
- (void) setHasWifiName:(BOOL) _value_ {
  hasWifiName_ = !!_value_;
}
@synthesize wifiName;
- (BOOL) hasWifiPw {
  return !!hasWifiPw_;
}
- (void) setHasWifiPw:(BOOL) _value_ {
  hasWifiPw_ = !!_value_;
}
@synthesize wifiPw;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
    self.wifiName = @"";
    self.wifiPw = @"";
  }
  return self;
}
static WifiParametersRsp* defaultWifiParametersRspInstance = nil;
+ (void) initialize {
  if (self == [WifiParametersRsp class]) {
    defaultWifiParametersRspInstance = [[WifiParametersRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWifiParametersRspInstance;
}
- (instancetype) defaultInstance {
  return defaultWifiParametersRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  if (self.hasWifiName) {
    [output writeString:3 value:self.wifiName];
  }
  if (self.hasWifiPw) {
    [output writeString:4 value:self.wifiPw];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  if (self.hasWifiName) {
    size_ += computeStringSize(3, self.wifiName);
  }
  if (self.hasWifiPw) {
    size_ += computeStringSize(4, self.wifiPw);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WifiParametersRsp*) parseFromData:(NSData*) data {
  return (WifiParametersRsp*)[[[WifiParametersRsp builder] mergeFromData:data] build];
}
+ (WifiParametersRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiParametersRsp*)[[[WifiParametersRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WifiParametersRsp*) parseFromInputStream:(NSInputStream*) input {
  return (WifiParametersRsp*)[[[WifiParametersRsp builder] mergeFromInputStream:input] build];
}
+ (WifiParametersRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiParametersRsp*)[[[WifiParametersRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WifiParametersRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WifiParametersRsp*)[[[WifiParametersRsp builder] mergeFromCodedInputStream:input] build];
}
+ (WifiParametersRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiParametersRsp*)[[[WifiParametersRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WifiParametersRspBuilder*) builder {
  return [[WifiParametersRspBuilder alloc] init];
}
+ (WifiParametersRspBuilder*) builderWithPrototype:(WifiParametersRsp*) prototype {
  return [[WifiParametersRsp builder] mergeFrom:prototype];
}
- (WifiParametersRspBuilder*) builder {
  return [WifiParametersRsp builder];
}
- (WifiParametersRspBuilder*) toBuilder {
  return [WifiParametersRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  if (self.hasWifiName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wifiName", self.wifiName];
  }
  if (self.hasWifiPw) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wifiPw", self.wifiPw];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  if (self.hasWifiName) {
    [dictionary setObject: self.wifiName forKey: @"wifiName"];
  }
  if (self.hasWifiPw) {
    [dictionary setObject: self.wifiPw forKey: @"wifiPw"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WifiParametersRsp class]]) {
    return NO;
  }
  WifiParametersRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasWifiName == otherMessage.hasWifiName &&
      (!self.hasWifiName || [self.wifiName isEqual:otherMessage.wifiName]) &&
      self.hasWifiPw == otherMessage.hasWifiPw &&
      (!self.hasWifiPw || [self.wifiPw isEqual:otherMessage.wifiPw]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  if (self.hasWifiName) {
    hashCode = hashCode * 31 + [self.wifiName hash];
  }
  if (self.hasWifiPw) {
    hashCode = hashCode * 31 + [self.wifiPw hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WifiParametersRspBuilder()
@property (strong) WifiParametersRsp* resultWifiParametersRsp;
@end

@implementation WifiParametersRspBuilder
@synthesize resultWifiParametersRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWifiParametersRsp = [[WifiParametersRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWifiParametersRsp;
}
- (WifiParametersRspBuilder*) clear {
  self.resultWifiParametersRsp = [[WifiParametersRsp alloc] init];
  return self;
}
- (WifiParametersRspBuilder*) clone {
  return [WifiParametersRsp builderWithPrototype:resultWifiParametersRsp];
}
- (WifiParametersRsp*) defaultInstance {
  return [WifiParametersRsp defaultInstance];
}
- (WifiParametersRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WifiParametersRsp*) buildPartial {
  WifiParametersRsp* returnMe = resultWifiParametersRsp;
  self.resultWifiParametersRsp = nil;
  return returnMe;
}
- (WifiParametersRspBuilder*) mergeFrom:(WifiParametersRsp*) other {
  if (other == [WifiParametersRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasWifiName) {
    [self setWifiName:other.wifiName];
  }
  if (other.hasWifiPw) {
    [self setWifiPw:other.wifiPw];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WifiParametersRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WifiParametersRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setWifiName:[input readString]];
        break;
      }
      case 34: {
        [self setWifiPw:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultWifiParametersRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultWifiParametersRsp.rspCode;
}
- (WifiParametersRspBuilder*) setRspCode:(RspCode) value {
  resultWifiParametersRsp.hasRspCode = YES;
  resultWifiParametersRsp.rspCode = value;
  return self;
}
- (WifiParametersRspBuilder*) clearRspCode {
  resultWifiParametersRsp.hasRspCode = NO;
  resultWifiParametersRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultWifiParametersRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultWifiParametersRsp.errorCode;
}
- (WifiParametersRspBuilder*) setErrorCode:(ErrorCode) value {
  resultWifiParametersRsp.hasErrorCode = YES;
  resultWifiParametersRsp.errorCode = value;
  return self;
}
- (WifiParametersRspBuilder*) clearErrorCode {
  resultWifiParametersRsp.hasErrorCode = NO;
  resultWifiParametersRsp.errorCode = ErrorCodeNormal;
  return self;
}
- (BOOL) hasWifiName {
  return resultWifiParametersRsp.hasWifiName;
}
- (NSString*) wifiName {
  return resultWifiParametersRsp.wifiName;
}
- (WifiParametersRspBuilder*) setWifiName:(NSString*) value {
  resultWifiParametersRsp.hasWifiName = YES;
  resultWifiParametersRsp.wifiName = value;
  return self;
}
- (WifiParametersRspBuilder*) clearWifiName {
  resultWifiParametersRsp.hasWifiName = NO;
  resultWifiParametersRsp.wifiName = @"";
  return self;
}
- (BOOL) hasWifiPw {
  return resultWifiParametersRsp.hasWifiPw;
}
- (NSString*) wifiPw {
  return resultWifiParametersRsp.wifiPw;
}
- (WifiParametersRspBuilder*) setWifiPw:(NSString*) value {
  resultWifiParametersRsp.hasWifiPw = YES;
  resultWifiParametersRsp.wifiPw = value;
  return self;
}
- (WifiParametersRspBuilder*) clearWifiPw {
  resultWifiParametersRsp.hasWifiPw = NO;
  resultWifiParametersRsp.wifiPw = @"";
  return self;
}
@end

@interface WifiStatusGetReq ()
@property BOOL getWifiStatus;
@end

@implementation WifiStatusGetReq

- (BOOL) hasGetWifiStatus {
  return !!hasGetWifiStatus_;
}
- (void) setHasGetWifiStatus:(BOOL) _value_ {
  hasGetWifiStatus_ = !!_value_;
}
- (BOOL) getWifiStatus {
  return !!getWifiStatus_;
}
- (void) setGetWifiStatus:(BOOL) _value_ {
  getWifiStatus_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.getWifiStatus = NO;
  }
  return self;
}
static WifiStatusGetReq* defaultWifiStatusGetReqInstance = nil;
+ (void) initialize {
  if (self == [WifiStatusGetReq class]) {
    defaultWifiStatusGetReqInstance = [[WifiStatusGetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWifiStatusGetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultWifiStatusGetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetWifiStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetWifiStatus) {
    [output writeBool:1 value:self.getWifiStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetWifiStatus) {
    size_ += computeBoolSize(1, self.getWifiStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WifiStatusGetReq*) parseFromData:(NSData*) data {
  return (WifiStatusGetReq*)[[[WifiStatusGetReq builder] mergeFromData:data] build];
}
+ (WifiStatusGetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiStatusGetReq*)[[[WifiStatusGetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WifiStatusGetReq*) parseFromInputStream:(NSInputStream*) input {
  return (WifiStatusGetReq*)[[[WifiStatusGetReq builder] mergeFromInputStream:input] build];
}
+ (WifiStatusGetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiStatusGetReq*)[[[WifiStatusGetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WifiStatusGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WifiStatusGetReq*)[[[WifiStatusGetReq builder] mergeFromCodedInputStream:input] build];
}
+ (WifiStatusGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiStatusGetReq*)[[[WifiStatusGetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WifiStatusGetReqBuilder*) builder {
  return [[WifiStatusGetReqBuilder alloc] init];
}
+ (WifiStatusGetReqBuilder*) builderWithPrototype:(WifiStatusGetReq*) prototype {
  return [[WifiStatusGetReq builder] mergeFrom:prototype];
}
- (WifiStatusGetReqBuilder*) builder {
  return [WifiStatusGetReq builder];
}
- (WifiStatusGetReqBuilder*) toBuilder {
  return [WifiStatusGetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetWifiStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getWifiStatus", [NSNumber numberWithBool:self.getWifiStatus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetWifiStatus) {
    [dictionary setObject: [NSNumber numberWithBool:self.getWifiStatus] forKey: @"getWifiStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WifiStatusGetReq class]]) {
    return NO;
  }
  WifiStatusGetReq *otherMessage = other;
  return
      self.hasGetWifiStatus == otherMessage.hasGetWifiStatus &&
      (!self.hasGetWifiStatus || self.getWifiStatus == otherMessage.getWifiStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetWifiStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getWifiStatus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WifiStatusGetReqBuilder()
@property (strong) WifiStatusGetReq* resultWifiStatusGetReq;
@end

@implementation WifiStatusGetReqBuilder
@synthesize resultWifiStatusGetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWifiStatusGetReq = [[WifiStatusGetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWifiStatusGetReq;
}
- (WifiStatusGetReqBuilder*) clear {
  self.resultWifiStatusGetReq = [[WifiStatusGetReq alloc] init];
  return self;
}
- (WifiStatusGetReqBuilder*) clone {
  return [WifiStatusGetReq builderWithPrototype:resultWifiStatusGetReq];
}
- (WifiStatusGetReq*) defaultInstance {
  return [WifiStatusGetReq defaultInstance];
}
- (WifiStatusGetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WifiStatusGetReq*) buildPartial {
  WifiStatusGetReq* returnMe = resultWifiStatusGetReq;
  self.resultWifiStatusGetReq = nil;
  return returnMe;
}
- (WifiStatusGetReqBuilder*) mergeFrom:(WifiStatusGetReq*) other {
  if (other == [WifiStatusGetReq defaultInstance]) {
    return self;
  }
  if (other.hasGetWifiStatus) {
    [self setGetWifiStatus:other.getWifiStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WifiStatusGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WifiStatusGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGetWifiStatus:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasGetWifiStatus {
  return resultWifiStatusGetReq.hasGetWifiStatus;
}
- (BOOL) getWifiStatus {
  return resultWifiStatusGetReq.getWifiStatus;
}
- (WifiStatusGetReqBuilder*) setGetWifiStatus:(BOOL) value {
  resultWifiStatusGetReq.hasGetWifiStatus = YES;
  resultWifiStatusGetReq.getWifiStatus = value;
  return self;
}
- (WifiStatusGetReqBuilder*) clearGetWifiStatus {
  resultWifiStatusGetReq.hasGetWifiStatus = NO;
  resultWifiStatusGetReq.getWifiStatus = NO;
  return self;
}
@end

@interface WifiStatusRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@property (strong) NSData* externDeviceInfo;
@property WifiStatus wifiStatus;
@end

@implementation WifiStatusRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasExternDeviceInfo {
  return !!hasExternDeviceInfo_;
}
- (void) setHasExternDeviceInfo:(BOOL) _value_ {
  hasExternDeviceInfo_ = !!_value_;
}
@synthesize externDeviceInfo;
- (BOOL) hasWifiStatus {
  return !!hasWifiStatus_;
}
- (void) setHasWifiStatus:(BOOL) _value_ {
  hasWifiStatus_ = !!_value_;
}
@synthesize wifiStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
    self.externDeviceInfo = [NSData data];
    self.wifiStatus = WifiStatusWifiStatusConnected;
  }
  return self;
}
static WifiStatusRsp* defaultWifiStatusRspInstance = nil;
+ (void) initialize {
  if (self == [WifiStatusRsp class]) {
    defaultWifiStatusRspInstance = [[WifiStatusRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWifiStatusRspInstance;
}
- (instancetype) defaultInstance {
  return defaultWifiStatusRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  if (self.hasExternDeviceInfo) {
    [output writeData:3 value:self.externDeviceInfo];
  }
  if (self.hasWifiStatus) {
    [output writeEnum:4 value:self.wifiStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  if (self.hasExternDeviceInfo) {
    size_ += computeDataSize(3, self.externDeviceInfo);
  }
  if (self.hasWifiStatus) {
    size_ += computeEnumSize(4, self.wifiStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WifiStatusRsp*) parseFromData:(NSData*) data {
  return (WifiStatusRsp*)[[[WifiStatusRsp builder] mergeFromData:data] build];
}
+ (WifiStatusRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiStatusRsp*)[[[WifiStatusRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WifiStatusRsp*) parseFromInputStream:(NSInputStream*) input {
  return (WifiStatusRsp*)[[[WifiStatusRsp builder] mergeFromInputStream:input] build];
}
+ (WifiStatusRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiStatusRsp*)[[[WifiStatusRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WifiStatusRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WifiStatusRsp*)[[[WifiStatusRsp builder] mergeFromCodedInputStream:input] build];
}
+ (WifiStatusRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiStatusRsp*)[[[WifiStatusRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WifiStatusRspBuilder*) builder {
  return [[WifiStatusRspBuilder alloc] init];
}
+ (WifiStatusRspBuilder*) builderWithPrototype:(WifiStatusRsp*) prototype {
  return [[WifiStatusRsp builder] mergeFrom:prototype];
}
- (WifiStatusRspBuilder*) builder {
  return [WifiStatusRsp builder];
}
- (WifiStatusRspBuilder*) toBuilder {
  return [WifiStatusRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  if (self.hasExternDeviceInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"externDeviceInfo", self.externDeviceInfo];
  }
  if (self.hasWifiStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wifiStatus", NSStringFromWifiStatus(self.wifiStatus)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  if (self.hasExternDeviceInfo) {
    [dictionary setObject: self.externDeviceInfo forKey: @"externDeviceInfo"];
  }
  if (self.hasWifiStatus) {
    [dictionary setObject: @(self.wifiStatus) forKey: @"wifiStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WifiStatusRsp class]]) {
    return NO;
  }
  WifiStatusRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasExternDeviceInfo == otherMessage.hasExternDeviceInfo &&
      (!self.hasExternDeviceInfo || [self.externDeviceInfo isEqual:otherMessage.externDeviceInfo]) &&
      self.hasWifiStatus == otherMessage.hasWifiStatus &&
      (!self.hasWifiStatus || self.wifiStatus == otherMessage.wifiStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  if (self.hasExternDeviceInfo) {
    hashCode = hashCode * 31 + [self.externDeviceInfo hash];
  }
  if (self.hasWifiStatus) {
    hashCode = hashCode * 31 + self.wifiStatus;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WifiStatusRspBuilder()
@property (strong) WifiStatusRsp* resultWifiStatusRsp;
@end

@implementation WifiStatusRspBuilder
@synthesize resultWifiStatusRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWifiStatusRsp = [[WifiStatusRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWifiStatusRsp;
}
- (WifiStatusRspBuilder*) clear {
  self.resultWifiStatusRsp = [[WifiStatusRsp alloc] init];
  return self;
}
- (WifiStatusRspBuilder*) clone {
  return [WifiStatusRsp builderWithPrototype:resultWifiStatusRsp];
}
- (WifiStatusRsp*) defaultInstance {
  return [WifiStatusRsp defaultInstance];
}
- (WifiStatusRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WifiStatusRsp*) buildPartial {
  WifiStatusRsp* returnMe = resultWifiStatusRsp;
  self.resultWifiStatusRsp = nil;
  return returnMe;
}
- (WifiStatusRspBuilder*) mergeFrom:(WifiStatusRsp*) other {
  if (other == [WifiStatusRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasExternDeviceInfo) {
    [self setExternDeviceInfo:other.externDeviceInfo];
  }
  if (other.hasWifiStatus) {
    [self setWifiStatus:other.wifiStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WifiStatusRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WifiStatusRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setExternDeviceInfo:[input readData]];
        break;
      }
      case 32: {
        WifiStatus value = (WifiStatus)[input readEnum];
        if (WifiStatusIsValidValue(value)) {
          [self setWifiStatus:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultWifiStatusRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultWifiStatusRsp.rspCode;
}
- (WifiStatusRspBuilder*) setRspCode:(RspCode) value {
  resultWifiStatusRsp.hasRspCode = YES;
  resultWifiStatusRsp.rspCode = value;
  return self;
}
- (WifiStatusRspBuilder*) clearRspCode {
  resultWifiStatusRsp.hasRspCode = NO;
  resultWifiStatusRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultWifiStatusRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultWifiStatusRsp.errorCode;
}
- (WifiStatusRspBuilder*) setErrorCode:(ErrorCode) value {
  resultWifiStatusRsp.hasErrorCode = YES;
  resultWifiStatusRsp.errorCode = value;
  return self;
}
- (WifiStatusRspBuilder*) clearErrorCode {
  resultWifiStatusRsp.hasErrorCode = NO;
  resultWifiStatusRsp.errorCode = ErrorCodeNormal;
  return self;
}
- (BOOL) hasExternDeviceInfo {
  return resultWifiStatusRsp.hasExternDeviceInfo;
}
- (NSData*) externDeviceInfo {
  return resultWifiStatusRsp.externDeviceInfo;
}
- (WifiStatusRspBuilder*) setExternDeviceInfo:(NSData*) value {
  resultWifiStatusRsp.hasExternDeviceInfo = YES;
  resultWifiStatusRsp.externDeviceInfo = value;
  return self;
}
- (WifiStatusRspBuilder*) clearExternDeviceInfo {
  resultWifiStatusRsp.hasExternDeviceInfo = NO;
  resultWifiStatusRsp.externDeviceInfo = [NSData data];
  return self;
}
- (BOOL) hasWifiStatus {
  return resultWifiStatusRsp.hasWifiStatus;
}
- (WifiStatus) wifiStatus {
  return resultWifiStatusRsp.wifiStatus;
}
- (WifiStatusRspBuilder*) setWifiStatus:(WifiStatus) value {
  resultWifiStatusRsp.hasWifiStatus = YES;
  resultWifiStatusRsp.wifiStatus = value;
  return self;
}
- (WifiStatusRspBuilder*) clearWifiStatus {
  resultWifiStatusRsp.hasWifiStatus = NO;
  resultWifiStatusRsp.wifiStatus = WifiStatusWifiStatusConnected;
  return self;
}
@end

@interface BtPairDeviceListGetReq ()
@property BOOL getDeviceList;
@end

@implementation BtPairDeviceListGetReq

- (BOOL) hasGetDeviceList {
  return !!hasGetDeviceList_;
}
- (void) setHasGetDeviceList:(BOOL) _value_ {
  hasGetDeviceList_ = !!_value_;
}
- (BOOL) getDeviceList {
  return !!getDeviceList_;
}
- (void) setGetDeviceList:(BOOL) _value_ {
  getDeviceList_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.getDeviceList = NO;
  }
  return self;
}
static BtPairDeviceListGetReq* defaultBtPairDeviceListGetReqInstance = nil;
+ (void) initialize {
  if (self == [BtPairDeviceListGetReq class]) {
    defaultBtPairDeviceListGetReqInstance = [[BtPairDeviceListGetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtPairDeviceListGetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultBtPairDeviceListGetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetDeviceList) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetDeviceList) {
    [output writeBool:1 value:self.getDeviceList];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetDeviceList) {
    size_ += computeBoolSize(1, self.getDeviceList);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtPairDeviceListGetReq*) parseFromData:(NSData*) data {
  return (BtPairDeviceListGetReq*)[[[BtPairDeviceListGetReq builder] mergeFromData:data] build];
}
+ (BtPairDeviceListGetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtPairDeviceListGetReq*)[[[BtPairDeviceListGetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtPairDeviceListGetReq*) parseFromInputStream:(NSInputStream*) input {
  return (BtPairDeviceListGetReq*)[[[BtPairDeviceListGetReq builder] mergeFromInputStream:input] build];
}
+ (BtPairDeviceListGetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtPairDeviceListGetReq*)[[[BtPairDeviceListGetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtPairDeviceListGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtPairDeviceListGetReq*)[[[BtPairDeviceListGetReq builder] mergeFromCodedInputStream:input] build];
}
+ (BtPairDeviceListGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtPairDeviceListGetReq*)[[[BtPairDeviceListGetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtPairDeviceListGetReqBuilder*) builder {
  return [[BtPairDeviceListGetReqBuilder alloc] init];
}
+ (BtPairDeviceListGetReqBuilder*) builderWithPrototype:(BtPairDeviceListGetReq*) prototype {
  return [[BtPairDeviceListGetReq builder] mergeFrom:prototype];
}
- (BtPairDeviceListGetReqBuilder*) builder {
  return [BtPairDeviceListGetReq builder];
}
- (BtPairDeviceListGetReqBuilder*) toBuilder {
  return [BtPairDeviceListGetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetDeviceList) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getDeviceList", [NSNumber numberWithBool:self.getDeviceList]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetDeviceList) {
    [dictionary setObject: [NSNumber numberWithBool:self.getDeviceList] forKey: @"getDeviceList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtPairDeviceListGetReq class]]) {
    return NO;
  }
  BtPairDeviceListGetReq *otherMessage = other;
  return
      self.hasGetDeviceList == otherMessage.hasGetDeviceList &&
      (!self.hasGetDeviceList || self.getDeviceList == otherMessage.getDeviceList) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetDeviceList) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getDeviceList] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtPairDeviceListGetReqBuilder()
@property (strong) BtPairDeviceListGetReq* resultBtPairDeviceListGetReq;
@end

@implementation BtPairDeviceListGetReqBuilder
@synthesize resultBtPairDeviceListGetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtPairDeviceListGetReq = [[BtPairDeviceListGetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtPairDeviceListGetReq;
}
- (BtPairDeviceListGetReqBuilder*) clear {
  self.resultBtPairDeviceListGetReq = [[BtPairDeviceListGetReq alloc] init];
  return self;
}
- (BtPairDeviceListGetReqBuilder*) clone {
  return [BtPairDeviceListGetReq builderWithPrototype:resultBtPairDeviceListGetReq];
}
- (BtPairDeviceListGetReq*) defaultInstance {
  return [BtPairDeviceListGetReq defaultInstance];
}
- (BtPairDeviceListGetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtPairDeviceListGetReq*) buildPartial {
  BtPairDeviceListGetReq* returnMe = resultBtPairDeviceListGetReq;
  self.resultBtPairDeviceListGetReq = nil;
  return returnMe;
}
- (BtPairDeviceListGetReqBuilder*) mergeFrom:(BtPairDeviceListGetReq*) other {
  if (other == [BtPairDeviceListGetReq defaultInstance]) {
    return self;
  }
  if (other.hasGetDeviceList) {
    [self setGetDeviceList:other.getDeviceList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtPairDeviceListGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtPairDeviceListGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGetDeviceList:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasGetDeviceList {
  return resultBtPairDeviceListGetReq.hasGetDeviceList;
}
- (BOOL) getDeviceList {
  return resultBtPairDeviceListGetReq.getDeviceList;
}
- (BtPairDeviceListGetReqBuilder*) setGetDeviceList:(BOOL) value {
  resultBtPairDeviceListGetReq.hasGetDeviceList = YES;
  resultBtPairDeviceListGetReq.getDeviceList = value;
  return self;
}
- (BtPairDeviceListGetReqBuilder*) clearGetDeviceList {
  resultBtPairDeviceListGetReq.hasGetDeviceList = NO;
  resultBtPairDeviceListGetReq.getDeviceList = NO;
  return self;
}
@end

@interface BtPairDeviceListRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@property (strong) NSData* deviceInfo;
@end

@implementation BtPairDeviceListRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasDeviceInfo {
  return !!hasDeviceInfo_;
}
- (void) setHasDeviceInfo:(BOOL) _value_ {
  hasDeviceInfo_ = !!_value_;
}
@synthesize deviceInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
    self.deviceInfo = [NSData data];
  }
  return self;
}
static BtPairDeviceListRsp* defaultBtPairDeviceListRspInstance = nil;
+ (void) initialize {
  if (self == [BtPairDeviceListRsp class]) {
    defaultBtPairDeviceListRspInstance = [[BtPairDeviceListRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtPairDeviceListRspInstance;
}
- (instancetype) defaultInstance {
  return defaultBtPairDeviceListRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  if (self.hasDeviceInfo) {
    [output writeData:3 value:self.deviceInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  if (self.hasDeviceInfo) {
    size_ += computeDataSize(3, self.deviceInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtPairDeviceListRsp*) parseFromData:(NSData*) data {
  return (BtPairDeviceListRsp*)[[[BtPairDeviceListRsp builder] mergeFromData:data] build];
}
+ (BtPairDeviceListRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtPairDeviceListRsp*)[[[BtPairDeviceListRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtPairDeviceListRsp*) parseFromInputStream:(NSInputStream*) input {
  return (BtPairDeviceListRsp*)[[[BtPairDeviceListRsp builder] mergeFromInputStream:input] build];
}
+ (BtPairDeviceListRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtPairDeviceListRsp*)[[[BtPairDeviceListRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtPairDeviceListRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtPairDeviceListRsp*)[[[BtPairDeviceListRsp builder] mergeFromCodedInputStream:input] build];
}
+ (BtPairDeviceListRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtPairDeviceListRsp*)[[[BtPairDeviceListRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtPairDeviceListRspBuilder*) builder {
  return [[BtPairDeviceListRspBuilder alloc] init];
}
+ (BtPairDeviceListRspBuilder*) builderWithPrototype:(BtPairDeviceListRsp*) prototype {
  return [[BtPairDeviceListRsp builder] mergeFrom:prototype];
}
- (BtPairDeviceListRspBuilder*) builder {
  return [BtPairDeviceListRsp builder];
}
- (BtPairDeviceListRspBuilder*) toBuilder {
  return [BtPairDeviceListRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  if (self.hasDeviceInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceInfo", self.deviceInfo];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  if (self.hasDeviceInfo) {
    [dictionary setObject: self.deviceInfo forKey: @"deviceInfo"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtPairDeviceListRsp class]]) {
    return NO;
  }
  BtPairDeviceListRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasDeviceInfo == otherMessage.hasDeviceInfo &&
      (!self.hasDeviceInfo || [self.deviceInfo isEqual:otherMessage.deviceInfo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  if (self.hasDeviceInfo) {
    hashCode = hashCode * 31 + [self.deviceInfo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtPairDeviceListRspBuilder()
@property (strong) BtPairDeviceListRsp* resultBtPairDeviceListRsp;
@end

@implementation BtPairDeviceListRspBuilder
@synthesize resultBtPairDeviceListRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtPairDeviceListRsp = [[BtPairDeviceListRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtPairDeviceListRsp;
}
- (BtPairDeviceListRspBuilder*) clear {
  self.resultBtPairDeviceListRsp = [[BtPairDeviceListRsp alloc] init];
  return self;
}
- (BtPairDeviceListRspBuilder*) clone {
  return [BtPairDeviceListRsp builderWithPrototype:resultBtPairDeviceListRsp];
}
- (BtPairDeviceListRsp*) defaultInstance {
  return [BtPairDeviceListRsp defaultInstance];
}
- (BtPairDeviceListRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtPairDeviceListRsp*) buildPartial {
  BtPairDeviceListRsp* returnMe = resultBtPairDeviceListRsp;
  self.resultBtPairDeviceListRsp = nil;
  return returnMe;
}
- (BtPairDeviceListRspBuilder*) mergeFrom:(BtPairDeviceListRsp*) other {
  if (other == [BtPairDeviceListRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasDeviceInfo) {
    [self setDeviceInfo:other.deviceInfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtPairDeviceListRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtPairDeviceListRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setDeviceInfo:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultBtPairDeviceListRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultBtPairDeviceListRsp.rspCode;
}
- (BtPairDeviceListRspBuilder*) setRspCode:(RspCode) value {
  resultBtPairDeviceListRsp.hasRspCode = YES;
  resultBtPairDeviceListRsp.rspCode = value;
  return self;
}
- (BtPairDeviceListRspBuilder*) clearRspCode {
  resultBtPairDeviceListRsp.hasRspCode = NO;
  resultBtPairDeviceListRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultBtPairDeviceListRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultBtPairDeviceListRsp.errorCode;
}
- (BtPairDeviceListRspBuilder*) setErrorCode:(ErrorCode) value {
  resultBtPairDeviceListRsp.hasErrorCode = YES;
  resultBtPairDeviceListRsp.errorCode = value;
  return self;
}
- (BtPairDeviceListRspBuilder*) clearErrorCode {
  resultBtPairDeviceListRsp.hasErrorCode = NO;
  resultBtPairDeviceListRsp.errorCode = ErrorCodeNormal;
  return self;
}
- (BOOL) hasDeviceInfo {
  return resultBtPairDeviceListRsp.hasDeviceInfo;
}
- (NSData*) deviceInfo {
  return resultBtPairDeviceListRsp.deviceInfo;
}
- (BtPairDeviceListRspBuilder*) setDeviceInfo:(NSData*) value {
  resultBtPairDeviceListRsp.hasDeviceInfo = YES;
  resultBtPairDeviceListRsp.deviceInfo = value;
  return self;
}
- (BtPairDeviceListRspBuilder*) clearDeviceInfo {
  resultBtPairDeviceListRsp.hasDeviceInfo = NO;
  resultBtPairDeviceListRsp.deviceInfo = [NSData data];
  return self;
}
@end

@interface BtSearchDeviceListGetReq ()
@property BOOL getSearchDeviceList;
@end

@implementation BtSearchDeviceListGetReq

- (BOOL) hasGetSearchDeviceList {
  return !!hasGetSearchDeviceList_;
}
- (void) setHasGetSearchDeviceList:(BOOL) _value_ {
  hasGetSearchDeviceList_ = !!_value_;
}
- (BOOL) getSearchDeviceList {
  return !!getSearchDeviceList_;
}
- (void) setGetSearchDeviceList:(BOOL) _value_ {
  getSearchDeviceList_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.getSearchDeviceList = NO;
  }
  return self;
}
static BtSearchDeviceListGetReq* defaultBtSearchDeviceListGetReqInstance = nil;
+ (void) initialize {
  if (self == [BtSearchDeviceListGetReq class]) {
    defaultBtSearchDeviceListGetReqInstance = [[BtSearchDeviceListGetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtSearchDeviceListGetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultBtSearchDeviceListGetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetSearchDeviceList) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetSearchDeviceList) {
    [output writeBool:1 value:self.getSearchDeviceList];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetSearchDeviceList) {
    size_ += computeBoolSize(1, self.getSearchDeviceList);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtSearchDeviceListGetReq*) parseFromData:(NSData*) data {
  return (BtSearchDeviceListGetReq*)[[[BtSearchDeviceListGetReq builder] mergeFromData:data] build];
}
+ (BtSearchDeviceListGetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtSearchDeviceListGetReq*)[[[BtSearchDeviceListGetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtSearchDeviceListGetReq*) parseFromInputStream:(NSInputStream*) input {
  return (BtSearchDeviceListGetReq*)[[[BtSearchDeviceListGetReq builder] mergeFromInputStream:input] build];
}
+ (BtSearchDeviceListGetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtSearchDeviceListGetReq*)[[[BtSearchDeviceListGetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtSearchDeviceListGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtSearchDeviceListGetReq*)[[[BtSearchDeviceListGetReq builder] mergeFromCodedInputStream:input] build];
}
+ (BtSearchDeviceListGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtSearchDeviceListGetReq*)[[[BtSearchDeviceListGetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtSearchDeviceListGetReqBuilder*) builder {
  return [[BtSearchDeviceListGetReqBuilder alloc] init];
}
+ (BtSearchDeviceListGetReqBuilder*) builderWithPrototype:(BtSearchDeviceListGetReq*) prototype {
  return [[BtSearchDeviceListGetReq builder] mergeFrom:prototype];
}
- (BtSearchDeviceListGetReqBuilder*) builder {
  return [BtSearchDeviceListGetReq builder];
}
- (BtSearchDeviceListGetReqBuilder*) toBuilder {
  return [BtSearchDeviceListGetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetSearchDeviceList) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getSearchDeviceList", [NSNumber numberWithBool:self.getSearchDeviceList]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetSearchDeviceList) {
    [dictionary setObject: [NSNumber numberWithBool:self.getSearchDeviceList] forKey: @"getSearchDeviceList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtSearchDeviceListGetReq class]]) {
    return NO;
  }
  BtSearchDeviceListGetReq *otherMessage = other;
  return
      self.hasGetSearchDeviceList == otherMessage.hasGetSearchDeviceList &&
      (!self.hasGetSearchDeviceList || self.getSearchDeviceList == otherMessage.getSearchDeviceList) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetSearchDeviceList) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getSearchDeviceList] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtSearchDeviceListGetReqBuilder()
@property (strong) BtSearchDeviceListGetReq* resultBtSearchDeviceListGetReq;
@end

@implementation BtSearchDeviceListGetReqBuilder
@synthesize resultBtSearchDeviceListGetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtSearchDeviceListGetReq = [[BtSearchDeviceListGetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtSearchDeviceListGetReq;
}
- (BtSearchDeviceListGetReqBuilder*) clear {
  self.resultBtSearchDeviceListGetReq = [[BtSearchDeviceListGetReq alloc] init];
  return self;
}
- (BtSearchDeviceListGetReqBuilder*) clone {
  return [BtSearchDeviceListGetReq builderWithPrototype:resultBtSearchDeviceListGetReq];
}
- (BtSearchDeviceListGetReq*) defaultInstance {
  return [BtSearchDeviceListGetReq defaultInstance];
}
- (BtSearchDeviceListGetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtSearchDeviceListGetReq*) buildPartial {
  BtSearchDeviceListGetReq* returnMe = resultBtSearchDeviceListGetReq;
  self.resultBtSearchDeviceListGetReq = nil;
  return returnMe;
}
- (BtSearchDeviceListGetReqBuilder*) mergeFrom:(BtSearchDeviceListGetReq*) other {
  if (other == [BtSearchDeviceListGetReq defaultInstance]) {
    return self;
  }
  if (other.hasGetSearchDeviceList) {
    [self setGetSearchDeviceList:other.getSearchDeviceList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtSearchDeviceListGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtSearchDeviceListGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGetSearchDeviceList:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasGetSearchDeviceList {
  return resultBtSearchDeviceListGetReq.hasGetSearchDeviceList;
}
- (BOOL) getSearchDeviceList {
  return resultBtSearchDeviceListGetReq.getSearchDeviceList;
}
- (BtSearchDeviceListGetReqBuilder*) setGetSearchDeviceList:(BOOL) value {
  resultBtSearchDeviceListGetReq.hasGetSearchDeviceList = YES;
  resultBtSearchDeviceListGetReq.getSearchDeviceList = value;
  return self;
}
- (BtSearchDeviceListGetReqBuilder*) clearGetSearchDeviceList {
  resultBtSearchDeviceListGetReq.hasGetSearchDeviceList = NO;
  resultBtSearchDeviceListGetReq.getSearchDeviceList = NO;
  return self;
}
@end

@interface BtSearchDeviceListRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@property (strong) NSData* searchDeviceInfo;
@end

@implementation BtSearchDeviceListRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasSearchDeviceInfo {
  return !!hasSearchDeviceInfo_;
}
- (void) setHasSearchDeviceInfo:(BOOL) _value_ {
  hasSearchDeviceInfo_ = !!_value_;
}
@synthesize searchDeviceInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
    self.searchDeviceInfo = [NSData data];
  }
  return self;
}
static BtSearchDeviceListRsp* defaultBtSearchDeviceListRspInstance = nil;
+ (void) initialize {
  if (self == [BtSearchDeviceListRsp class]) {
    defaultBtSearchDeviceListRspInstance = [[BtSearchDeviceListRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtSearchDeviceListRspInstance;
}
- (instancetype) defaultInstance {
  return defaultBtSearchDeviceListRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  if (self.hasSearchDeviceInfo) {
    [output writeData:3 value:self.searchDeviceInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  if (self.hasSearchDeviceInfo) {
    size_ += computeDataSize(3, self.searchDeviceInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtSearchDeviceListRsp*) parseFromData:(NSData*) data {
  return (BtSearchDeviceListRsp*)[[[BtSearchDeviceListRsp builder] mergeFromData:data] build];
}
+ (BtSearchDeviceListRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtSearchDeviceListRsp*)[[[BtSearchDeviceListRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtSearchDeviceListRsp*) parseFromInputStream:(NSInputStream*) input {
  return (BtSearchDeviceListRsp*)[[[BtSearchDeviceListRsp builder] mergeFromInputStream:input] build];
}
+ (BtSearchDeviceListRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtSearchDeviceListRsp*)[[[BtSearchDeviceListRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtSearchDeviceListRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtSearchDeviceListRsp*)[[[BtSearchDeviceListRsp builder] mergeFromCodedInputStream:input] build];
}
+ (BtSearchDeviceListRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtSearchDeviceListRsp*)[[[BtSearchDeviceListRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtSearchDeviceListRspBuilder*) builder {
  return [[BtSearchDeviceListRspBuilder alloc] init];
}
+ (BtSearchDeviceListRspBuilder*) builderWithPrototype:(BtSearchDeviceListRsp*) prototype {
  return [[BtSearchDeviceListRsp builder] mergeFrom:prototype];
}
- (BtSearchDeviceListRspBuilder*) builder {
  return [BtSearchDeviceListRsp builder];
}
- (BtSearchDeviceListRspBuilder*) toBuilder {
  return [BtSearchDeviceListRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  if (self.hasSearchDeviceInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchDeviceInfo", self.searchDeviceInfo];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  if (self.hasSearchDeviceInfo) {
    [dictionary setObject: self.searchDeviceInfo forKey: @"searchDeviceInfo"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtSearchDeviceListRsp class]]) {
    return NO;
  }
  BtSearchDeviceListRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasSearchDeviceInfo == otherMessage.hasSearchDeviceInfo &&
      (!self.hasSearchDeviceInfo || [self.searchDeviceInfo isEqual:otherMessage.searchDeviceInfo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  if (self.hasSearchDeviceInfo) {
    hashCode = hashCode * 31 + [self.searchDeviceInfo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtSearchDeviceListRspBuilder()
@property (strong) BtSearchDeviceListRsp* resultBtSearchDeviceListRsp;
@end

@implementation BtSearchDeviceListRspBuilder
@synthesize resultBtSearchDeviceListRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtSearchDeviceListRsp = [[BtSearchDeviceListRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtSearchDeviceListRsp;
}
- (BtSearchDeviceListRspBuilder*) clear {
  self.resultBtSearchDeviceListRsp = [[BtSearchDeviceListRsp alloc] init];
  return self;
}
- (BtSearchDeviceListRspBuilder*) clone {
  return [BtSearchDeviceListRsp builderWithPrototype:resultBtSearchDeviceListRsp];
}
- (BtSearchDeviceListRsp*) defaultInstance {
  return [BtSearchDeviceListRsp defaultInstance];
}
- (BtSearchDeviceListRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtSearchDeviceListRsp*) buildPartial {
  BtSearchDeviceListRsp* returnMe = resultBtSearchDeviceListRsp;
  self.resultBtSearchDeviceListRsp = nil;
  return returnMe;
}
- (BtSearchDeviceListRspBuilder*) mergeFrom:(BtSearchDeviceListRsp*) other {
  if (other == [BtSearchDeviceListRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasSearchDeviceInfo) {
    [self setSearchDeviceInfo:other.searchDeviceInfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtSearchDeviceListRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtSearchDeviceListRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setSearchDeviceInfo:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultBtSearchDeviceListRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultBtSearchDeviceListRsp.rspCode;
}
- (BtSearchDeviceListRspBuilder*) setRspCode:(RspCode) value {
  resultBtSearchDeviceListRsp.hasRspCode = YES;
  resultBtSearchDeviceListRsp.rspCode = value;
  return self;
}
- (BtSearchDeviceListRspBuilder*) clearRspCode {
  resultBtSearchDeviceListRsp.hasRspCode = NO;
  resultBtSearchDeviceListRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultBtSearchDeviceListRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultBtSearchDeviceListRsp.errorCode;
}
- (BtSearchDeviceListRspBuilder*) setErrorCode:(ErrorCode) value {
  resultBtSearchDeviceListRsp.hasErrorCode = YES;
  resultBtSearchDeviceListRsp.errorCode = value;
  return self;
}
- (BtSearchDeviceListRspBuilder*) clearErrorCode {
  resultBtSearchDeviceListRsp.hasErrorCode = NO;
  resultBtSearchDeviceListRsp.errorCode = ErrorCodeNormal;
  return self;
}
- (BOOL) hasSearchDeviceInfo {
  return resultBtSearchDeviceListRsp.hasSearchDeviceInfo;
}
- (NSData*) searchDeviceInfo {
  return resultBtSearchDeviceListRsp.searchDeviceInfo;
}
- (BtSearchDeviceListRspBuilder*) setSearchDeviceInfo:(NSData*) value {
  resultBtSearchDeviceListRsp.hasSearchDeviceInfo = YES;
  resultBtSearchDeviceListRsp.searchDeviceInfo = value;
  return self;
}
- (BtSearchDeviceListRspBuilder*) clearSearchDeviceInfo {
  resultBtSearchDeviceListRsp.hasSearchDeviceInfo = NO;
  resultBtSearchDeviceListRsp.searchDeviceInfo = [NSData data];
  return self;
}
@end

@interface BtCallReq ()
@property BtCallType btCallType;
@property (strong) NSString* name;
@property (strong) NSString* number;
@property BtCallChannel btCallChannel;
@end

@implementation BtCallReq

- (BOOL) hasBtCallType {
  return !!hasBtCallType_;
}
- (void) setHasBtCallType:(BOOL) _value_ {
  hasBtCallType_ = !!_value_;
}
@synthesize btCallType;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) _value_ {
  hasNumber_ = !!_value_;
}
@synthesize number;
- (BOOL) hasBtCallChannel {
  return !!hasBtCallChannel_;
}
- (void) setHasBtCallChannel:(BOOL) _value_ {
  hasBtCallChannel_ = !!_value_;
}
@synthesize btCallChannel;
- (instancetype) init {
  if ((self = [super init])) {
    self.btCallType = BtCallTypeBtcallNumber;
    self.name = @"";
    self.number = @"";
    self.btCallChannel = BtCallChannelBtcallChannel1;
  }
  return self;
}
static BtCallReq* defaultBtCallReqInstance = nil;
+ (void) initialize {
  if (self == [BtCallReq class]) {
    defaultBtCallReqInstance = [[BtCallReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtCallReqInstance;
}
- (instancetype) defaultInstance {
  return defaultBtCallReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBtCallType) {
    return NO;
  }
  if (!self.hasNumber) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBtCallType) {
    [output writeEnum:1 value:self.btCallType];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasNumber) {
    [output writeString:3 value:self.number];
  }
  if (self.hasBtCallChannel) {
    [output writeEnum:4 value:self.btCallChannel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBtCallType) {
    size_ += computeEnumSize(1, self.btCallType);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasNumber) {
    size_ += computeStringSize(3, self.number);
  }
  if (self.hasBtCallChannel) {
    size_ += computeEnumSize(4, self.btCallChannel);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtCallReq*) parseFromData:(NSData*) data {
  return (BtCallReq*)[[[BtCallReq builder] mergeFromData:data] build];
}
+ (BtCallReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallReq*)[[[BtCallReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtCallReq*) parseFromInputStream:(NSInputStream*) input {
  return (BtCallReq*)[[[BtCallReq builder] mergeFromInputStream:input] build];
}
+ (BtCallReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallReq*)[[[BtCallReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtCallReq*)[[[BtCallReq builder] mergeFromCodedInputStream:input] build];
}
+ (BtCallReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallReq*)[[[BtCallReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallReqBuilder*) builder {
  return [[BtCallReqBuilder alloc] init];
}
+ (BtCallReqBuilder*) builderWithPrototype:(BtCallReq*) prototype {
  return [[BtCallReq builder] mergeFrom:prototype];
}
- (BtCallReqBuilder*) builder {
  return [BtCallReq builder];
}
- (BtCallReqBuilder*) toBuilder {
  return [BtCallReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBtCallType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"btCallType", NSStringFromBtCallType(self.btCallType)];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"number", self.number];
  }
  if (self.hasBtCallChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"btCallChannel", NSStringFromBtCallChannel(self.btCallChannel)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBtCallType) {
    [dictionary setObject: @(self.btCallType) forKey: @"btCallType"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasNumber) {
    [dictionary setObject: self.number forKey: @"number"];
  }
  if (self.hasBtCallChannel) {
    [dictionary setObject: @(self.btCallChannel) forKey: @"btCallChannel"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtCallReq class]]) {
    return NO;
  }
  BtCallReq *otherMessage = other;
  return
      self.hasBtCallType == otherMessage.hasBtCallType &&
      (!self.hasBtCallType || self.btCallType == otherMessage.btCallType) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasNumber == otherMessage.hasNumber &&
      (!self.hasNumber || [self.number isEqual:otherMessage.number]) &&
      self.hasBtCallChannel == otherMessage.hasBtCallChannel &&
      (!self.hasBtCallChannel || self.btCallChannel == otherMessage.btCallChannel) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBtCallType) {
    hashCode = hashCode * 31 + self.btCallType;
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasNumber) {
    hashCode = hashCode * 31 + [self.number hash];
  }
  if (self.hasBtCallChannel) {
    hashCode = hashCode * 31 + self.btCallChannel;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtCallReqBuilder()
@property (strong) BtCallReq* resultBtCallReq;
@end

@implementation BtCallReqBuilder
@synthesize resultBtCallReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtCallReq = [[BtCallReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtCallReq;
}
- (BtCallReqBuilder*) clear {
  self.resultBtCallReq = [[BtCallReq alloc] init];
  return self;
}
- (BtCallReqBuilder*) clone {
  return [BtCallReq builderWithPrototype:resultBtCallReq];
}
- (BtCallReq*) defaultInstance {
  return [BtCallReq defaultInstance];
}
- (BtCallReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtCallReq*) buildPartial {
  BtCallReq* returnMe = resultBtCallReq;
  self.resultBtCallReq = nil;
  return returnMe;
}
- (BtCallReqBuilder*) mergeFrom:(BtCallReq*) other {
  if (other == [BtCallReq defaultInstance]) {
    return self;
  }
  if (other.hasBtCallType) {
    [self setBtCallType:other.btCallType];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasNumber) {
    [self setNumber:other.number];
  }
  if (other.hasBtCallChannel) {
    [self setBtCallChannel:other.btCallChannel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtCallReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtCallReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        BtCallType value = (BtCallType)[input readEnum];
        if (BtCallTypeIsValidValue(value)) {
          [self setBtCallType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setNumber:[input readString]];
        break;
      }
      case 32: {
        BtCallChannel value = (BtCallChannel)[input readEnum];
        if (BtCallChannelIsValidValue(value)) {
          [self setBtCallChannel:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasBtCallType {
  return resultBtCallReq.hasBtCallType;
}
- (BtCallType) btCallType {
  return resultBtCallReq.btCallType;
}
- (BtCallReqBuilder*) setBtCallType:(BtCallType) value {
  resultBtCallReq.hasBtCallType = YES;
  resultBtCallReq.btCallType = value;
  return self;
}
- (BtCallReqBuilder*) clearBtCallType {
  resultBtCallReq.hasBtCallType = NO;
  resultBtCallReq.btCallType = BtCallTypeBtcallNumber;
  return self;
}
- (BOOL) hasName {
  return resultBtCallReq.hasName;
}
- (NSString*) name {
  return resultBtCallReq.name;
}
- (BtCallReqBuilder*) setName:(NSString*) value {
  resultBtCallReq.hasName = YES;
  resultBtCallReq.name = value;
  return self;
}
- (BtCallReqBuilder*) clearName {
  resultBtCallReq.hasName = NO;
  resultBtCallReq.name = @"";
  return self;
}
- (BOOL) hasNumber {
  return resultBtCallReq.hasNumber;
}
- (NSString*) number {
  return resultBtCallReq.number;
}
- (BtCallReqBuilder*) setNumber:(NSString*) value {
  resultBtCallReq.hasNumber = YES;
  resultBtCallReq.number = value;
  return self;
}
- (BtCallReqBuilder*) clearNumber {
  resultBtCallReq.hasNumber = NO;
  resultBtCallReq.number = @"";
  return self;
}
- (BOOL) hasBtCallChannel {
  return resultBtCallReq.hasBtCallChannel;
}
- (BtCallChannel) btCallChannel {
  return resultBtCallReq.btCallChannel;
}
- (BtCallReqBuilder*) setBtCallChannel:(BtCallChannel) value {
  resultBtCallReq.hasBtCallChannel = YES;
  resultBtCallReq.btCallChannel = value;
  return self;
}
- (BtCallReqBuilder*) clearBtCallChannel {
  resultBtCallReq.hasBtCallChannel = NO;
  resultBtCallReq.btCallChannel = BtCallChannelBtcallChannel1;
  return self;
}
@end

@interface BtCallStatusNotification ()
@property BtCallStatus status;
@property BtCallChannel channel;
@end

@implementation BtCallStatusNotification

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasChannel {
  return !!hasChannel_;
}
- (void) setHasChannel:(BOOL) _value_ {
  hasChannel_ = !!_value_;
}
@synthesize channel;
- (instancetype) init {
  if ((self = [super init])) {
    self.status = BtCallStatusCallIn;
    self.channel = BtCallChannelBtcallChannel1;
  }
  return self;
}
static BtCallStatusNotification* defaultBtCallStatusNotificationInstance = nil;
+ (void) initialize {
  if (self == [BtCallStatusNotification class]) {
    defaultBtCallStatusNotificationInstance = [[BtCallStatusNotification alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtCallStatusNotificationInstance;
}
- (instancetype) defaultInstance {
  return defaultBtCallStatusNotificationInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStatus) {
    return NO;
  }
  if (!self.hasChannel) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeEnum:1 value:self.status];
  }
  if (self.hasChannel) {
    [output writeEnum:2 value:self.channel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeEnumSize(1, self.status);
  }
  if (self.hasChannel) {
    size_ += computeEnumSize(2, self.channel);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtCallStatusNotification*) parseFromData:(NSData*) data {
  return (BtCallStatusNotification*)[[[BtCallStatusNotification builder] mergeFromData:data] build];
}
+ (BtCallStatusNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallStatusNotification*)[[[BtCallStatusNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtCallStatusNotification*) parseFromInputStream:(NSInputStream*) input {
  return (BtCallStatusNotification*)[[[BtCallStatusNotification builder] mergeFromInputStream:input] build];
}
+ (BtCallStatusNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallStatusNotification*)[[[BtCallStatusNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallStatusNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtCallStatusNotification*)[[[BtCallStatusNotification builder] mergeFromCodedInputStream:input] build];
}
+ (BtCallStatusNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallStatusNotification*)[[[BtCallStatusNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallStatusNotificationBuilder*) builder {
  return [[BtCallStatusNotificationBuilder alloc] init];
}
+ (BtCallStatusNotificationBuilder*) builderWithPrototype:(BtCallStatusNotification*) prototype {
  return [[BtCallStatusNotification builder] mergeFrom:prototype];
}
- (BtCallStatusNotificationBuilder*) builder {
  return [BtCallStatusNotification builder];
}
- (BtCallStatusNotificationBuilder*) toBuilder {
  return [BtCallStatusNotification builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", NSStringFromBtCallStatus(self.status)];
  }
  if (self.hasChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channel", NSStringFromBtCallChannel(self.channel)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatus) {
    [dictionary setObject: @(self.status) forKey: @"status"];
  }
  if (self.hasChannel) {
    [dictionary setObject: @(self.channel) forKey: @"channel"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtCallStatusNotification class]]) {
    return NO;
  }
  BtCallStatusNotification *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasChannel == otherMessage.hasChannel &&
      (!self.hasChannel || self.channel == otherMessage.channel) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasChannel) {
    hashCode = hashCode * 31 + self.channel;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtCallStatusNotificationBuilder()
@property (strong) BtCallStatusNotification* resultBtCallStatusNotification;
@end

@implementation BtCallStatusNotificationBuilder
@synthesize resultBtCallStatusNotification;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtCallStatusNotification = [[BtCallStatusNotification alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtCallStatusNotification;
}
- (BtCallStatusNotificationBuilder*) clear {
  self.resultBtCallStatusNotification = [[BtCallStatusNotification alloc] init];
  return self;
}
- (BtCallStatusNotificationBuilder*) clone {
  return [BtCallStatusNotification builderWithPrototype:resultBtCallStatusNotification];
}
- (BtCallStatusNotification*) defaultInstance {
  return [BtCallStatusNotification defaultInstance];
}
- (BtCallStatusNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtCallStatusNotification*) buildPartial {
  BtCallStatusNotification* returnMe = resultBtCallStatusNotification;
  self.resultBtCallStatusNotification = nil;
  return returnMe;
}
- (BtCallStatusNotificationBuilder*) mergeFrom:(BtCallStatusNotification*) other {
  if (other == [BtCallStatusNotification defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasChannel) {
    [self setChannel:other.channel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtCallStatusNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtCallStatusNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        BtCallStatus value = (BtCallStatus)[input readEnum];
        if (BtCallStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        BtCallChannel value = (BtCallChannel)[input readEnum];
        if (BtCallChannelIsValidValue(value)) {
          [self setChannel:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return resultBtCallStatusNotification.hasStatus;
}
- (BtCallStatus) status {
  return resultBtCallStatusNotification.status;
}
- (BtCallStatusNotificationBuilder*) setStatus:(BtCallStatus) value {
  resultBtCallStatusNotification.hasStatus = YES;
  resultBtCallStatusNotification.status = value;
  return self;
}
- (BtCallStatusNotificationBuilder*) clearStatus {
  resultBtCallStatusNotification.hasStatus = NO;
  resultBtCallStatusNotification.status = BtCallStatusCallIn;
  return self;
}
- (BOOL) hasChannel {
  return resultBtCallStatusNotification.hasChannel;
}
- (BtCallChannel) channel {
  return resultBtCallStatusNotification.channel;
}
- (BtCallStatusNotificationBuilder*) setChannel:(BtCallChannel) value {
  resultBtCallStatusNotification.hasChannel = YES;
  resultBtCallStatusNotification.channel = value;
  return self;
}
- (BtCallStatusNotificationBuilder*) clearChannel {
  resultBtCallStatusNotification.hasChannel = NO;
  resultBtCallStatusNotification.channel = BtCallChannelBtcallChannel1;
  return self;
}
@end

@interface BtCallStatusSetReq ()
@property BtCallStatus status;
@property BtCallChannel channel;
@end

@implementation BtCallStatusSetReq

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasChannel {
  return !!hasChannel_;
}
- (void) setHasChannel:(BOOL) _value_ {
  hasChannel_ = !!_value_;
}
@synthesize channel;
- (instancetype) init {
  if ((self = [super init])) {
    self.status = BtCallStatusCallIn;
    self.channel = BtCallChannelBtcallChannel1;
  }
  return self;
}
static BtCallStatusSetReq* defaultBtCallStatusSetReqInstance = nil;
+ (void) initialize {
  if (self == [BtCallStatusSetReq class]) {
    defaultBtCallStatusSetReqInstance = [[BtCallStatusSetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtCallStatusSetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultBtCallStatusSetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStatus) {
    return NO;
  }
  if (!self.hasChannel) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeEnum:1 value:self.status];
  }
  if (self.hasChannel) {
    [output writeEnum:2 value:self.channel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeEnumSize(1, self.status);
  }
  if (self.hasChannel) {
    size_ += computeEnumSize(2, self.channel);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtCallStatusSetReq*) parseFromData:(NSData*) data {
  return (BtCallStatusSetReq*)[[[BtCallStatusSetReq builder] mergeFromData:data] build];
}
+ (BtCallStatusSetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallStatusSetReq*)[[[BtCallStatusSetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtCallStatusSetReq*) parseFromInputStream:(NSInputStream*) input {
  return (BtCallStatusSetReq*)[[[BtCallStatusSetReq builder] mergeFromInputStream:input] build];
}
+ (BtCallStatusSetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallStatusSetReq*)[[[BtCallStatusSetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallStatusSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtCallStatusSetReq*)[[[BtCallStatusSetReq builder] mergeFromCodedInputStream:input] build];
}
+ (BtCallStatusSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallStatusSetReq*)[[[BtCallStatusSetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallStatusSetReqBuilder*) builder {
  return [[BtCallStatusSetReqBuilder alloc] init];
}
+ (BtCallStatusSetReqBuilder*) builderWithPrototype:(BtCallStatusSetReq*) prototype {
  return [[BtCallStatusSetReq builder] mergeFrom:prototype];
}
- (BtCallStatusSetReqBuilder*) builder {
  return [BtCallStatusSetReq builder];
}
- (BtCallStatusSetReqBuilder*) toBuilder {
  return [BtCallStatusSetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", NSStringFromBtCallStatus(self.status)];
  }
  if (self.hasChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channel", NSStringFromBtCallChannel(self.channel)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatus) {
    [dictionary setObject: @(self.status) forKey: @"status"];
  }
  if (self.hasChannel) {
    [dictionary setObject: @(self.channel) forKey: @"channel"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtCallStatusSetReq class]]) {
    return NO;
  }
  BtCallStatusSetReq *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasChannel == otherMessage.hasChannel &&
      (!self.hasChannel || self.channel == otherMessage.channel) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasChannel) {
    hashCode = hashCode * 31 + self.channel;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtCallStatusSetReqBuilder()
@property (strong) BtCallStatusSetReq* resultBtCallStatusSetReq;
@end

@implementation BtCallStatusSetReqBuilder
@synthesize resultBtCallStatusSetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtCallStatusSetReq = [[BtCallStatusSetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtCallStatusSetReq;
}
- (BtCallStatusSetReqBuilder*) clear {
  self.resultBtCallStatusSetReq = [[BtCallStatusSetReq alloc] init];
  return self;
}
- (BtCallStatusSetReqBuilder*) clone {
  return [BtCallStatusSetReq builderWithPrototype:resultBtCallStatusSetReq];
}
- (BtCallStatusSetReq*) defaultInstance {
  return [BtCallStatusSetReq defaultInstance];
}
- (BtCallStatusSetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtCallStatusSetReq*) buildPartial {
  BtCallStatusSetReq* returnMe = resultBtCallStatusSetReq;
  self.resultBtCallStatusSetReq = nil;
  return returnMe;
}
- (BtCallStatusSetReqBuilder*) mergeFrom:(BtCallStatusSetReq*) other {
  if (other == [BtCallStatusSetReq defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasChannel) {
    [self setChannel:other.channel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtCallStatusSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtCallStatusSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        BtCallStatus value = (BtCallStatus)[input readEnum];
        if (BtCallStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        BtCallChannel value = (BtCallChannel)[input readEnum];
        if (BtCallChannelIsValidValue(value)) {
          [self setChannel:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return resultBtCallStatusSetReq.hasStatus;
}
- (BtCallStatus) status {
  return resultBtCallStatusSetReq.status;
}
- (BtCallStatusSetReqBuilder*) setStatus:(BtCallStatus) value {
  resultBtCallStatusSetReq.hasStatus = YES;
  resultBtCallStatusSetReq.status = value;
  return self;
}
- (BtCallStatusSetReqBuilder*) clearStatus {
  resultBtCallStatusSetReq.hasStatus = NO;
  resultBtCallStatusSetReq.status = BtCallStatusCallIn;
  return self;
}
- (BOOL) hasChannel {
  return resultBtCallStatusSetReq.hasChannel;
}
- (BtCallChannel) channel {
  return resultBtCallStatusSetReq.channel;
}
- (BtCallStatusSetReqBuilder*) setChannel:(BtCallChannel) value {
  resultBtCallStatusSetReq.hasChannel = YES;
  resultBtCallStatusSetReq.channel = value;
  return self;
}
- (BtCallStatusSetReqBuilder*) clearChannel {
  resultBtCallStatusSetReq.hasChannel = NO;
  resultBtCallStatusSetReq.channel = BtCallChannelBtcallChannel1;
  return self;
}
@end

@interface BtCallStatusGetReq ()
@property BOOL status;
@property BtCallChannel channel;
@end

@implementation BtCallStatusGetReq

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
- (BOOL) status {
  return !!status_;
}
- (void) setStatus:(BOOL) _value_ {
  status_ = !!_value_;
}
- (BOOL) hasChannel {
  return !!hasChannel_;
}
- (void) setHasChannel:(BOOL) _value_ {
  hasChannel_ = !!_value_;
}
@synthesize channel;
- (instancetype) init {
  if ((self = [super init])) {
    self.status = NO;
    self.channel = BtCallChannelBtcallChannel1;
  }
  return self;
}
static BtCallStatusGetReq* defaultBtCallStatusGetReqInstance = nil;
+ (void) initialize {
  if (self == [BtCallStatusGetReq class]) {
    defaultBtCallStatusGetReqInstance = [[BtCallStatusGetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtCallStatusGetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultBtCallStatusGetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStatus) {
    return NO;
  }
  if (!self.hasChannel) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeBool:1 value:self.status];
  }
  if (self.hasChannel) {
    [output writeEnum:2 value:self.channel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeBoolSize(1, self.status);
  }
  if (self.hasChannel) {
    size_ += computeEnumSize(2, self.channel);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtCallStatusGetReq*) parseFromData:(NSData*) data {
  return (BtCallStatusGetReq*)[[[BtCallStatusGetReq builder] mergeFromData:data] build];
}
+ (BtCallStatusGetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallStatusGetReq*)[[[BtCallStatusGetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtCallStatusGetReq*) parseFromInputStream:(NSInputStream*) input {
  return (BtCallStatusGetReq*)[[[BtCallStatusGetReq builder] mergeFromInputStream:input] build];
}
+ (BtCallStatusGetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallStatusGetReq*)[[[BtCallStatusGetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallStatusGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtCallStatusGetReq*)[[[BtCallStatusGetReq builder] mergeFromCodedInputStream:input] build];
}
+ (BtCallStatusGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallStatusGetReq*)[[[BtCallStatusGetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallStatusGetReqBuilder*) builder {
  return [[BtCallStatusGetReqBuilder alloc] init];
}
+ (BtCallStatusGetReqBuilder*) builderWithPrototype:(BtCallStatusGetReq*) prototype {
  return [[BtCallStatusGetReq builder] mergeFrom:prototype];
}
- (BtCallStatusGetReqBuilder*) builder {
  return [BtCallStatusGetReq builder];
}
- (BtCallStatusGetReqBuilder*) toBuilder {
  return [BtCallStatusGetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithBool:self.status]];
  }
  if (self.hasChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channel", NSStringFromBtCallChannel(self.channel)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithBool:self.status] forKey: @"status"];
  }
  if (self.hasChannel) {
    [dictionary setObject: @(self.channel) forKey: @"channel"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtCallStatusGetReq class]]) {
    return NO;
  }
  BtCallStatusGetReq *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasChannel == otherMessage.hasChannel &&
      (!self.hasChannel || self.channel == otherMessage.channel) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.status] hash];
  }
  if (self.hasChannel) {
    hashCode = hashCode * 31 + self.channel;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtCallStatusGetReqBuilder()
@property (strong) BtCallStatusGetReq* resultBtCallStatusGetReq;
@end

@implementation BtCallStatusGetReqBuilder
@synthesize resultBtCallStatusGetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtCallStatusGetReq = [[BtCallStatusGetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtCallStatusGetReq;
}
- (BtCallStatusGetReqBuilder*) clear {
  self.resultBtCallStatusGetReq = [[BtCallStatusGetReq alloc] init];
  return self;
}
- (BtCallStatusGetReqBuilder*) clone {
  return [BtCallStatusGetReq builderWithPrototype:resultBtCallStatusGetReq];
}
- (BtCallStatusGetReq*) defaultInstance {
  return [BtCallStatusGetReq defaultInstance];
}
- (BtCallStatusGetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtCallStatusGetReq*) buildPartial {
  BtCallStatusGetReq* returnMe = resultBtCallStatusGetReq;
  self.resultBtCallStatusGetReq = nil;
  return returnMe;
}
- (BtCallStatusGetReqBuilder*) mergeFrom:(BtCallStatusGetReq*) other {
  if (other == [BtCallStatusGetReq defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasChannel) {
    [self setChannel:other.channel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtCallStatusGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtCallStatusGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setStatus:[input readBool]];
        break;
      }
      case 16: {
        BtCallChannel value = (BtCallChannel)[input readEnum];
        if (BtCallChannelIsValidValue(value)) {
          [self setChannel:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return resultBtCallStatusGetReq.hasStatus;
}
- (BOOL) status {
  return resultBtCallStatusGetReq.status;
}
- (BtCallStatusGetReqBuilder*) setStatus:(BOOL) value {
  resultBtCallStatusGetReq.hasStatus = YES;
  resultBtCallStatusGetReq.status = value;
  return self;
}
- (BtCallStatusGetReqBuilder*) clearStatus {
  resultBtCallStatusGetReq.hasStatus = NO;
  resultBtCallStatusGetReq.status = NO;
  return self;
}
- (BOOL) hasChannel {
  return resultBtCallStatusGetReq.hasChannel;
}
- (BtCallChannel) channel {
  return resultBtCallStatusGetReq.channel;
}
- (BtCallStatusGetReqBuilder*) setChannel:(BtCallChannel) value {
  resultBtCallStatusGetReq.hasChannel = YES;
  resultBtCallStatusGetReq.channel = value;
  return self;
}
- (BtCallStatusGetReqBuilder*) clearChannel {
  resultBtCallStatusGetReq.hasChannel = NO;
  resultBtCallStatusGetReq.channel = BtCallChannelBtcallChannel1;
  return self;
}
@end

@interface BtCallStatusRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@property BtCallStatus status;
@property BtCallChannel channel;
@end

@implementation BtCallStatusRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasChannel {
  return !!hasChannel_;
}
- (void) setHasChannel:(BOOL) _value_ {
  hasChannel_ = !!_value_;
}
@synthesize channel;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
    self.status = BtCallStatusCallIn;
    self.channel = BtCallChannelBtcallChannel1;
  }
  return self;
}
static BtCallStatusRsp* defaultBtCallStatusRspInstance = nil;
+ (void) initialize {
  if (self == [BtCallStatusRsp class]) {
    defaultBtCallStatusRspInstance = [[BtCallStatusRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtCallStatusRspInstance;
}
- (instancetype) defaultInstance {
  return defaultBtCallStatusRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  if (self.hasStatus) {
    [output writeEnum:3 value:self.status];
  }
  if (self.hasChannel) {
    [output writeEnum:4 value:self.channel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  if (self.hasStatus) {
    size_ += computeEnumSize(3, self.status);
  }
  if (self.hasChannel) {
    size_ += computeEnumSize(4, self.channel);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtCallStatusRsp*) parseFromData:(NSData*) data {
  return (BtCallStatusRsp*)[[[BtCallStatusRsp builder] mergeFromData:data] build];
}
+ (BtCallStatusRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallStatusRsp*)[[[BtCallStatusRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtCallStatusRsp*) parseFromInputStream:(NSInputStream*) input {
  return (BtCallStatusRsp*)[[[BtCallStatusRsp builder] mergeFromInputStream:input] build];
}
+ (BtCallStatusRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallStatusRsp*)[[[BtCallStatusRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallStatusRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtCallStatusRsp*)[[[BtCallStatusRsp builder] mergeFromCodedInputStream:input] build];
}
+ (BtCallStatusRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallStatusRsp*)[[[BtCallStatusRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallStatusRspBuilder*) builder {
  return [[BtCallStatusRspBuilder alloc] init];
}
+ (BtCallStatusRspBuilder*) builderWithPrototype:(BtCallStatusRsp*) prototype {
  return [[BtCallStatusRsp builder] mergeFrom:prototype];
}
- (BtCallStatusRspBuilder*) builder {
  return [BtCallStatusRsp builder];
}
- (BtCallStatusRspBuilder*) toBuilder {
  return [BtCallStatusRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", NSStringFromBtCallStatus(self.status)];
  }
  if (self.hasChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channel", NSStringFromBtCallChannel(self.channel)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  if (self.hasStatus) {
    [dictionary setObject: @(self.status) forKey: @"status"];
  }
  if (self.hasChannel) {
    [dictionary setObject: @(self.channel) forKey: @"channel"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtCallStatusRsp class]]) {
    return NO;
  }
  BtCallStatusRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasChannel == otherMessage.hasChannel &&
      (!self.hasChannel || self.channel == otherMessage.channel) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasChannel) {
    hashCode = hashCode * 31 + self.channel;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtCallStatusRspBuilder()
@property (strong) BtCallStatusRsp* resultBtCallStatusRsp;
@end

@implementation BtCallStatusRspBuilder
@synthesize resultBtCallStatusRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtCallStatusRsp = [[BtCallStatusRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtCallStatusRsp;
}
- (BtCallStatusRspBuilder*) clear {
  self.resultBtCallStatusRsp = [[BtCallStatusRsp alloc] init];
  return self;
}
- (BtCallStatusRspBuilder*) clone {
  return [BtCallStatusRsp builderWithPrototype:resultBtCallStatusRsp];
}
- (BtCallStatusRsp*) defaultInstance {
  return [BtCallStatusRsp defaultInstance];
}
- (BtCallStatusRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtCallStatusRsp*) buildPartial {
  BtCallStatusRsp* returnMe = resultBtCallStatusRsp;
  self.resultBtCallStatusRsp = nil;
  return returnMe;
}
- (BtCallStatusRspBuilder*) mergeFrom:(BtCallStatusRsp*) other {
  if (other == [BtCallStatusRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasChannel) {
    [self setChannel:other.channel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtCallStatusRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtCallStatusRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        BtCallStatus value = (BtCallStatus)[input readEnum];
        if (BtCallStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        BtCallChannel value = (BtCallChannel)[input readEnum];
        if (BtCallChannelIsValidValue(value)) {
          [self setChannel:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultBtCallStatusRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultBtCallStatusRsp.rspCode;
}
- (BtCallStatusRspBuilder*) setRspCode:(RspCode) value {
  resultBtCallStatusRsp.hasRspCode = YES;
  resultBtCallStatusRsp.rspCode = value;
  return self;
}
- (BtCallStatusRspBuilder*) clearRspCode {
  resultBtCallStatusRsp.hasRspCode = NO;
  resultBtCallStatusRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultBtCallStatusRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultBtCallStatusRsp.errorCode;
}
- (BtCallStatusRspBuilder*) setErrorCode:(ErrorCode) value {
  resultBtCallStatusRsp.hasErrorCode = YES;
  resultBtCallStatusRsp.errorCode = value;
  return self;
}
- (BtCallStatusRspBuilder*) clearErrorCode {
  resultBtCallStatusRsp.hasErrorCode = NO;
  resultBtCallStatusRsp.errorCode = ErrorCodeNormal;
  return self;
}
- (BOOL) hasStatus {
  return resultBtCallStatusRsp.hasStatus;
}
- (BtCallStatus) status {
  return resultBtCallStatusRsp.status;
}
- (BtCallStatusRspBuilder*) setStatus:(BtCallStatus) value {
  resultBtCallStatusRsp.hasStatus = YES;
  resultBtCallStatusRsp.status = value;
  return self;
}
- (BtCallStatusRspBuilder*) clearStatus {
  resultBtCallStatusRsp.hasStatus = NO;
  resultBtCallStatusRsp.status = BtCallStatusCallIn;
  return self;
}
- (BOOL) hasChannel {
  return resultBtCallStatusRsp.hasChannel;
}
- (BtCallChannel) channel {
  return resultBtCallStatusRsp.channel;
}
- (BtCallStatusRspBuilder*) setChannel:(BtCallChannel) value {
  resultBtCallStatusRsp.hasChannel = YES;
  resultBtCallStatusRsp.channel = value;
  return self;
}
- (BtCallStatusRspBuilder*) clearChannel {
  resultBtCallStatusRsp.hasChannel = NO;
  resultBtCallStatusRsp.channel = BtCallChannelBtcallChannel1;
  return self;
}
@end

@interface MicMuteSetReq ()
@property YesOrNo setMicMute;
@property BtCallChannel channel;
@end

@implementation MicMuteSetReq

- (BOOL) hasSetMicMute {
  return !!hasSetMicMute_;
}
- (void) setHasSetMicMute:(BOOL) _value_ {
  hasSetMicMute_ = !!_value_;
}
@synthesize setMicMute;
- (BOOL) hasChannel {
  return !!hasChannel_;
}
- (void) setHasChannel:(BOOL) _value_ {
  hasChannel_ = !!_value_;
}
@synthesize channel;
- (instancetype) init {
  if ((self = [super init])) {
    self.setMicMute = YesOrNoNo;
    self.channel = BtCallChannelBtcallChannel1;
  }
  return self;
}
static MicMuteSetReq* defaultMicMuteSetReqInstance = nil;
+ (void) initialize {
  if (self == [MicMuteSetReq class]) {
    defaultMicMuteSetReqInstance = [[MicMuteSetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMicMuteSetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultMicMuteSetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSetMicMute) {
    return NO;
  }
  if (!self.hasChannel) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSetMicMute) {
    [output writeEnum:1 value:self.setMicMute];
  }
  if (self.hasChannel) {
    [output writeEnum:2 value:self.channel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSetMicMute) {
    size_ += computeEnumSize(1, self.setMicMute);
  }
  if (self.hasChannel) {
    size_ += computeEnumSize(2, self.channel);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MicMuteSetReq*) parseFromData:(NSData*) data {
  return (MicMuteSetReq*)[[[MicMuteSetReq builder] mergeFromData:data] build];
}
+ (MicMuteSetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MicMuteSetReq*)[[[MicMuteSetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MicMuteSetReq*) parseFromInputStream:(NSInputStream*) input {
  return (MicMuteSetReq*)[[[MicMuteSetReq builder] mergeFromInputStream:input] build];
}
+ (MicMuteSetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MicMuteSetReq*)[[[MicMuteSetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MicMuteSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MicMuteSetReq*)[[[MicMuteSetReq builder] mergeFromCodedInputStream:input] build];
}
+ (MicMuteSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MicMuteSetReq*)[[[MicMuteSetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MicMuteSetReqBuilder*) builder {
  return [[MicMuteSetReqBuilder alloc] init];
}
+ (MicMuteSetReqBuilder*) builderWithPrototype:(MicMuteSetReq*) prototype {
  return [[MicMuteSetReq builder] mergeFrom:prototype];
}
- (MicMuteSetReqBuilder*) builder {
  return [MicMuteSetReq builder];
}
- (MicMuteSetReqBuilder*) toBuilder {
  return [MicMuteSetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSetMicMute) {
    [output appendFormat:@"%@%@: %@\n", indent, @"setMicMute", NSStringFromYesOrNo(self.setMicMute)];
  }
  if (self.hasChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channel", NSStringFromBtCallChannel(self.channel)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSetMicMute) {
    [dictionary setObject: @(self.setMicMute) forKey: @"setMicMute"];
  }
  if (self.hasChannel) {
    [dictionary setObject: @(self.channel) forKey: @"channel"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MicMuteSetReq class]]) {
    return NO;
  }
  MicMuteSetReq *otherMessage = other;
  return
      self.hasSetMicMute == otherMessage.hasSetMicMute &&
      (!self.hasSetMicMute || self.setMicMute == otherMessage.setMicMute) &&
      self.hasChannel == otherMessage.hasChannel &&
      (!self.hasChannel || self.channel == otherMessage.channel) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSetMicMute) {
    hashCode = hashCode * 31 + self.setMicMute;
  }
  if (self.hasChannel) {
    hashCode = hashCode * 31 + self.channel;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MicMuteSetReqBuilder()
@property (strong) MicMuteSetReq* resultMicMuteSetReq;
@end

@implementation MicMuteSetReqBuilder
@synthesize resultMicMuteSetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMicMuteSetReq = [[MicMuteSetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMicMuteSetReq;
}
- (MicMuteSetReqBuilder*) clear {
  self.resultMicMuteSetReq = [[MicMuteSetReq alloc] init];
  return self;
}
- (MicMuteSetReqBuilder*) clone {
  return [MicMuteSetReq builderWithPrototype:resultMicMuteSetReq];
}
- (MicMuteSetReq*) defaultInstance {
  return [MicMuteSetReq defaultInstance];
}
- (MicMuteSetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MicMuteSetReq*) buildPartial {
  MicMuteSetReq* returnMe = resultMicMuteSetReq;
  self.resultMicMuteSetReq = nil;
  return returnMe;
}
- (MicMuteSetReqBuilder*) mergeFrom:(MicMuteSetReq*) other {
  if (other == [MicMuteSetReq defaultInstance]) {
    return self;
  }
  if (other.hasSetMicMute) {
    [self setSetMicMute:other.setMicMute];
  }
  if (other.hasChannel) {
    [self setChannel:other.channel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MicMuteSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MicMuteSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        YesOrNo value = (YesOrNo)[input readEnum];
        if (YesOrNoIsValidValue(value)) {
          [self setSetMicMute:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        BtCallChannel value = (BtCallChannel)[input readEnum];
        if (BtCallChannelIsValidValue(value)) {
          [self setChannel:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasSetMicMute {
  return resultMicMuteSetReq.hasSetMicMute;
}
- (YesOrNo) setMicMute {
  return resultMicMuteSetReq.setMicMute;
}
- (MicMuteSetReqBuilder*) setSetMicMute:(YesOrNo) value {
  resultMicMuteSetReq.hasSetMicMute = YES;
  resultMicMuteSetReq.setMicMute = value;
  return self;
}
- (MicMuteSetReqBuilder*) clearSetMicMute {
  resultMicMuteSetReq.hasSetMicMute = NO;
  resultMicMuteSetReq.setMicMute = YesOrNoNo;
  return self;
}
- (BOOL) hasChannel {
  return resultMicMuteSetReq.hasChannel;
}
- (BtCallChannel) channel {
  return resultMicMuteSetReq.channel;
}
- (MicMuteSetReqBuilder*) setChannel:(BtCallChannel) value {
  resultMicMuteSetReq.hasChannel = YES;
  resultMicMuteSetReq.channel = value;
  return self;
}
- (MicMuteSetReqBuilder*) clearChannel {
  resultMicMuteSetReq.hasChannel = NO;
  resultMicMuteSetReq.channel = BtCallChannelBtcallChannel1;
  return self;
}
@end

@interface BtChannelSwitchNotification ()
@property BtChannel nBtChannel;
@end

@implementation BtChannelSwitchNotification

- (BOOL) hasNBtChannel {
  return !!hasNBtChannel_;
}
- (void) setHasNBtChannel:(BOOL) _value_ {
  hasNBtChannel_ = !!_value_;
}
@synthesize nBtChannel;
- (instancetype) init {
  if ((self = [super init])) {
    self.nBtChannel = BtChannelA2Dp;
  }
  return self;
}
static BtChannelSwitchNotification* defaultBtChannelSwitchNotificationInstance = nil;
+ (void) initialize {
  if (self == [BtChannelSwitchNotification class]) {
    defaultBtChannelSwitchNotificationInstance = [[BtChannelSwitchNotification alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtChannelSwitchNotificationInstance;
}
- (instancetype) defaultInstance {
  return defaultBtChannelSwitchNotificationInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNBtChannel) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNBtChannel) {
    [output writeEnum:1 value:self.nBtChannel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNBtChannel) {
    size_ += computeEnumSize(1, self.nBtChannel);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtChannelSwitchNotification*) parseFromData:(NSData*) data {
  return (BtChannelSwitchNotification*)[[[BtChannelSwitchNotification builder] mergeFromData:data] build];
}
+ (BtChannelSwitchNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtChannelSwitchNotification*)[[[BtChannelSwitchNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtChannelSwitchNotification*) parseFromInputStream:(NSInputStream*) input {
  return (BtChannelSwitchNotification*)[[[BtChannelSwitchNotification builder] mergeFromInputStream:input] build];
}
+ (BtChannelSwitchNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtChannelSwitchNotification*)[[[BtChannelSwitchNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtChannelSwitchNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtChannelSwitchNotification*)[[[BtChannelSwitchNotification builder] mergeFromCodedInputStream:input] build];
}
+ (BtChannelSwitchNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtChannelSwitchNotification*)[[[BtChannelSwitchNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtChannelSwitchNotificationBuilder*) builder {
  return [[BtChannelSwitchNotificationBuilder alloc] init];
}
+ (BtChannelSwitchNotificationBuilder*) builderWithPrototype:(BtChannelSwitchNotification*) prototype {
  return [[BtChannelSwitchNotification builder] mergeFrom:prototype];
}
- (BtChannelSwitchNotificationBuilder*) builder {
  return [BtChannelSwitchNotification builder];
}
- (BtChannelSwitchNotificationBuilder*) toBuilder {
  return [BtChannelSwitchNotification builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNBtChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nBtChannel", NSStringFromBtChannel(self.nBtChannel)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNBtChannel) {
    [dictionary setObject: @(self.nBtChannel) forKey: @"nBtChannel"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtChannelSwitchNotification class]]) {
    return NO;
  }
  BtChannelSwitchNotification *otherMessage = other;
  return
      self.hasNBtChannel == otherMessage.hasNBtChannel &&
      (!self.hasNBtChannel || self.nBtChannel == otherMessage.nBtChannel) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNBtChannel) {
    hashCode = hashCode * 31 + self.nBtChannel;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtChannelSwitchNotificationBuilder()
@property (strong) BtChannelSwitchNotification* resultBtChannelSwitchNotification;
@end

@implementation BtChannelSwitchNotificationBuilder
@synthesize resultBtChannelSwitchNotification;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtChannelSwitchNotification = [[BtChannelSwitchNotification alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtChannelSwitchNotification;
}
- (BtChannelSwitchNotificationBuilder*) clear {
  self.resultBtChannelSwitchNotification = [[BtChannelSwitchNotification alloc] init];
  return self;
}
- (BtChannelSwitchNotificationBuilder*) clone {
  return [BtChannelSwitchNotification builderWithPrototype:resultBtChannelSwitchNotification];
}
- (BtChannelSwitchNotification*) defaultInstance {
  return [BtChannelSwitchNotification defaultInstance];
}
- (BtChannelSwitchNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtChannelSwitchNotification*) buildPartial {
  BtChannelSwitchNotification* returnMe = resultBtChannelSwitchNotification;
  self.resultBtChannelSwitchNotification = nil;
  return returnMe;
}
- (BtChannelSwitchNotificationBuilder*) mergeFrom:(BtChannelSwitchNotification*) other {
  if (other == [BtChannelSwitchNotification defaultInstance]) {
    return self;
  }
  if (other.hasNBtChannel) {
    [self setNBtChannel:other.nBtChannel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtChannelSwitchNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtChannelSwitchNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        BtChannel value = (BtChannel)[input readEnum];
        if (BtChannelIsValidValue(value)) {
          [self setNBtChannel:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasNBtChannel {
  return resultBtChannelSwitchNotification.hasNBtChannel;
}
- (BtChannel) nBtChannel {
  return resultBtChannelSwitchNotification.nBtChannel;
}
- (BtChannelSwitchNotificationBuilder*) setNBtChannel:(BtChannel) value {
  resultBtChannelSwitchNotification.hasNBtChannel = YES;
  resultBtChannelSwitchNotification.nBtChannel = value;
  return self;
}
- (BtChannelSwitchNotificationBuilder*) clearNBtChannel {
  resultBtChannelSwitchNotification.hasNBtChannel = NO;
  resultBtChannelSwitchNotification.nBtChannel = BtChannelA2Dp;
  return self;
}
@end

@interface BtCallVolumeGetReq ()
@property BOOL getHfpVol;
@property BtCallChannel btCall;
@end

@implementation BtCallVolumeGetReq

- (BOOL) hasGetHfpVol {
  return !!hasGetHfpVol_;
}
- (void) setHasGetHfpVol:(BOOL) _value_ {
  hasGetHfpVol_ = !!_value_;
}
- (BOOL) getHfpVol {
  return !!getHfpVol_;
}
- (void) setGetHfpVol:(BOOL) _value_ {
  getHfpVol_ = !!_value_;
}
- (BOOL) hasBtCall {
  return !!hasBtCall_;
}
- (void) setHasBtCall:(BOOL) _value_ {
  hasBtCall_ = !!_value_;
}
@synthesize btCall;
- (instancetype) init {
  if ((self = [super init])) {
    self.getHfpVol = NO;
    self.btCall = BtCallChannelBtcallChannel1;
  }
  return self;
}
static BtCallVolumeGetReq* defaultBtCallVolumeGetReqInstance = nil;
+ (void) initialize {
  if (self == [BtCallVolumeGetReq class]) {
    defaultBtCallVolumeGetReqInstance = [[BtCallVolumeGetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtCallVolumeGetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultBtCallVolumeGetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetHfpVol) {
    return NO;
  }
  if (!self.hasBtCall) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetHfpVol) {
    [output writeBool:1 value:self.getHfpVol];
  }
  if (self.hasBtCall) {
    [output writeEnum:2 value:self.btCall];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetHfpVol) {
    size_ += computeBoolSize(1, self.getHfpVol);
  }
  if (self.hasBtCall) {
    size_ += computeEnumSize(2, self.btCall);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtCallVolumeGetReq*) parseFromData:(NSData*) data {
  return (BtCallVolumeGetReq*)[[[BtCallVolumeGetReq builder] mergeFromData:data] build];
}
+ (BtCallVolumeGetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallVolumeGetReq*)[[[BtCallVolumeGetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtCallVolumeGetReq*) parseFromInputStream:(NSInputStream*) input {
  return (BtCallVolumeGetReq*)[[[BtCallVolumeGetReq builder] mergeFromInputStream:input] build];
}
+ (BtCallVolumeGetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallVolumeGetReq*)[[[BtCallVolumeGetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallVolumeGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtCallVolumeGetReq*)[[[BtCallVolumeGetReq builder] mergeFromCodedInputStream:input] build];
}
+ (BtCallVolumeGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallVolumeGetReq*)[[[BtCallVolumeGetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallVolumeGetReqBuilder*) builder {
  return [[BtCallVolumeGetReqBuilder alloc] init];
}
+ (BtCallVolumeGetReqBuilder*) builderWithPrototype:(BtCallVolumeGetReq*) prototype {
  return [[BtCallVolumeGetReq builder] mergeFrom:prototype];
}
- (BtCallVolumeGetReqBuilder*) builder {
  return [BtCallVolumeGetReq builder];
}
- (BtCallVolumeGetReqBuilder*) toBuilder {
  return [BtCallVolumeGetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetHfpVol) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getHfpVol", [NSNumber numberWithBool:self.getHfpVol]];
  }
  if (self.hasBtCall) {
    [output appendFormat:@"%@%@: %@\n", indent, @"btCall", NSStringFromBtCallChannel(self.btCall)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetHfpVol) {
    [dictionary setObject: [NSNumber numberWithBool:self.getHfpVol] forKey: @"getHfpVol"];
  }
  if (self.hasBtCall) {
    [dictionary setObject: @(self.btCall) forKey: @"btCall"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtCallVolumeGetReq class]]) {
    return NO;
  }
  BtCallVolumeGetReq *otherMessage = other;
  return
      self.hasGetHfpVol == otherMessage.hasGetHfpVol &&
      (!self.hasGetHfpVol || self.getHfpVol == otherMessage.getHfpVol) &&
      self.hasBtCall == otherMessage.hasBtCall &&
      (!self.hasBtCall || self.btCall == otherMessage.btCall) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetHfpVol) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getHfpVol] hash];
  }
  if (self.hasBtCall) {
    hashCode = hashCode * 31 + self.btCall;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtCallVolumeGetReqBuilder()
@property (strong) BtCallVolumeGetReq* resultBtCallVolumeGetReq;
@end

@implementation BtCallVolumeGetReqBuilder
@synthesize resultBtCallVolumeGetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtCallVolumeGetReq = [[BtCallVolumeGetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtCallVolumeGetReq;
}
- (BtCallVolumeGetReqBuilder*) clear {
  self.resultBtCallVolumeGetReq = [[BtCallVolumeGetReq alloc] init];
  return self;
}
- (BtCallVolumeGetReqBuilder*) clone {
  return [BtCallVolumeGetReq builderWithPrototype:resultBtCallVolumeGetReq];
}
- (BtCallVolumeGetReq*) defaultInstance {
  return [BtCallVolumeGetReq defaultInstance];
}
- (BtCallVolumeGetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtCallVolumeGetReq*) buildPartial {
  BtCallVolumeGetReq* returnMe = resultBtCallVolumeGetReq;
  self.resultBtCallVolumeGetReq = nil;
  return returnMe;
}
- (BtCallVolumeGetReqBuilder*) mergeFrom:(BtCallVolumeGetReq*) other {
  if (other == [BtCallVolumeGetReq defaultInstance]) {
    return self;
  }
  if (other.hasGetHfpVol) {
    [self setGetHfpVol:other.getHfpVol];
  }
  if (other.hasBtCall) {
    [self setBtCall:other.btCall];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtCallVolumeGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtCallVolumeGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGetHfpVol:[input readBool]];
        break;
      }
      case 16: {
        BtCallChannel value = (BtCallChannel)[input readEnum];
        if (BtCallChannelIsValidValue(value)) {
          [self setBtCall:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasGetHfpVol {
  return resultBtCallVolumeGetReq.hasGetHfpVol;
}
- (BOOL) getHfpVol {
  return resultBtCallVolumeGetReq.getHfpVol;
}
- (BtCallVolumeGetReqBuilder*) setGetHfpVol:(BOOL) value {
  resultBtCallVolumeGetReq.hasGetHfpVol = YES;
  resultBtCallVolumeGetReq.getHfpVol = value;
  return self;
}
- (BtCallVolumeGetReqBuilder*) clearGetHfpVol {
  resultBtCallVolumeGetReq.hasGetHfpVol = NO;
  resultBtCallVolumeGetReq.getHfpVol = NO;
  return self;
}
- (BOOL) hasBtCall {
  return resultBtCallVolumeGetReq.hasBtCall;
}
- (BtCallChannel) btCall {
  return resultBtCallVolumeGetReq.btCall;
}
- (BtCallVolumeGetReqBuilder*) setBtCall:(BtCallChannel) value {
  resultBtCallVolumeGetReq.hasBtCall = YES;
  resultBtCallVolumeGetReq.btCall = value;
  return self;
}
- (BtCallVolumeGetReqBuilder*) clearBtCall {
  resultBtCallVolumeGetReq.hasBtCall = NO;
  resultBtCallVolumeGetReq.btCall = BtCallChannelBtcallChannel1;
  return self;
}
@end

@interface BtCallVolumeRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@property UInt32 hfpVol;
@property BtCallChannel btCallConnect;
@end

@implementation BtCallVolumeRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasHfpVol {
  return !!hasHfpVol_;
}
- (void) setHasHfpVol:(BOOL) _value_ {
  hasHfpVol_ = !!_value_;
}
@synthesize hfpVol;
- (BOOL) hasBtCallConnect {
  return !!hasBtCallConnect_;
}
- (void) setHasBtCallConnect:(BOOL) _value_ {
  hasBtCallConnect_ = !!_value_;
}
@synthesize btCallConnect;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
    self.hfpVol = 0;
    self.btCallConnect = BtCallChannelBtcallChannel1;
  }
  return self;
}
static BtCallVolumeRsp* defaultBtCallVolumeRspInstance = nil;
+ (void) initialize {
  if (self == [BtCallVolumeRsp class]) {
    defaultBtCallVolumeRspInstance = [[BtCallVolumeRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtCallVolumeRspInstance;
}
- (instancetype) defaultInstance {
  return defaultBtCallVolumeRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  if (self.hasHfpVol) {
    [output writeUInt32:3 value:self.hfpVol];
  }
  if (self.hasBtCallConnect) {
    [output writeEnum:4 value:self.btCallConnect];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  if (self.hasHfpVol) {
    size_ += computeUInt32Size(3, self.hfpVol);
  }
  if (self.hasBtCallConnect) {
    size_ += computeEnumSize(4, self.btCallConnect);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtCallVolumeRsp*) parseFromData:(NSData*) data {
  return (BtCallVolumeRsp*)[[[BtCallVolumeRsp builder] mergeFromData:data] build];
}
+ (BtCallVolumeRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallVolumeRsp*)[[[BtCallVolumeRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtCallVolumeRsp*) parseFromInputStream:(NSInputStream*) input {
  return (BtCallVolumeRsp*)[[[BtCallVolumeRsp builder] mergeFromInputStream:input] build];
}
+ (BtCallVolumeRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallVolumeRsp*)[[[BtCallVolumeRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallVolumeRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtCallVolumeRsp*)[[[BtCallVolumeRsp builder] mergeFromCodedInputStream:input] build];
}
+ (BtCallVolumeRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallVolumeRsp*)[[[BtCallVolumeRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallVolumeRspBuilder*) builder {
  return [[BtCallVolumeRspBuilder alloc] init];
}
+ (BtCallVolumeRspBuilder*) builderWithPrototype:(BtCallVolumeRsp*) prototype {
  return [[BtCallVolumeRsp builder] mergeFrom:prototype];
}
- (BtCallVolumeRspBuilder*) builder {
  return [BtCallVolumeRsp builder];
}
- (BtCallVolumeRspBuilder*) toBuilder {
  return [BtCallVolumeRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  if (self.hasHfpVol) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hfpVol", [NSNumber numberWithInteger:self.hfpVol]];
  }
  if (self.hasBtCallConnect) {
    [output appendFormat:@"%@%@: %@\n", indent, @"btCallConnect", NSStringFromBtCallChannel(self.btCallConnect)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  if (self.hasHfpVol) {
    [dictionary setObject: [NSNumber numberWithInteger:self.hfpVol] forKey: @"hfpVol"];
  }
  if (self.hasBtCallConnect) {
    [dictionary setObject: @(self.btCallConnect) forKey: @"btCallConnect"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtCallVolumeRsp class]]) {
    return NO;
  }
  BtCallVolumeRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasHfpVol == otherMessage.hasHfpVol &&
      (!self.hasHfpVol || self.hfpVol == otherMessage.hfpVol) &&
      self.hasBtCallConnect == otherMessage.hasBtCallConnect &&
      (!self.hasBtCallConnect || self.btCallConnect == otherMessage.btCallConnect) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  if (self.hasHfpVol) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.hfpVol] hash];
  }
  if (self.hasBtCallConnect) {
    hashCode = hashCode * 31 + self.btCallConnect;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtCallVolumeRspBuilder()
@property (strong) BtCallVolumeRsp* resultBtCallVolumeRsp;
@end

@implementation BtCallVolumeRspBuilder
@synthesize resultBtCallVolumeRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtCallVolumeRsp = [[BtCallVolumeRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtCallVolumeRsp;
}
- (BtCallVolumeRspBuilder*) clear {
  self.resultBtCallVolumeRsp = [[BtCallVolumeRsp alloc] init];
  return self;
}
- (BtCallVolumeRspBuilder*) clone {
  return [BtCallVolumeRsp builderWithPrototype:resultBtCallVolumeRsp];
}
- (BtCallVolumeRsp*) defaultInstance {
  return [BtCallVolumeRsp defaultInstance];
}
- (BtCallVolumeRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtCallVolumeRsp*) buildPartial {
  BtCallVolumeRsp* returnMe = resultBtCallVolumeRsp;
  self.resultBtCallVolumeRsp = nil;
  return returnMe;
}
- (BtCallVolumeRspBuilder*) mergeFrom:(BtCallVolumeRsp*) other {
  if (other == [BtCallVolumeRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasHfpVol) {
    [self setHfpVol:other.hfpVol];
  }
  if (other.hasBtCallConnect) {
    [self setBtCallConnect:other.btCallConnect];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtCallVolumeRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtCallVolumeRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setHfpVol:[input readUInt32]];
        break;
      }
      case 32: {
        BtCallChannel value = (BtCallChannel)[input readEnum];
        if (BtCallChannelIsValidValue(value)) {
          [self setBtCallConnect:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultBtCallVolumeRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultBtCallVolumeRsp.rspCode;
}
- (BtCallVolumeRspBuilder*) setRspCode:(RspCode) value {
  resultBtCallVolumeRsp.hasRspCode = YES;
  resultBtCallVolumeRsp.rspCode = value;
  return self;
}
- (BtCallVolumeRspBuilder*) clearRspCode {
  resultBtCallVolumeRsp.hasRspCode = NO;
  resultBtCallVolumeRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultBtCallVolumeRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultBtCallVolumeRsp.errorCode;
}
- (BtCallVolumeRspBuilder*) setErrorCode:(ErrorCode) value {
  resultBtCallVolumeRsp.hasErrorCode = YES;
  resultBtCallVolumeRsp.errorCode = value;
  return self;
}
- (BtCallVolumeRspBuilder*) clearErrorCode {
  resultBtCallVolumeRsp.hasErrorCode = NO;
  resultBtCallVolumeRsp.errorCode = ErrorCodeNormal;
  return self;
}
- (BOOL) hasHfpVol {
  return resultBtCallVolumeRsp.hasHfpVol;
}
- (UInt32) hfpVol {
  return resultBtCallVolumeRsp.hfpVol;
}
- (BtCallVolumeRspBuilder*) setHfpVol:(UInt32) value {
  resultBtCallVolumeRsp.hasHfpVol = YES;
  resultBtCallVolumeRsp.hfpVol = value;
  return self;
}
- (BtCallVolumeRspBuilder*) clearHfpVol {
  resultBtCallVolumeRsp.hasHfpVol = NO;
  resultBtCallVolumeRsp.hfpVol = 0;
  return self;
}
- (BOOL) hasBtCallConnect {
  return resultBtCallVolumeRsp.hasBtCallConnect;
}
- (BtCallChannel) btCallConnect {
  return resultBtCallVolumeRsp.btCallConnect;
}
- (BtCallVolumeRspBuilder*) setBtCallConnect:(BtCallChannel) value {
  resultBtCallVolumeRsp.hasBtCallConnect = YES;
  resultBtCallVolumeRsp.btCallConnect = value;
  return self;
}
- (BtCallVolumeRspBuilder*) clearBtCallConnect {
  resultBtCallVolumeRsp.hasBtCallConnect = NO;
  resultBtCallVolumeRsp.btCallConnect = BtCallChannelBtcallChannel1;
  return self;
}
@end

@interface BtCallVolumeSetReq ()
@property UInt32 hfpVol;
@property BtCallChannel btCallConnect;
@end

@implementation BtCallVolumeSetReq

- (BOOL) hasHfpVol {
  return !!hasHfpVol_;
}
- (void) setHasHfpVol:(BOOL) _value_ {
  hasHfpVol_ = !!_value_;
}
@synthesize hfpVol;
- (BOOL) hasBtCallConnect {
  return !!hasBtCallConnect_;
}
- (void) setHasBtCallConnect:(BOOL) _value_ {
  hasBtCallConnect_ = !!_value_;
}
@synthesize btCallConnect;
- (instancetype) init {
  if ((self = [super init])) {
    self.hfpVol = 0;
    self.btCallConnect = BtCallChannelBtcallChannel1;
  }
  return self;
}
static BtCallVolumeSetReq* defaultBtCallVolumeSetReqInstance = nil;
+ (void) initialize {
  if (self == [BtCallVolumeSetReq class]) {
    defaultBtCallVolumeSetReqInstance = [[BtCallVolumeSetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtCallVolumeSetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultBtCallVolumeSetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasHfpVol) {
    return NO;
  }
  if (!self.hasBtCallConnect) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHfpVol) {
    [output writeUInt32:1 value:self.hfpVol];
  }
  if (self.hasBtCallConnect) {
    [output writeEnum:2 value:self.btCallConnect];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasHfpVol) {
    size_ += computeUInt32Size(1, self.hfpVol);
  }
  if (self.hasBtCallConnect) {
    size_ += computeEnumSize(2, self.btCallConnect);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtCallVolumeSetReq*) parseFromData:(NSData*) data {
  return (BtCallVolumeSetReq*)[[[BtCallVolumeSetReq builder] mergeFromData:data] build];
}
+ (BtCallVolumeSetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallVolumeSetReq*)[[[BtCallVolumeSetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtCallVolumeSetReq*) parseFromInputStream:(NSInputStream*) input {
  return (BtCallVolumeSetReq*)[[[BtCallVolumeSetReq builder] mergeFromInputStream:input] build];
}
+ (BtCallVolumeSetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallVolumeSetReq*)[[[BtCallVolumeSetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallVolumeSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtCallVolumeSetReq*)[[[BtCallVolumeSetReq builder] mergeFromCodedInputStream:input] build];
}
+ (BtCallVolumeSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtCallVolumeSetReq*)[[[BtCallVolumeSetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtCallVolumeSetReqBuilder*) builder {
  return [[BtCallVolumeSetReqBuilder alloc] init];
}
+ (BtCallVolumeSetReqBuilder*) builderWithPrototype:(BtCallVolumeSetReq*) prototype {
  return [[BtCallVolumeSetReq builder] mergeFrom:prototype];
}
- (BtCallVolumeSetReqBuilder*) builder {
  return [BtCallVolumeSetReq builder];
}
- (BtCallVolumeSetReqBuilder*) toBuilder {
  return [BtCallVolumeSetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasHfpVol) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hfpVol", [NSNumber numberWithInteger:self.hfpVol]];
  }
  if (self.hasBtCallConnect) {
    [output appendFormat:@"%@%@: %@\n", indent, @"btCallConnect", NSStringFromBtCallChannel(self.btCallConnect)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasHfpVol) {
    [dictionary setObject: [NSNumber numberWithInteger:self.hfpVol] forKey: @"hfpVol"];
  }
  if (self.hasBtCallConnect) {
    [dictionary setObject: @(self.btCallConnect) forKey: @"btCallConnect"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtCallVolumeSetReq class]]) {
    return NO;
  }
  BtCallVolumeSetReq *otherMessage = other;
  return
      self.hasHfpVol == otherMessage.hasHfpVol &&
      (!self.hasHfpVol || self.hfpVol == otherMessage.hfpVol) &&
      self.hasBtCallConnect == otherMessage.hasBtCallConnect &&
      (!self.hasBtCallConnect || self.btCallConnect == otherMessage.btCallConnect) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasHfpVol) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.hfpVol] hash];
  }
  if (self.hasBtCallConnect) {
    hashCode = hashCode * 31 + self.btCallConnect;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtCallVolumeSetReqBuilder()
@property (strong) BtCallVolumeSetReq* resultBtCallVolumeSetReq;
@end

@implementation BtCallVolumeSetReqBuilder
@synthesize resultBtCallVolumeSetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtCallVolumeSetReq = [[BtCallVolumeSetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtCallVolumeSetReq;
}
- (BtCallVolumeSetReqBuilder*) clear {
  self.resultBtCallVolumeSetReq = [[BtCallVolumeSetReq alloc] init];
  return self;
}
- (BtCallVolumeSetReqBuilder*) clone {
  return [BtCallVolumeSetReq builderWithPrototype:resultBtCallVolumeSetReq];
}
- (BtCallVolumeSetReq*) defaultInstance {
  return [BtCallVolumeSetReq defaultInstance];
}
- (BtCallVolumeSetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtCallVolumeSetReq*) buildPartial {
  BtCallVolumeSetReq* returnMe = resultBtCallVolumeSetReq;
  self.resultBtCallVolumeSetReq = nil;
  return returnMe;
}
- (BtCallVolumeSetReqBuilder*) mergeFrom:(BtCallVolumeSetReq*) other {
  if (other == [BtCallVolumeSetReq defaultInstance]) {
    return self;
  }
  if (other.hasHfpVol) {
    [self setHfpVol:other.hfpVol];
  }
  if (other.hasBtCallConnect) {
    [self setBtCallConnect:other.btCallConnect];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtCallVolumeSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtCallVolumeSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setHfpVol:[input readUInt32]];
        break;
      }
      case 16: {
        BtCallChannel value = (BtCallChannel)[input readEnum];
        if (BtCallChannelIsValidValue(value)) {
          [self setBtCallConnect:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasHfpVol {
  return resultBtCallVolumeSetReq.hasHfpVol;
}
- (UInt32) hfpVol {
  return resultBtCallVolumeSetReq.hfpVol;
}
- (BtCallVolumeSetReqBuilder*) setHfpVol:(UInt32) value {
  resultBtCallVolumeSetReq.hasHfpVol = YES;
  resultBtCallVolumeSetReq.hfpVol = value;
  return self;
}
- (BtCallVolumeSetReqBuilder*) clearHfpVol {
  resultBtCallVolumeSetReq.hasHfpVol = NO;
  resultBtCallVolumeSetReq.hfpVol = 0;
  return self;
}
- (BOOL) hasBtCallConnect {
  return resultBtCallVolumeSetReq.hasBtCallConnect;
}
- (BtCallChannel) btCallConnect {
  return resultBtCallVolumeSetReq.btCallConnect;
}
- (BtCallVolumeSetReqBuilder*) setBtCallConnect:(BtCallChannel) value {
  resultBtCallVolumeSetReq.hasBtCallConnect = YES;
  resultBtCallVolumeSetReq.btCallConnect = value;
  return self;
}
- (BtCallVolumeSetReqBuilder*) clearBtCallConnect {
  resultBtCallVolumeSetReq.hasBtCallConnect = NO;
  resultBtCallVolumeSetReq.btCallConnect = BtCallChannelBtcallChannel1;
  return self;
}
@end

@interface PhoneBookSyncReq ()
@property YesOrNo getPhoneBook;
@end

@implementation PhoneBookSyncReq

- (BOOL) hasGetPhoneBook {
  return !!hasGetPhoneBook_;
}
- (void) setHasGetPhoneBook:(BOOL) _value_ {
  hasGetPhoneBook_ = !!_value_;
}
@synthesize getPhoneBook;
- (instancetype) init {
  if ((self = [super init])) {
    self.getPhoneBook = YesOrNoNo;
  }
  return self;
}
static PhoneBookSyncReq* defaultPhoneBookSyncReqInstance = nil;
+ (void) initialize {
  if (self == [PhoneBookSyncReq class]) {
    defaultPhoneBookSyncReqInstance = [[PhoneBookSyncReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPhoneBookSyncReqInstance;
}
- (instancetype) defaultInstance {
  return defaultPhoneBookSyncReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetPhoneBook) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetPhoneBook) {
    [output writeEnum:1 value:self.getPhoneBook];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetPhoneBook) {
    size_ += computeEnumSize(1, self.getPhoneBook);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PhoneBookSyncReq*) parseFromData:(NSData*) data {
  return (PhoneBookSyncReq*)[[[PhoneBookSyncReq builder] mergeFromData:data] build];
}
+ (PhoneBookSyncReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneBookSyncReq*)[[[PhoneBookSyncReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PhoneBookSyncReq*) parseFromInputStream:(NSInputStream*) input {
  return (PhoneBookSyncReq*)[[[PhoneBookSyncReq builder] mergeFromInputStream:input] build];
}
+ (PhoneBookSyncReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneBookSyncReq*)[[[PhoneBookSyncReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PhoneBookSyncReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PhoneBookSyncReq*)[[[PhoneBookSyncReq builder] mergeFromCodedInputStream:input] build];
}
+ (PhoneBookSyncReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneBookSyncReq*)[[[PhoneBookSyncReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PhoneBookSyncReqBuilder*) builder {
  return [[PhoneBookSyncReqBuilder alloc] init];
}
+ (PhoneBookSyncReqBuilder*) builderWithPrototype:(PhoneBookSyncReq*) prototype {
  return [[PhoneBookSyncReq builder] mergeFrom:prototype];
}
- (PhoneBookSyncReqBuilder*) builder {
  return [PhoneBookSyncReq builder];
}
- (PhoneBookSyncReqBuilder*) toBuilder {
  return [PhoneBookSyncReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetPhoneBook) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getPhoneBook", NSStringFromYesOrNo(self.getPhoneBook)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetPhoneBook) {
    [dictionary setObject: @(self.getPhoneBook) forKey: @"getPhoneBook"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PhoneBookSyncReq class]]) {
    return NO;
  }
  PhoneBookSyncReq *otherMessage = other;
  return
      self.hasGetPhoneBook == otherMessage.hasGetPhoneBook &&
      (!self.hasGetPhoneBook || self.getPhoneBook == otherMessage.getPhoneBook) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetPhoneBook) {
    hashCode = hashCode * 31 + self.getPhoneBook;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PhoneBookSyncReqBuilder()
@property (strong) PhoneBookSyncReq* resultPhoneBookSyncReq;
@end

@implementation PhoneBookSyncReqBuilder
@synthesize resultPhoneBookSyncReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPhoneBookSyncReq = [[PhoneBookSyncReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPhoneBookSyncReq;
}
- (PhoneBookSyncReqBuilder*) clear {
  self.resultPhoneBookSyncReq = [[PhoneBookSyncReq alloc] init];
  return self;
}
- (PhoneBookSyncReqBuilder*) clone {
  return [PhoneBookSyncReq builderWithPrototype:resultPhoneBookSyncReq];
}
- (PhoneBookSyncReq*) defaultInstance {
  return [PhoneBookSyncReq defaultInstance];
}
- (PhoneBookSyncReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PhoneBookSyncReq*) buildPartial {
  PhoneBookSyncReq* returnMe = resultPhoneBookSyncReq;
  self.resultPhoneBookSyncReq = nil;
  return returnMe;
}
- (PhoneBookSyncReqBuilder*) mergeFrom:(PhoneBookSyncReq*) other {
  if (other == [PhoneBookSyncReq defaultInstance]) {
    return self;
  }
  if (other.hasGetPhoneBook) {
    [self setGetPhoneBook:other.getPhoneBook];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PhoneBookSyncReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PhoneBookSyncReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        YesOrNo value = (YesOrNo)[input readEnum];
        if (YesOrNoIsValidValue(value)) {
          [self setGetPhoneBook:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasGetPhoneBook {
  return resultPhoneBookSyncReq.hasGetPhoneBook;
}
- (YesOrNo) getPhoneBook {
  return resultPhoneBookSyncReq.getPhoneBook;
}
- (PhoneBookSyncReqBuilder*) setGetPhoneBook:(YesOrNo) value {
  resultPhoneBookSyncReq.hasGetPhoneBook = YES;
  resultPhoneBookSyncReq.getPhoneBook = value;
  return self;
}
- (PhoneBookSyncReqBuilder*) clearGetPhoneBook {
  resultPhoneBookSyncReq.hasGetPhoneBook = NO;
  resultPhoneBookSyncReq.getPhoneBook = YesOrNoNo;
  return self;
}
@end

@interface PhoneBookAutoDownloadReq ()
@property YesOrNo getPhoneBook;
@end

@implementation PhoneBookAutoDownloadReq

- (BOOL) hasGetPhoneBook {
  return !!hasGetPhoneBook_;
}
- (void) setHasGetPhoneBook:(BOOL) _value_ {
  hasGetPhoneBook_ = !!_value_;
}
@synthesize getPhoneBook;
- (instancetype) init {
  if ((self = [super init])) {
    self.getPhoneBook = YesOrNoNo;
  }
  return self;
}
static PhoneBookAutoDownloadReq* defaultPhoneBookAutoDownloadReqInstance = nil;
+ (void) initialize {
  if (self == [PhoneBookAutoDownloadReq class]) {
    defaultPhoneBookAutoDownloadReqInstance = [[PhoneBookAutoDownloadReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPhoneBookAutoDownloadReqInstance;
}
- (instancetype) defaultInstance {
  return defaultPhoneBookAutoDownloadReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetPhoneBook) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetPhoneBook) {
    [output writeEnum:1 value:self.getPhoneBook];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetPhoneBook) {
    size_ += computeEnumSize(1, self.getPhoneBook);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PhoneBookAutoDownloadReq*) parseFromData:(NSData*) data {
  return (PhoneBookAutoDownloadReq*)[[[PhoneBookAutoDownloadReq builder] mergeFromData:data] build];
}
+ (PhoneBookAutoDownloadReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneBookAutoDownloadReq*)[[[PhoneBookAutoDownloadReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PhoneBookAutoDownloadReq*) parseFromInputStream:(NSInputStream*) input {
  return (PhoneBookAutoDownloadReq*)[[[PhoneBookAutoDownloadReq builder] mergeFromInputStream:input] build];
}
+ (PhoneBookAutoDownloadReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneBookAutoDownloadReq*)[[[PhoneBookAutoDownloadReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PhoneBookAutoDownloadReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PhoneBookAutoDownloadReq*)[[[PhoneBookAutoDownloadReq builder] mergeFromCodedInputStream:input] build];
}
+ (PhoneBookAutoDownloadReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneBookAutoDownloadReq*)[[[PhoneBookAutoDownloadReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PhoneBookAutoDownloadReqBuilder*) builder {
  return [[PhoneBookAutoDownloadReqBuilder alloc] init];
}
+ (PhoneBookAutoDownloadReqBuilder*) builderWithPrototype:(PhoneBookAutoDownloadReq*) prototype {
  return [[PhoneBookAutoDownloadReq builder] mergeFrom:prototype];
}
- (PhoneBookAutoDownloadReqBuilder*) builder {
  return [PhoneBookAutoDownloadReq builder];
}
- (PhoneBookAutoDownloadReqBuilder*) toBuilder {
  return [PhoneBookAutoDownloadReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetPhoneBook) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getPhoneBook", NSStringFromYesOrNo(self.getPhoneBook)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetPhoneBook) {
    [dictionary setObject: @(self.getPhoneBook) forKey: @"getPhoneBook"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PhoneBookAutoDownloadReq class]]) {
    return NO;
  }
  PhoneBookAutoDownloadReq *otherMessage = other;
  return
      self.hasGetPhoneBook == otherMessage.hasGetPhoneBook &&
      (!self.hasGetPhoneBook || self.getPhoneBook == otherMessage.getPhoneBook) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetPhoneBook) {
    hashCode = hashCode * 31 + self.getPhoneBook;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PhoneBookAutoDownloadReqBuilder()
@property (strong) PhoneBookAutoDownloadReq* resultPhoneBookAutoDownloadReq;
@end

@implementation PhoneBookAutoDownloadReqBuilder
@synthesize resultPhoneBookAutoDownloadReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPhoneBookAutoDownloadReq = [[PhoneBookAutoDownloadReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPhoneBookAutoDownloadReq;
}
- (PhoneBookAutoDownloadReqBuilder*) clear {
  self.resultPhoneBookAutoDownloadReq = [[PhoneBookAutoDownloadReq alloc] init];
  return self;
}
- (PhoneBookAutoDownloadReqBuilder*) clone {
  return [PhoneBookAutoDownloadReq builderWithPrototype:resultPhoneBookAutoDownloadReq];
}
- (PhoneBookAutoDownloadReq*) defaultInstance {
  return [PhoneBookAutoDownloadReq defaultInstance];
}
- (PhoneBookAutoDownloadReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PhoneBookAutoDownloadReq*) buildPartial {
  PhoneBookAutoDownloadReq* returnMe = resultPhoneBookAutoDownloadReq;
  self.resultPhoneBookAutoDownloadReq = nil;
  return returnMe;
}
- (PhoneBookAutoDownloadReqBuilder*) mergeFrom:(PhoneBookAutoDownloadReq*) other {
  if (other == [PhoneBookAutoDownloadReq defaultInstance]) {
    return self;
  }
  if (other.hasGetPhoneBook) {
    [self setGetPhoneBook:other.getPhoneBook];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PhoneBookAutoDownloadReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PhoneBookAutoDownloadReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        YesOrNo value = (YesOrNo)[input readEnum];
        if (YesOrNoIsValidValue(value)) {
          [self setGetPhoneBook:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasGetPhoneBook {
  return resultPhoneBookAutoDownloadReq.hasGetPhoneBook;
}
- (YesOrNo) getPhoneBook {
  return resultPhoneBookAutoDownloadReq.getPhoneBook;
}
- (PhoneBookAutoDownloadReqBuilder*) setGetPhoneBook:(YesOrNo) value {
  resultPhoneBookAutoDownloadReq.hasGetPhoneBook = YES;
  resultPhoneBookAutoDownloadReq.getPhoneBook = value;
  return self;
}
- (PhoneBookAutoDownloadReqBuilder*) clearGetPhoneBook {
  resultPhoneBookAutoDownloadReq.hasGetPhoneBook = NO;
  resultPhoneBookAutoDownloadReq.getPhoneBook = YesOrNoNo;
  return self;
}
@end

@interface SoundChannelReq ()
@property SoundChannel setSoundChannel;
@end

@implementation SoundChannelReq

- (BOOL) hasSetSoundChannel {
  return !!hasSetSoundChannel_;
}
- (void) setHasSetSoundChannel:(BOOL) _value_ {
  hasSetSoundChannel_ = !!_value_;
}
@synthesize setSoundChannel;
- (instancetype) init {
  if ((self = [super init])) {
    self.setSoundChannel = SoundChannelSoundChannelA2Dp;
  }
  return self;
}
static SoundChannelReq* defaultSoundChannelReqInstance = nil;
+ (void) initialize {
  if (self == [SoundChannelReq class]) {
    defaultSoundChannelReqInstance = [[SoundChannelReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSoundChannelReqInstance;
}
- (instancetype) defaultInstance {
  return defaultSoundChannelReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSetSoundChannel) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSetSoundChannel) {
    [output writeEnum:1 value:self.setSoundChannel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSetSoundChannel) {
    size_ += computeEnumSize(1, self.setSoundChannel);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SoundChannelReq*) parseFromData:(NSData*) data {
  return (SoundChannelReq*)[[[SoundChannelReq builder] mergeFromData:data] build];
}
+ (SoundChannelReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SoundChannelReq*)[[[SoundChannelReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SoundChannelReq*) parseFromInputStream:(NSInputStream*) input {
  return (SoundChannelReq*)[[[SoundChannelReq builder] mergeFromInputStream:input] build];
}
+ (SoundChannelReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SoundChannelReq*)[[[SoundChannelReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SoundChannelReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SoundChannelReq*)[[[SoundChannelReq builder] mergeFromCodedInputStream:input] build];
}
+ (SoundChannelReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SoundChannelReq*)[[[SoundChannelReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SoundChannelReqBuilder*) builder {
  return [[SoundChannelReqBuilder alloc] init];
}
+ (SoundChannelReqBuilder*) builderWithPrototype:(SoundChannelReq*) prototype {
  return [[SoundChannelReq builder] mergeFrom:prototype];
}
- (SoundChannelReqBuilder*) builder {
  return [SoundChannelReq builder];
}
- (SoundChannelReqBuilder*) toBuilder {
  return [SoundChannelReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSetSoundChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"setSoundChannel", NSStringFromSoundChannel(self.setSoundChannel)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSetSoundChannel) {
    [dictionary setObject: @(self.setSoundChannel) forKey: @"setSoundChannel"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SoundChannelReq class]]) {
    return NO;
  }
  SoundChannelReq *otherMessage = other;
  return
      self.hasSetSoundChannel == otherMessage.hasSetSoundChannel &&
      (!self.hasSetSoundChannel || self.setSoundChannel == otherMessage.setSoundChannel) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSetSoundChannel) {
    hashCode = hashCode * 31 + self.setSoundChannel;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SoundChannelReqBuilder()
@property (strong) SoundChannelReq* resultSoundChannelReq;
@end

@implementation SoundChannelReqBuilder
@synthesize resultSoundChannelReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSoundChannelReq = [[SoundChannelReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSoundChannelReq;
}
- (SoundChannelReqBuilder*) clear {
  self.resultSoundChannelReq = [[SoundChannelReq alloc] init];
  return self;
}
- (SoundChannelReqBuilder*) clone {
  return [SoundChannelReq builderWithPrototype:resultSoundChannelReq];
}
- (SoundChannelReq*) defaultInstance {
  return [SoundChannelReq defaultInstance];
}
- (SoundChannelReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SoundChannelReq*) buildPartial {
  SoundChannelReq* returnMe = resultSoundChannelReq;
  self.resultSoundChannelReq = nil;
  return returnMe;
}
- (SoundChannelReqBuilder*) mergeFrom:(SoundChannelReq*) other {
  if (other == [SoundChannelReq defaultInstance]) {
    return self;
  }
  if (other.hasSetSoundChannel) {
    [self setSetSoundChannel:other.setSoundChannel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SoundChannelReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SoundChannelReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        SoundChannel value = (SoundChannel)[input readEnum];
        if (SoundChannelIsValidValue(value)) {
          [self setSetSoundChannel:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasSetSoundChannel {
  return resultSoundChannelReq.hasSetSoundChannel;
}
- (SoundChannel) setSoundChannel {
  return resultSoundChannelReq.setSoundChannel;
}
- (SoundChannelReqBuilder*) setSetSoundChannel:(SoundChannel) value {
  resultSoundChannelReq.hasSetSoundChannel = YES;
  resultSoundChannelReq.setSoundChannel = value;
  return self;
}
- (SoundChannelReqBuilder*) clearSetSoundChannel {
  resultSoundChannelReq.hasSetSoundChannel = NO;
  resultSoundChannelReq.setSoundChannel = SoundChannelSoundChannelA2Dp;
  return self;
}
@end

@interface BtStatusGetReq ()
@property BOOL getStatus;
@property BOOL getDeviceName;
@property BOOL getDeviceAddress;
@end

@implementation BtStatusGetReq

- (BOOL) hasGetStatus {
  return !!hasGetStatus_;
}
- (void) setHasGetStatus:(BOOL) _value_ {
  hasGetStatus_ = !!_value_;
}
- (BOOL) getStatus {
  return !!getStatus_;
}
- (void) setGetStatus:(BOOL) _value_ {
  getStatus_ = !!_value_;
}
- (BOOL) hasGetDeviceName {
  return !!hasGetDeviceName_;
}
- (void) setHasGetDeviceName:(BOOL) _value_ {
  hasGetDeviceName_ = !!_value_;
}
- (BOOL) getDeviceName {
  return !!getDeviceName_;
}
- (void) setGetDeviceName:(BOOL) _value_ {
  getDeviceName_ = !!_value_;
}
- (BOOL) hasGetDeviceAddress {
  return !!hasGetDeviceAddress_;
}
- (void) setHasGetDeviceAddress:(BOOL) _value_ {
  hasGetDeviceAddress_ = !!_value_;
}
- (BOOL) getDeviceAddress {
  return !!getDeviceAddress_;
}
- (void) setGetDeviceAddress:(BOOL) _value_ {
  getDeviceAddress_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.getStatus = NO;
    self.getDeviceName = NO;
    self.getDeviceAddress = NO;
  }
  return self;
}
static BtStatusGetReq* defaultBtStatusGetReqInstance = nil;
+ (void) initialize {
  if (self == [BtStatusGetReq class]) {
    defaultBtStatusGetReqInstance = [[BtStatusGetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtStatusGetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultBtStatusGetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetStatus) {
    [output writeBool:1 value:self.getStatus];
  }
  if (self.hasGetDeviceName) {
    [output writeBool:2 value:self.getDeviceName];
  }
  if (self.hasGetDeviceAddress) {
    [output writeBool:3 value:self.getDeviceAddress];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetStatus) {
    size_ += computeBoolSize(1, self.getStatus);
  }
  if (self.hasGetDeviceName) {
    size_ += computeBoolSize(2, self.getDeviceName);
  }
  if (self.hasGetDeviceAddress) {
    size_ += computeBoolSize(3, self.getDeviceAddress);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtStatusGetReq*) parseFromData:(NSData*) data {
  return (BtStatusGetReq*)[[[BtStatusGetReq builder] mergeFromData:data] build];
}
+ (BtStatusGetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtStatusGetReq*)[[[BtStatusGetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtStatusGetReq*) parseFromInputStream:(NSInputStream*) input {
  return (BtStatusGetReq*)[[[BtStatusGetReq builder] mergeFromInputStream:input] build];
}
+ (BtStatusGetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtStatusGetReq*)[[[BtStatusGetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtStatusGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtStatusGetReq*)[[[BtStatusGetReq builder] mergeFromCodedInputStream:input] build];
}
+ (BtStatusGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtStatusGetReq*)[[[BtStatusGetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtStatusGetReqBuilder*) builder {
  return [[BtStatusGetReqBuilder alloc] init];
}
+ (BtStatusGetReqBuilder*) builderWithPrototype:(BtStatusGetReq*) prototype {
  return [[BtStatusGetReq builder] mergeFrom:prototype];
}
- (BtStatusGetReqBuilder*) builder {
  return [BtStatusGetReq builder];
}
- (BtStatusGetReqBuilder*) toBuilder {
  return [BtStatusGetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getStatus", [NSNumber numberWithBool:self.getStatus]];
  }
  if (self.hasGetDeviceName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getDeviceName", [NSNumber numberWithBool:self.getDeviceName]];
  }
  if (self.hasGetDeviceAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getDeviceAddress", [NSNumber numberWithBool:self.getDeviceAddress]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetStatus) {
    [dictionary setObject: [NSNumber numberWithBool:self.getStatus] forKey: @"getStatus"];
  }
  if (self.hasGetDeviceName) {
    [dictionary setObject: [NSNumber numberWithBool:self.getDeviceName] forKey: @"getDeviceName"];
  }
  if (self.hasGetDeviceAddress) {
    [dictionary setObject: [NSNumber numberWithBool:self.getDeviceAddress] forKey: @"getDeviceAddress"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtStatusGetReq class]]) {
    return NO;
  }
  BtStatusGetReq *otherMessage = other;
  return
      self.hasGetStatus == otherMessage.hasGetStatus &&
      (!self.hasGetStatus || self.getStatus == otherMessage.getStatus) &&
      self.hasGetDeviceName == otherMessage.hasGetDeviceName &&
      (!self.hasGetDeviceName || self.getDeviceName == otherMessage.getDeviceName) &&
      self.hasGetDeviceAddress == otherMessage.hasGetDeviceAddress &&
      (!self.hasGetDeviceAddress || self.getDeviceAddress == otherMessage.getDeviceAddress) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getStatus] hash];
  }
  if (self.hasGetDeviceName) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getDeviceName] hash];
  }
  if (self.hasGetDeviceAddress) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getDeviceAddress] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtStatusGetReqBuilder()
@property (strong) BtStatusGetReq* resultBtStatusGetReq;
@end

@implementation BtStatusGetReqBuilder
@synthesize resultBtStatusGetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtStatusGetReq = [[BtStatusGetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtStatusGetReq;
}
- (BtStatusGetReqBuilder*) clear {
  self.resultBtStatusGetReq = [[BtStatusGetReq alloc] init];
  return self;
}
- (BtStatusGetReqBuilder*) clone {
  return [BtStatusGetReq builderWithPrototype:resultBtStatusGetReq];
}
- (BtStatusGetReq*) defaultInstance {
  return [BtStatusGetReq defaultInstance];
}
- (BtStatusGetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtStatusGetReq*) buildPartial {
  BtStatusGetReq* returnMe = resultBtStatusGetReq;
  self.resultBtStatusGetReq = nil;
  return returnMe;
}
- (BtStatusGetReqBuilder*) mergeFrom:(BtStatusGetReq*) other {
  if (other == [BtStatusGetReq defaultInstance]) {
    return self;
  }
  if (other.hasGetStatus) {
    [self setGetStatus:other.getStatus];
  }
  if (other.hasGetDeviceName) {
    [self setGetDeviceName:other.getDeviceName];
  }
  if (other.hasGetDeviceAddress) {
    [self setGetDeviceAddress:other.getDeviceAddress];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtStatusGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtStatusGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGetStatus:[input readBool]];
        break;
      }
      case 16: {
        [self setGetDeviceName:[input readBool]];
        break;
      }
      case 24: {
        [self setGetDeviceAddress:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasGetStatus {
  return resultBtStatusGetReq.hasGetStatus;
}
- (BOOL) getStatus {
  return resultBtStatusGetReq.getStatus;
}
- (BtStatusGetReqBuilder*) setGetStatus:(BOOL) value {
  resultBtStatusGetReq.hasGetStatus = YES;
  resultBtStatusGetReq.getStatus = value;
  return self;
}
- (BtStatusGetReqBuilder*) clearGetStatus {
  resultBtStatusGetReq.hasGetStatus = NO;
  resultBtStatusGetReq.getStatus = NO;
  return self;
}
- (BOOL) hasGetDeviceName {
  return resultBtStatusGetReq.hasGetDeviceName;
}
- (BOOL) getDeviceName {
  return resultBtStatusGetReq.getDeviceName;
}
- (BtStatusGetReqBuilder*) setGetDeviceName:(BOOL) value {
  resultBtStatusGetReq.hasGetDeviceName = YES;
  resultBtStatusGetReq.getDeviceName = value;
  return self;
}
- (BtStatusGetReqBuilder*) clearGetDeviceName {
  resultBtStatusGetReq.hasGetDeviceName = NO;
  resultBtStatusGetReq.getDeviceName = NO;
  return self;
}
- (BOOL) hasGetDeviceAddress {
  return resultBtStatusGetReq.hasGetDeviceAddress;
}
- (BOOL) getDeviceAddress {
  return resultBtStatusGetReq.getDeviceAddress;
}
- (BtStatusGetReqBuilder*) setGetDeviceAddress:(BOOL) value {
  resultBtStatusGetReq.hasGetDeviceAddress = YES;
  resultBtStatusGetReq.getDeviceAddress = value;
  return self;
}
- (BtStatusGetReqBuilder*) clearGetDeviceAddress {
  resultBtStatusGetReq.hasGetDeviceAddress = NO;
  resultBtStatusGetReq.getDeviceAddress = NO;
  return self;
}
@end

@interface BtStatusRsp ()
@property BtStatus status;
@property (strong) NSString* btDeviceName;
@property (strong) NSString* btDeviceAddress;
@end

@implementation BtStatusRsp

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasBtDeviceName {
  return !!hasBtDeviceName_;
}
- (void) setHasBtDeviceName:(BOOL) _value_ {
  hasBtDeviceName_ = !!_value_;
}
@synthesize btDeviceName;
- (BOOL) hasBtDeviceAddress {
  return !!hasBtDeviceAddress_;
}
- (void) setHasBtDeviceAddress:(BOOL) _value_ {
  hasBtDeviceAddress_ = !!_value_;
}
@synthesize btDeviceAddress;
- (instancetype) init {
  if ((self = [super init])) {
    self.status = BtStatusBtOpen;
    self.btDeviceName = @"";
    self.btDeviceAddress = @"";
  }
  return self;
}
static BtStatusRsp* defaultBtStatusRspInstance = nil;
+ (void) initialize {
  if (self == [BtStatusRsp class]) {
    defaultBtStatusRspInstance = [[BtStatusRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtStatusRspInstance;
}
- (instancetype) defaultInstance {
  return defaultBtStatusRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeEnum:1 value:self.status];
  }
  if (self.hasBtDeviceName) {
    [output writeString:2 value:self.btDeviceName];
  }
  if (self.hasBtDeviceAddress) {
    [output writeString:3 value:self.btDeviceAddress];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeEnumSize(1, self.status);
  }
  if (self.hasBtDeviceName) {
    size_ += computeStringSize(2, self.btDeviceName);
  }
  if (self.hasBtDeviceAddress) {
    size_ += computeStringSize(3, self.btDeviceAddress);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtStatusRsp*) parseFromData:(NSData*) data {
  return (BtStatusRsp*)[[[BtStatusRsp builder] mergeFromData:data] build];
}
+ (BtStatusRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtStatusRsp*)[[[BtStatusRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtStatusRsp*) parseFromInputStream:(NSInputStream*) input {
  return (BtStatusRsp*)[[[BtStatusRsp builder] mergeFromInputStream:input] build];
}
+ (BtStatusRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtStatusRsp*)[[[BtStatusRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtStatusRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtStatusRsp*)[[[BtStatusRsp builder] mergeFromCodedInputStream:input] build];
}
+ (BtStatusRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtStatusRsp*)[[[BtStatusRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtStatusRspBuilder*) builder {
  return [[BtStatusRspBuilder alloc] init];
}
+ (BtStatusRspBuilder*) builderWithPrototype:(BtStatusRsp*) prototype {
  return [[BtStatusRsp builder] mergeFrom:prototype];
}
- (BtStatusRspBuilder*) builder {
  return [BtStatusRsp builder];
}
- (BtStatusRspBuilder*) toBuilder {
  return [BtStatusRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", NSStringFromBtStatus(self.status)];
  }
  if (self.hasBtDeviceName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"btDeviceName", self.btDeviceName];
  }
  if (self.hasBtDeviceAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"btDeviceAddress", self.btDeviceAddress];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatus) {
    [dictionary setObject: @(self.status) forKey: @"status"];
  }
  if (self.hasBtDeviceName) {
    [dictionary setObject: self.btDeviceName forKey: @"btDeviceName"];
  }
  if (self.hasBtDeviceAddress) {
    [dictionary setObject: self.btDeviceAddress forKey: @"btDeviceAddress"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtStatusRsp class]]) {
    return NO;
  }
  BtStatusRsp *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasBtDeviceName == otherMessage.hasBtDeviceName &&
      (!self.hasBtDeviceName || [self.btDeviceName isEqual:otherMessage.btDeviceName]) &&
      self.hasBtDeviceAddress == otherMessage.hasBtDeviceAddress &&
      (!self.hasBtDeviceAddress || [self.btDeviceAddress isEqual:otherMessage.btDeviceAddress]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasBtDeviceName) {
    hashCode = hashCode * 31 + [self.btDeviceName hash];
  }
  if (self.hasBtDeviceAddress) {
    hashCode = hashCode * 31 + [self.btDeviceAddress hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtStatusRspBuilder()
@property (strong) BtStatusRsp* resultBtStatusRsp;
@end

@implementation BtStatusRspBuilder
@synthesize resultBtStatusRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtStatusRsp = [[BtStatusRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtStatusRsp;
}
- (BtStatusRspBuilder*) clear {
  self.resultBtStatusRsp = [[BtStatusRsp alloc] init];
  return self;
}
- (BtStatusRspBuilder*) clone {
  return [BtStatusRsp builderWithPrototype:resultBtStatusRsp];
}
- (BtStatusRsp*) defaultInstance {
  return [BtStatusRsp defaultInstance];
}
- (BtStatusRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtStatusRsp*) buildPartial {
  BtStatusRsp* returnMe = resultBtStatusRsp;
  self.resultBtStatusRsp = nil;
  return returnMe;
}
- (BtStatusRspBuilder*) mergeFrom:(BtStatusRsp*) other {
  if (other == [BtStatusRsp defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasBtDeviceName) {
    [self setBtDeviceName:other.btDeviceName];
  }
  if (other.hasBtDeviceAddress) {
    [self setBtDeviceAddress:other.btDeviceAddress];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtStatusRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtStatusRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        BtStatus value = (BtStatus)[input readEnum];
        if (BtStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setBtDeviceName:[input readString]];
        break;
      }
      case 26: {
        [self setBtDeviceAddress:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return resultBtStatusRsp.hasStatus;
}
- (BtStatus) status {
  return resultBtStatusRsp.status;
}
- (BtStatusRspBuilder*) setStatus:(BtStatus) value {
  resultBtStatusRsp.hasStatus = YES;
  resultBtStatusRsp.status = value;
  return self;
}
- (BtStatusRspBuilder*) clearStatus {
  resultBtStatusRsp.hasStatus = NO;
  resultBtStatusRsp.status = BtStatusBtOpen;
  return self;
}
- (BOOL) hasBtDeviceName {
  return resultBtStatusRsp.hasBtDeviceName;
}
- (NSString*) btDeviceName {
  return resultBtStatusRsp.btDeviceName;
}
- (BtStatusRspBuilder*) setBtDeviceName:(NSString*) value {
  resultBtStatusRsp.hasBtDeviceName = YES;
  resultBtStatusRsp.btDeviceName = value;
  return self;
}
- (BtStatusRspBuilder*) clearBtDeviceName {
  resultBtStatusRsp.hasBtDeviceName = NO;
  resultBtStatusRsp.btDeviceName = @"";
  return self;
}
- (BOOL) hasBtDeviceAddress {
  return resultBtStatusRsp.hasBtDeviceAddress;
}
- (NSString*) btDeviceAddress {
  return resultBtStatusRsp.btDeviceAddress;
}
- (BtStatusRspBuilder*) setBtDeviceAddress:(NSString*) value {
  resultBtStatusRsp.hasBtDeviceAddress = YES;
  resultBtStatusRsp.btDeviceAddress = value;
  return self;
}
- (BtStatusRspBuilder*) clearBtDeviceAddress {
  resultBtStatusRsp.hasBtDeviceAddress = NO;
  resultBtStatusRsp.btDeviceAddress = @"";
  return self;
}
@end

@interface BtStatusNotification ()
@property BtStatus status;
@property (strong) NSString* btDeviceName;
@property (strong) NSString* btDeviceAddress;
@property BOOL canUse;
@property BOOL oncePair;
@end

@implementation BtStatusNotification

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasBtDeviceName {
  return !!hasBtDeviceName_;
}
- (void) setHasBtDeviceName:(BOOL) _value_ {
  hasBtDeviceName_ = !!_value_;
}
@synthesize btDeviceName;
- (BOOL) hasBtDeviceAddress {
  return !!hasBtDeviceAddress_;
}
- (void) setHasBtDeviceAddress:(BOOL) _value_ {
  hasBtDeviceAddress_ = !!_value_;
}
@synthesize btDeviceAddress;
- (BOOL) hasCanUse {
  return !!hasCanUse_;
}
- (void) setHasCanUse:(BOOL) _value_ {
  hasCanUse_ = !!_value_;
}
- (BOOL) canUse {
  return !!canUse_;
}
- (void) setCanUse:(BOOL) _value_ {
  canUse_ = !!_value_;
}
- (BOOL) hasOncePair {
  return !!hasOncePair_;
}
- (void) setHasOncePair:(BOOL) _value_ {
  hasOncePair_ = !!_value_;
}
- (BOOL) oncePair {
  return !!oncePair_;
}
- (void) setOncePair:(BOOL) _value_ {
  oncePair_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.status = BtStatusBtOpen;
    self.btDeviceName = @"";
    self.btDeviceAddress = @"";
    self.canUse = NO;
    self.oncePair = NO;
  }
  return self;
}
static BtStatusNotification* defaultBtStatusNotificationInstance = nil;
+ (void) initialize {
  if (self == [BtStatusNotification class]) {
    defaultBtStatusNotificationInstance = [[BtStatusNotification alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtStatusNotificationInstance;
}
- (instancetype) defaultInstance {
  return defaultBtStatusNotificationInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStatus) {
    return NO;
  }
  if (!self.hasBtDeviceName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeEnum:1 value:self.status];
  }
  if (self.hasBtDeviceName) {
    [output writeString:2 value:self.btDeviceName];
  }
  if (self.hasBtDeviceAddress) {
    [output writeString:3 value:self.btDeviceAddress];
  }
  if (self.hasCanUse) {
    [output writeBool:4 value:self.canUse];
  }
  if (self.hasOncePair) {
    [output writeBool:5 value:self.oncePair];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeEnumSize(1, self.status);
  }
  if (self.hasBtDeviceName) {
    size_ += computeStringSize(2, self.btDeviceName);
  }
  if (self.hasBtDeviceAddress) {
    size_ += computeStringSize(3, self.btDeviceAddress);
  }
  if (self.hasCanUse) {
    size_ += computeBoolSize(4, self.canUse);
  }
  if (self.hasOncePair) {
    size_ += computeBoolSize(5, self.oncePair);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtStatusNotification*) parseFromData:(NSData*) data {
  return (BtStatusNotification*)[[[BtStatusNotification builder] mergeFromData:data] build];
}
+ (BtStatusNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtStatusNotification*)[[[BtStatusNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtStatusNotification*) parseFromInputStream:(NSInputStream*) input {
  return (BtStatusNotification*)[[[BtStatusNotification builder] mergeFromInputStream:input] build];
}
+ (BtStatusNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtStatusNotification*)[[[BtStatusNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtStatusNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtStatusNotification*)[[[BtStatusNotification builder] mergeFromCodedInputStream:input] build];
}
+ (BtStatusNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtStatusNotification*)[[[BtStatusNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtStatusNotificationBuilder*) builder {
  return [[BtStatusNotificationBuilder alloc] init];
}
+ (BtStatusNotificationBuilder*) builderWithPrototype:(BtStatusNotification*) prototype {
  return [[BtStatusNotification builder] mergeFrom:prototype];
}
- (BtStatusNotificationBuilder*) builder {
  return [BtStatusNotification builder];
}
- (BtStatusNotificationBuilder*) toBuilder {
  return [BtStatusNotification builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", NSStringFromBtStatus(self.status)];
  }
  if (self.hasBtDeviceName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"btDeviceName", self.btDeviceName];
  }
  if (self.hasBtDeviceAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"btDeviceAddress", self.btDeviceAddress];
  }
  if (self.hasCanUse) {
    [output appendFormat:@"%@%@: %@\n", indent, @"canUse", [NSNumber numberWithBool:self.canUse]];
  }
  if (self.hasOncePair) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oncePair", [NSNumber numberWithBool:self.oncePair]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatus) {
    [dictionary setObject: @(self.status) forKey: @"status"];
  }
  if (self.hasBtDeviceName) {
    [dictionary setObject: self.btDeviceName forKey: @"btDeviceName"];
  }
  if (self.hasBtDeviceAddress) {
    [dictionary setObject: self.btDeviceAddress forKey: @"btDeviceAddress"];
  }
  if (self.hasCanUse) {
    [dictionary setObject: [NSNumber numberWithBool:self.canUse] forKey: @"canUse"];
  }
  if (self.hasOncePair) {
    [dictionary setObject: [NSNumber numberWithBool:self.oncePair] forKey: @"oncePair"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtStatusNotification class]]) {
    return NO;
  }
  BtStatusNotification *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasBtDeviceName == otherMessage.hasBtDeviceName &&
      (!self.hasBtDeviceName || [self.btDeviceName isEqual:otherMessage.btDeviceName]) &&
      self.hasBtDeviceAddress == otherMessage.hasBtDeviceAddress &&
      (!self.hasBtDeviceAddress || [self.btDeviceAddress isEqual:otherMessage.btDeviceAddress]) &&
      self.hasCanUse == otherMessage.hasCanUse &&
      (!self.hasCanUse || self.canUse == otherMessage.canUse) &&
      self.hasOncePair == otherMessage.hasOncePair &&
      (!self.hasOncePair || self.oncePair == otherMessage.oncePair) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasBtDeviceName) {
    hashCode = hashCode * 31 + [self.btDeviceName hash];
  }
  if (self.hasBtDeviceAddress) {
    hashCode = hashCode * 31 + [self.btDeviceAddress hash];
  }
  if (self.hasCanUse) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.canUse] hash];
  }
  if (self.hasOncePair) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.oncePair] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtStatusNotificationBuilder()
@property (strong) BtStatusNotification* resultBtStatusNotification;
@end

@implementation BtStatusNotificationBuilder
@synthesize resultBtStatusNotification;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtStatusNotification = [[BtStatusNotification alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtStatusNotification;
}
- (BtStatusNotificationBuilder*) clear {
  self.resultBtStatusNotification = [[BtStatusNotification alloc] init];
  return self;
}
- (BtStatusNotificationBuilder*) clone {
  return [BtStatusNotification builderWithPrototype:resultBtStatusNotification];
}
- (BtStatusNotification*) defaultInstance {
  return [BtStatusNotification defaultInstance];
}
- (BtStatusNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtStatusNotification*) buildPartial {
  BtStatusNotification* returnMe = resultBtStatusNotification;
  self.resultBtStatusNotification = nil;
  return returnMe;
}
- (BtStatusNotificationBuilder*) mergeFrom:(BtStatusNotification*) other {
  if (other == [BtStatusNotification defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasBtDeviceName) {
    [self setBtDeviceName:other.btDeviceName];
  }
  if (other.hasBtDeviceAddress) {
    [self setBtDeviceAddress:other.btDeviceAddress];
  }
  if (other.hasCanUse) {
    [self setCanUse:other.canUse];
  }
  if (other.hasOncePair) {
    [self setOncePair:other.oncePair];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtStatusNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtStatusNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        BtStatus value = (BtStatus)[input readEnum];
        if (BtStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setBtDeviceName:[input readString]];
        break;
      }
      case 26: {
        [self setBtDeviceAddress:[input readString]];
        break;
      }
      case 32: {
        [self setCanUse:[input readBool]];
        break;
      }
      case 40: {
        [self setOncePair:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return resultBtStatusNotification.hasStatus;
}
- (BtStatus) status {
  return resultBtStatusNotification.status;
}
- (BtStatusNotificationBuilder*) setStatus:(BtStatus) value {
  resultBtStatusNotification.hasStatus = YES;
  resultBtStatusNotification.status = value;
  return self;
}
- (BtStatusNotificationBuilder*) clearStatus {
  resultBtStatusNotification.hasStatus = NO;
  resultBtStatusNotification.status = BtStatusBtOpen;
  return self;
}
- (BOOL) hasBtDeviceName {
  return resultBtStatusNotification.hasBtDeviceName;
}
- (NSString*) btDeviceName {
  return resultBtStatusNotification.btDeviceName;
}
- (BtStatusNotificationBuilder*) setBtDeviceName:(NSString*) value {
  resultBtStatusNotification.hasBtDeviceName = YES;
  resultBtStatusNotification.btDeviceName = value;
  return self;
}
- (BtStatusNotificationBuilder*) clearBtDeviceName {
  resultBtStatusNotification.hasBtDeviceName = NO;
  resultBtStatusNotification.btDeviceName = @"";
  return self;
}
- (BOOL) hasBtDeviceAddress {
  return resultBtStatusNotification.hasBtDeviceAddress;
}
- (NSString*) btDeviceAddress {
  return resultBtStatusNotification.btDeviceAddress;
}
- (BtStatusNotificationBuilder*) setBtDeviceAddress:(NSString*) value {
  resultBtStatusNotification.hasBtDeviceAddress = YES;
  resultBtStatusNotification.btDeviceAddress = value;
  return self;
}
- (BtStatusNotificationBuilder*) clearBtDeviceAddress {
  resultBtStatusNotification.hasBtDeviceAddress = NO;
  resultBtStatusNotification.btDeviceAddress = @"";
  return self;
}
- (BOOL) hasCanUse {
  return resultBtStatusNotification.hasCanUse;
}
- (BOOL) canUse {
  return resultBtStatusNotification.canUse;
}
- (BtStatusNotificationBuilder*) setCanUse:(BOOL) value {
  resultBtStatusNotification.hasCanUse = YES;
  resultBtStatusNotification.canUse = value;
  return self;
}
- (BtStatusNotificationBuilder*) clearCanUse {
  resultBtStatusNotification.hasCanUse = NO;
  resultBtStatusNotification.canUse = NO;
  return self;
}
- (BOOL) hasOncePair {
  return resultBtStatusNotification.hasOncePair;
}
- (BOOL) oncePair {
  return resultBtStatusNotification.oncePair;
}
- (BtStatusNotificationBuilder*) setOncePair:(BOOL) value {
  resultBtStatusNotification.hasOncePair = YES;
  resultBtStatusNotification.oncePair = value;
  return self;
}
- (BtStatusNotificationBuilder*) clearOncePair {
  resultBtStatusNotification.hasOncePair = NO;
  resultBtStatusNotification.oncePair = NO;
  return self;
}
@end

@interface BtStatusSetReq ()
@property BtStatus status;
@property (strong) NSString* btDeviceName;
@property (strong) NSString* btDeviceAddress;
@end

@implementation BtStatusSetReq

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasBtDeviceName {
  return !!hasBtDeviceName_;
}
- (void) setHasBtDeviceName:(BOOL) _value_ {
  hasBtDeviceName_ = !!_value_;
}
@synthesize btDeviceName;
- (BOOL) hasBtDeviceAddress {
  return !!hasBtDeviceAddress_;
}
- (void) setHasBtDeviceAddress:(BOOL) _value_ {
  hasBtDeviceAddress_ = !!_value_;
}
@synthesize btDeviceAddress;
- (instancetype) init {
  if ((self = [super init])) {
    self.status = BtStatusBtOpen;
    self.btDeviceName = @"";
    self.btDeviceAddress = @"";
  }
  return self;
}
static BtStatusSetReq* defaultBtStatusSetReqInstance = nil;
+ (void) initialize {
  if (self == [BtStatusSetReq class]) {
    defaultBtStatusSetReqInstance = [[BtStatusSetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtStatusSetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultBtStatusSetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStatus) {
    return NO;
  }
  if (!self.hasBtDeviceName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeEnum:1 value:self.status];
  }
  if (self.hasBtDeviceName) {
    [output writeString:2 value:self.btDeviceName];
  }
  if (self.hasBtDeviceAddress) {
    [output writeString:3 value:self.btDeviceAddress];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeEnumSize(1, self.status);
  }
  if (self.hasBtDeviceName) {
    size_ += computeStringSize(2, self.btDeviceName);
  }
  if (self.hasBtDeviceAddress) {
    size_ += computeStringSize(3, self.btDeviceAddress);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtStatusSetReq*) parseFromData:(NSData*) data {
  return (BtStatusSetReq*)[[[BtStatusSetReq builder] mergeFromData:data] build];
}
+ (BtStatusSetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtStatusSetReq*)[[[BtStatusSetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtStatusSetReq*) parseFromInputStream:(NSInputStream*) input {
  return (BtStatusSetReq*)[[[BtStatusSetReq builder] mergeFromInputStream:input] build];
}
+ (BtStatusSetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtStatusSetReq*)[[[BtStatusSetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtStatusSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtStatusSetReq*)[[[BtStatusSetReq builder] mergeFromCodedInputStream:input] build];
}
+ (BtStatusSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtStatusSetReq*)[[[BtStatusSetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtStatusSetReqBuilder*) builder {
  return [[BtStatusSetReqBuilder alloc] init];
}
+ (BtStatusSetReqBuilder*) builderWithPrototype:(BtStatusSetReq*) prototype {
  return [[BtStatusSetReq builder] mergeFrom:prototype];
}
- (BtStatusSetReqBuilder*) builder {
  return [BtStatusSetReq builder];
}
- (BtStatusSetReqBuilder*) toBuilder {
  return [BtStatusSetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", NSStringFromBtStatus(self.status)];
  }
  if (self.hasBtDeviceName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"btDeviceName", self.btDeviceName];
  }
  if (self.hasBtDeviceAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"btDeviceAddress", self.btDeviceAddress];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatus) {
    [dictionary setObject: @(self.status) forKey: @"status"];
  }
  if (self.hasBtDeviceName) {
    [dictionary setObject: self.btDeviceName forKey: @"btDeviceName"];
  }
  if (self.hasBtDeviceAddress) {
    [dictionary setObject: self.btDeviceAddress forKey: @"btDeviceAddress"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtStatusSetReq class]]) {
    return NO;
  }
  BtStatusSetReq *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasBtDeviceName == otherMessage.hasBtDeviceName &&
      (!self.hasBtDeviceName || [self.btDeviceName isEqual:otherMessage.btDeviceName]) &&
      self.hasBtDeviceAddress == otherMessage.hasBtDeviceAddress &&
      (!self.hasBtDeviceAddress || [self.btDeviceAddress isEqual:otherMessage.btDeviceAddress]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasBtDeviceName) {
    hashCode = hashCode * 31 + [self.btDeviceName hash];
  }
  if (self.hasBtDeviceAddress) {
    hashCode = hashCode * 31 + [self.btDeviceAddress hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtStatusSetReqBuilder()
@property (strong) BtStatusSetReq* resultBtStatusSetReq;
@end

@implementation BtStatusSetReqBuilder
@synthesize resultBtStatusSetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtStatusSetReq = [[BtStatusSetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtStatusSetReq;
}
- (BtStatusSetReqBuilder*) clear {
  self.resultBtStatusSetReq = [[BtStatusSetReq alloc] init];
  return self;
}
- (BtStatusSetReqBuilder*) clone {
  return [BtStatusSetReq builderWithPrototype:resultBtStatusSetReq];
}
- (BtStatusSetReq*) defaultInstance {
  return [BtStatusSetReq defaultInstance];
}
- (BtStatusSetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtStatusSetReq*) buildPartial {
  BtStatusSetReq* returnMe = resultBtStatusSetReq;
  self.resultBtStatusSetReq = nil;
  return returnMe;
}
- (BtStatusSetReqBuilder*) mergeFrom:(BtStatusSetReq*) other {
  if (other == [BtStatusSetReq defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasBtDeviceName) {
    [self setBtDeviceName:other.btDeviceName];
  }
  if (other.hasBtDeviceAddress) {
    [self setBtDeviceAddress:other.btDeviceAddress];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtStatusSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtStatusSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        BtStatus value = (BtStatus)[input readEnum];
        if (BtStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setBtDeviceName:[input readString]];
        break;
      }
      case 26: {
        [self setBtDeviceAddress:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return resultBtStatusSetReq.hasStatus;
}
- (BtStatus) status {
  return resultBtStatusSetReq.status;
}
- (BtStatusSetReqBuilder*) setStatus:(BtStatus) value {
  resultBtStatusSetReq.hasStatus = YES;
  resultBtStatusSetReq.status = value;
  return self;
}
- (BtStatusSetReqBuilder*) clearStatus {
  resultBtStatusSetReq.hasStatus = NO;
  resultBtStatusSetReq.status = BtStatusBtOpen;
  return self;
}
- (BOOL) hasBtDeviceName {
  return resultBtStatusSetReq.hasBtDeviceName;
}
- (NSString*) btDeviceName {
  return resultBtStatusSetReq.btDeviceName;
}
- (BtStatusSetReqBuilder*) setBtDeviceName:(NSString*) value {
  resultBtStatusSetReq.hasBtDeviceName = YES;
  resultBtStatusSetReq.btDeviceName = value;
  return self;
}
- (BtStatusSetReqBuilder*) clearBtDeviceName {
  resultBtStatusSetReq.hasBtDeviceName = NO;
  resultBtStatusSetReq.btDeviceName = @"";
  return self;
}
- (BOOL) hasBtDeviceAddress {
  return resultBtStatusSetReq.hasBtDeviceAddress;
}
- (NSString*) btDeviceAddress {
  return resultBtStatusSetReq.btDeviceAddress;
}
- (BtStatusSetReqBuilder*) setBtDeviceAddress:(NSString*) value {
  resultBtStatusSetReq.hasBtDeviceAddress = YES;
  resultBtStatusSetReq.btDeviceAddress = value;
  return self;
}
- (BtStatusSetReqBuilder*) clearBtDeviceAddress {
  resultBtStatusSetReq.hasBtDeviceAddress = NO;
  resultBtStatusSetReq.btDeviceAddress = @"";
  return self;
}
@end

@interface BtConnectAuthRsp ()
@property (strong) NSString* connectPw;
@property BOOL connect;
@end

@implementation BtConnectAuthRsp

- (BOOL) hasConnectPw {
  return !!hasConnectPw_;
}
- (void) setHasConnectPw:(BOOL) _value_ {
  hasConnectPw_ = !!_value_;
}
@synthesize connectPw;
- (BOOL) hasConnect {
  return !!hasConnect_;
}
- (void) setHasConnect:(BOOL) _value_ {
  hasConnect_ = !!_value_;
}
- (BOOL) connect {
  return !!connect_;
}
- (void) setConnect:(BOOL) _value_ {
  connect_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.connectPw = @"";
    self.connect = NO;
  }
  return self;
}
static BtConnectAuthRsp* defaultBtConnectAuthRspInstance = nil;
+ (void) initialize {
  if (self == [BtConnectAuthRsp class]) {
    defaultBtConnectAuthRspInstance = [[BtConnectAuthRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtConnectAuthRspInstance;
}
- (instancetype) defaultInstance {
  return defaultBtConnectAuthRspInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasConnectPw) {
    [output writeString:1 value:self.connectPw];
  }
  if (self.hasConnect) {
    [output writeBool:2 value:self.connect];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasConnectPw) {
    size_ += computeStringSize(1, self.connectPw);
  }
  if (self.hasConnect) {
    size_ += computeBoolSize(2, self.connect);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtConnectAuthRsp*) parseFromData:(NSData*) data {
  return (BtConnectAuthRsp*)[[[BtConnectAuthRsp builder] mergeFromData:data] build];
}
+ (BtConnectAuthRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtConnectAuthRsp*)[[[BtConnectAuthRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtConnectAuthRsp*) parseFromInputStream:(NSInputStream*) input {
  return (BtConnectAuthRsp*)[[[BtConnectAuthRsp builder] mergeFromInputStream:input] build];
}
+ (BtConnectAuthRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtConnectAuthRsp*)[[[BtConnectAuthRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtConnectAuthRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtConnectAuthRsp*)[[[BtConnectAuthRsp builder] mergeFromCodedInputStream:input] build];
}
+ (BtConnectAuthRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtConnectAuthRsp*)[[[BtConnectAuthRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtConnectAuthRspBuilder*) builder {
  return [[BtConnectAuthRspBuilder alloc] init];
}
+ (BtConnectAuthRspBuilder*) builderWithPrototype:(BtConnectAuthRsp*) prototype {
  return [[BtConnectAuthRsp builder] mergeFrom:prototype];
}
- (BtConnectAuthRspBuilder*) builder {
  return [BtConnectAuthRsp builder];
}
- (BtConnectAuthRspBuilder*) toBuilder {
  return [BtConnectAuthRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasConnectPw) {
    [output appendFormat:@"%@%@: %@\n", indent, @"connectPw", self.connectPw];
  }
  if (self.hasConnect) {
    [output appendFormat:@"%@%@: %@\n", indent, @"connect", [NSNumber numberWithBool:self.connect]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasConnectPw) {
    [dictionary setObject: self.connectPw forKey: @"connectPw"];
  }
  if (self.hasConnect) {
    [dictionary setObject: [NSNumber numberWithBool:self.connect] forKey: @"connect"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtConnectAuthRsp class]]) {
    return NO;
  }
  BtConnectAuthRsp *otherMessage = other;
  return
      self.hasConnectPw == otherMessage.hasConnectPw &&
      (!self.hasConnectPw || [self.connectPw isEqual:otherMessage.connectPw]) &&
      self.hasConnect == otherMessage.hasConnect &&
      (!self.hasConnect || self.connect == otherMessage.connect) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasConnectPw) {
    hashCode = hashCode * 31 + [self.connectPw hash];
  }
  if (self.hasConnect) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.connect] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtConnectAuthRspBuilder()
@property (strong) BtConnectAuthRsp* resultBtConnectAuthRsp;
@end

@implementation BtConnectAuthRspBuilder
@synthesize resultBtConnectAuthRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtConnectAuthRsp = [[BtConnectAuthRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtConnectAuthRsp;
}
- (BtConnectAuthRspBuilder*) clear {
  self.resultBtConnectAuthRsp = [[BtConnectAuthRsp alloc] init];
  return self;
}
- (BtConnectAuthRspBuilder*) clone {
  return [BtConnectAuthRsp builderWithPrototype:resultBtConnectAuthRsp];
}
- (BtConnectAuthRsp*) defaultInstance {
  return [BtConnectAuthRsp defaultInstance];
}
- (BtConnectAuthRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtConnectAuthRsp*) buildPartial {
  BtConnectAuthRsp* returnMe = resultBtConnectAuthRsp;
  self.resultBtConnectAuthRsp = nil;
  return returnMe;
}
- (BtConnectAuthRspBuilder*) mergeFrom:(BtConnectAuthRsp*) other {
  if (other == [BtConnectAuthRsp defaultInstance]) {
    return self;
  }
  if (other.hasConnectPw) {
    [self setConnectPw:other.connectPw];
  }
  if (other.hasConnect) {
    [self setConnect:other.connect];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtConnectAuthRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtConnectAuthRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setConnectPw:[input readString]];
        break;
      }
      case 16: {
        [self setConnect:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasConnectPw {
  return resultBtConnectAuthRsp.hasConnectPw;
}
- (NSString*) connectPw {
  return resultBtConnectAuthRsp.connectPw;
}
- (BtConnectAuthRspBuilder*) setConnectPw:(NSString*) value {
  resultBtConnectAuthRsp.hasConnectPw = YES;
  resultBtConnectAuthRsp.connectPw = value;
  return self;
}
- (BtConnectAuthRspBuilder*) clearConnectPw {
  resultBtConnectAuthRsp.hasConnectPw = NO;
  resultBtConnectAuthRsp.connectPw = @"";
  return self;
}
- (BOOL) hasConnect {
  return resultBtConnectAuthRsp.hasConnect;
}
- (BOOL) connect {
  return resultBtConnectAuthRsp.connect;
}
- (BtConnectAuthRspBuilder*) setConnect:(BOOL) value {
  resultBtConnectAuthRsp.hasConnect = YES;
  resultBtConnectAuthRsp.connect = value;
  return self;
}
- (BtConnectAuthRspBuilder*) clearConnect {
  resultBtConnectAuthRsp.hasConnect = NO;
  resultBtConnectAuthRsp.connect = NO;
  return self;
}
@end

@interface BtConnectStatusGetReq ()
@property BOOL getBtHfpconnectSta;
@property BOOL getBtA2DpconnectSta;
@end

@implementation BtConnectStatusGetReq

- (BOOL) hasGetBtHfpconnectSta {
  return !!hasGetBtHfpconnectSta_;
}
- (void) setHasGetBtHfpconnectSta:(BOOL) _value_ {
  hasGetBtHfpconnectSta_ = !!_value_;
}
- (BOOL) getBtHfpconnectSta {
  return !!getBtHfpconnectSta_;
}
- (void) setGetBtHfpconnectSta:(BOOL) _value_ {
  getBtHfpconnectSta_ = !!_value_;
}
- (BOOL) hasGetBtA2DpconnectSta {
  return !!hasGetBtA2DpconnectSta_;
}
- (void) setHasGetBtA2DpconnectSta:(BOOL) _value_ {
  hasGetBtA2DpconnectSta_ = !!_value_;
}
- (BOOL) getBtA2DpconnectSta {
  return !!getBtA2DpconnectSta_;
}
- (void) setGetBtA2DpconnectSta:(BOOL) _value_ {
  getBtA2DpconnectSta_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.getBtHfpconnectSta = NO;
    self.getBtA2DpconnectSta = NO;
  }
  return self;
}
static BtConnectStatusGetReq* defaultBtConnectStatusGetReqInstance = nil;
+ (void) initialize {
  if (self == [BtConnectStatusGetReq class]) {
    defaultBtConnectStatusGetReqInstance = [[BtConnectStatusGetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtConnectStatusGetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultBtConnectStatusGetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetBtHfpconnectSta) {
    return NO;
  }
  if (!self.hasGetBtA2DpconnectSta) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetBtHfpconnectSta) {
    [output writeBool:1 value:self.getBtHfpconnectSta];
  }
  if (self.hasGetBtA2DpconnectSta) {
    [output writeBool:2 value:self.getBtA2DpconnectSta];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetBtHfpconnectSta) {
    size_ += computeBoolSize(1, self.getBtHfpconnectSta);
  }
  if (self.hasGetBtA2DpconnectSta) {
    size_ += computeBoolSize(2, self.getBtA2DpconnectSta);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtConnectStatusGetReq*) parseFromData:(NSData*) data {
  return (BtConnectStatusGetReq*)[[[BtConnectStatusGetReq builder] mergeFromData:data] build];
}
+ (BtConnectStatusGetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtConnectStatusGetReq*)[[[BtConnectStatusGetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtConnectStatusGetReq*) parseFromInputStream:(NSInputStream*) input {
  return (BtConnectStatusGetReq*)[[[BtConnectStatusGetReq builder] mergeFromInputStream:input] build];
}
+ (BtConnectStatusGetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtConnectStatusGetReq*)[[[BtConnectStatusGetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtConnectStatusGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtConnectStatusGetReq*)[[[BtConnectStatusGetReq builder] mergeFromCodedInputStream:input] build];
}
+ (BtConnectStatusGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtConnectStatusGetReq*)[[[BtConnectStatusGetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtConnectStatusGetReqBuilder*) builder {
  return [[BtConnectStatusGetReqBuilder alloc] init];
}
+ (BtConnectStatusGetReqBuilder*) builderWithPrototype:(BtConnectStatusGetReq*) prototype {
  return [[BtConnectStatusGetReq builder] mergeFrom:prototype];
}
- (BtConnectStatusGetReqBuilder*) builder {
  return [BtConnectStatusGetReq builder];
}
- (BtConnectStatusGetReqBuilder*) toBuilder {
  return [BtConnectStatusGetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetBtHfpconnectSta) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getBtHfpconnectSta", [NSNumber numberWithBool:self.getBtHfpconnectSta]];
  }
  if (self.hasGetBtA2DpconnectSta) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getBtA2DpconnectSta", [NSNumber numberWithBool:self.getBtA2DpconnectSta]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetBtHfpconnectSta) {
    [dictionary setObject: [NSNumber numberWithBool:self.getBtHfpconnectSta] forKey: @"getBtHfpconnectSta"];
  }
  if (self.hasGetBtA2DpconnectSta) {
    [dictionary setObject: [NSNumber numberWithBool:self.getBtA2DpconnectSta] forKey: @"getBtA2DpconnectSta"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtConnectStatusGetReq class]]) {
    return NO;
  }
  BtConnectStatusGetReq *otherMessage = other;
  return
      self.hasGetBtHfpconnectSta == otherMessage.hasGetBtHfpconnectSta &&
      (!self.hasGetBtHfpconnectSta || self.getBtHfpconnectSta == otherMessage.getBtHfpconnectSta) &&
      self.hasGetBtA2DpconnectSta == otherMessage.hasGetBtA2DpconnectSta &&
      (!self.hasGetBtA2DpconnectSta || self.getBtA2DpconnectSta == otherMessage.getBtA2DpconnectSta) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetBtHfpconnectSta) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getBtHfpconnectSta] hash];
  }
  if (self.hasGetBtA2DpconnectSta) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getBtA2DpconnectSta] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtConnectStatusGetReqBuilder()
@property (strong) BtConnectStatusGetReq* resultBtConnectStatusGetReq;
@end

@implementation BtConnectStatusGetReqBuilder
@synthesize resultBtConnectStatusGetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtConnectStatusGetReq = [[BtConnectStatusGetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtConnectStatusGetReq;
}
- (BtConnectStatusGetReqBuilder*) clear {
  self.resultBtConnectStatusGetReq = [[BtConnectStatusGetReq alloc] init];
  return self;
}
- (BtConnectStatusGetReqBuilder*) clone {
  return [BtConnectStatusGetReq builderWithPrototype:resultBtConnectStatusGetReq];
}
- (BtConnectStatusGetReq*) defaultInstance {
  return [BtConnectStatusGetReq defaultInstance];
}
- (BtConnectStatusGetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtConnectStatusGetReq*) buildPartial {
  BtConnectStatusGetReq* returnMe = resultBtConnectStatusGetReq;
  self.resultBtConnectStatusGetReq = nil;
  return returnMe;
}
- (BtConnectStatusGetReqBuilder*) mergeFrom:(BtConnectStatusGetReq*) other {
  if (other == [BtConnectStatusGetReq defaultInstance]) {
    return self;
  }
  if (other.hasGetBtHfpconnectSta) {
    [self setGetBtHfpconnectSta:other.getBtHfpconnectSta];
  }
  if (other.hasGetBtA2DpconnectSta) {
    [self setGetBtA2DpconnectSta:other.getBtA2DpconnectSta];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtConnectStatusGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtConnectStatusGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGetBtHfpconnectSta:[input readBool]];
        break;
      }
      case 16: {
        [self setGetBtA2DpconnectSta:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasGetBtHfpconnectSta {
  return resultBtConnectStatusGetReq.hasGetBtHfpconnectSta;
}
- (BOOL) getBtHfpconnectSta {
  return resultBtConnectStatusGetReq.getBtHfpconnectSta;
}
- (BtConnectStatusGetReqBuilder*) setGetBtHfpconnectSta:(BOOL) value {
  resultBtConnectStatusGetReq.hasGetBtHfpconnectSta = YES;
  resultBtConnectStatusGetReq.getBtHfpconnectSta = value;
  return self;
}
- (BtConnectStatusGetReqBuilder*) clearGetBtHfpconnectSta {
  resultBtConnectStatusGetReq.hasGetBtHfpconnectSta = NO;
  resultBtConnectStatusGetReq.getBtHfpconnectSta = NO;
  return self;
}
- (BOOL) hasGetBtA2DpconnectSta {
  return resultBtConnectStatusGetReq.hasGetBtA2DpconnectSta;
}
- (BOOL) getBtA2DpconnectSta {
  return resultBtConnectStatusGetReq.getBtA2DpconnectSta;
}
- (BtConnectStatusGetReqBuilder*) setGetBtA2DpconnectSta:(BOOL) value {
  resultBtConnectStatusGetReq.hasGetBtA2DpconnectSta = YES;
  resultBtConnectStatusGetReq.getBtA2DpconnectSta = value;
  return self;
}
- (BtConnectStatusGetReqBuilder*) clearGetBtA2DpconnectSta {
  resultBtConnectStatusGetReq.hasGetBtA2DpconnectSta = NO;
  resultBtConnectStatusGetReq.getBtA2DpconnectSta = NO;
  return self;
}
@end

@interface BtConnectStatusRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@property (strong) NSData* hfpdeviceInfo;
@property (strong) NSData* a2DpdeviceInfo;
@end

@implementation BtConnectStatusRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasHfpdeviceInfo {
  return !!hasHfpdeviceInfo_;
}
- (void) setHasHfpdeviceInfo:(BOOL) _value_ {
  hasHfpdeviceInfo_ = !!_value_;
}
@synthesize hfpdeviceInfo;
- (BOOL) hasA2DpdeviceInfo {
  return !!hasA2DpdeviceInfo_;
}
- (void) setHasA2DpdeviceInfo:(BOOL) _value_ {
  hasA2DpdeviceInfo_ = !!_value_;
}
@synthesize a2DpdeviceInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
    self.hfpdeviceInfo = [NSData data];
    self.a2DpdeviceInfo = [NSData data];
  }
  return self;
}
static BtConnectStatusRsp* defaultBtConnectStatusRspInstance = nil;
+ (void) initialize {
  if (self == [BtConnectStatusRsp class]) {
    defaultBtConnectStatusRspInstance = [[BtConnectStatusRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBtConnectStatusRspInstance;
}
- (instancetype) defaultInstance {
  return defaultBtConnectStatusRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  if (self.hasHfpdeviceInfo) {
    [output writeData:3 value:self.hfpdeviceInfo];
  }
  if (self.hasA2DpdeviceInfo) {
    [output writeData:4 value:self.a2DpdeviceInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  if (self.hasHfpdeviceInfo) {
    size_ += computeDataSize(3, self.hfpdeviceInfo);
  }
  if (self.hasA2DpdeviceInfo) {
    size_ += computeDataSize(4, self.a2DpdeviceInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BtConnectStatusRsp*) parseFromData:(NSData*) data {
  return (BtConnectStatusRsp*)[[[BtConnectStatusRsp builder] mergeFromData:data] build];
}
+ (BtConnectStatusRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtConnectStatusRsp*)[[[BtConnectStatusRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BtConnectStatusRsp*) parseFromInputStream:(NSInputStream*) input {
  return (BtConnectStatusRsp*)[[[BtConnectStatusRsp builder] mergeFromInputStream:input] build];
}
+ (BtConnectStatusRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtConnectStatusRsp*)[[[BtConnectStatusRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtConnectStatusRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BtConnectStatusRsp*)[[[BtConnectStatusRsp builder] mergeFromCodedInputStream:input] build];
}
+ (BtConnectStatusRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BtConnectStatusRsp*)[[[BtConnectStatusRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BtConnectStatusRspBuilder*) builder {
  return [[BtConnectStatusRspBuilder alloc] init];
}
+ (BtConnectStatusRspBuilder*) builderWithPrototype:(BtConnectStatusRsp*) prototype {
  return [[BtConnectStatusRsp builder] mergeFrom:prototype];
}
- (BtConnectStatusRspBuilder*) builder {
  return [BtConnectStatusRsp builder];
}
- (BtConnectStatusRspBuilder*) toBuilder {
  return [BtConnectStatusRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  if (self.hasHfpdeviceInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hfpdeviceInfo", self.hfpdeviceInfo];
  }
  if (self.hasA2DpdeviceInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a2DpdeviceInfo", self.a2DpdeviceInfo];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  if (self.hasHfpdeviceInfo) {
    [dictionary setObject: self.hfpdeviceInfo forKey: @"hfpdeviceInfo"];
  }
  if (self.hasA2DpdeviceInfo) {
    [dictionary setObject: self.a2DpdeviceInfo forKey: @"a2DpdeviceInfo"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BtConnectStatusRsp class]]) {
    return NO;
  }
  BtConnectStatusRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasHfpdeviceInfo == otherMessage.hasHfpdeviceInfo &&
      (!self.hasHfpdeviceInfo || [self.hfpdeviceInfo isEqual:otherMessage.hfpdeviceInfo]) &&
      self.hasA2DpdeviceInfo == otherMessage.hasA2DpdeviceInfo &&
      (!self.hasA2DpdeviceInfo || [self.a2DpdeviceInfo isEqual:otherMessage.a2DpdeviceInfo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  if (self.hasHfpdeviceInfo) {
    hashCode = hashCode * 31 + [self.hfpdeviceInfo hash];
  }
  if (self.hasA2DpdeviceInfo) {
    hashCode = hashCode * 31 + [self.a2DpdeviceInfo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BtConnectStatusRspBuilder()
@property (strong) BtConnectStatusRsp* resultBtConnectStatusRsp;
@end

@implementation BtConnectStatusRspBuilder
@synthesize resultBtConnectStatusRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBtConnectStatusRsp = [[BtConnectStatusRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBtConnectStatusRsp;
}
- (BtConnectStatusRspBuilder*) clear {
  self.resultBtConnectStatusRsp = [[BtConnectStatusRsp alloc] init];
  return self;
}
- (BtConnectStatusRspBuilder*) clone {
  return [BtConnectStatusRsp builderWithPrototype:resultBtConnectStatusRsp];
}
- (BtConnectStatusRsp*) defaultInstance {
  return [BtConnectStatusRsp defaultInstance];
}
- (BtConnectStatusRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BtConnectStatusRsp*) buildPartial {
  BtConnectStatusRsp* returnMe = resultBtConnectStatusRsp;
  self.resultBtConnectStatusRsp = nil;
  return returnMe;
}
- (BtConnectStatusRspBuilder*) mergeFrom:(BtConnectStatusRsp*) other {
  if (other == [BtConnectStatusRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasHfpdeviceInfo) {
    [self setHfpdeviceInfo:other.hfpdeviceInfo];
  }
  if (other.hasA2DpdeviceInfo) {
    [self setA2DpdeviceInfo:other.a2DpdeviceInfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BtConnectStatusRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BtConnectStatusRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setHfpdeviceInfo:[input readData]];
        break;
      }
      case 34: {
        [self setA2DpdeviceInfo:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultBtConnectStatusRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultBtConnectStatusRsp.rspCode;
}
- (BtConnectStatusRspBuilder*) setRspCode:(RspCode) value {
  resultBtConnectStatusRsp.hasRspCode = YES;
  resultBtConnectStatusRsp.rspCode = value;
  return self;
}
- (BtConnectStatusRspBuilder*) clearRspCode {
  resultBtConnectStatusRsp.hasRspCode = NO;
  resultBtConnectStatusRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultBtConnectStatusRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultBtConnectStatusRsp.errorCode;
}
- (BtConnectStatusRspBuilder*) setErrorCode:(ErrorCode) value {
  resultBtConnectStatusRsp.hasErrorCode = YES;
  resultBtConnectStatusRsp.errorCode = value;
  return self;
}
- (BtConnectStatusRspBuilder*) clearErrorCode {
  resultBtConnectStatusRsp.hasErrorCode = NO;
  resultBtConnectStatusRsp.errorCode = ErrorCodeNormal;
  return self;
}
- (BOOL) hasHfpdeviceInfo {
  return resultBtConnectStatusRsp.hasHfpdeviceInfo;
}
- (NSData*) hfpdeviceInfo {
  return resultBtConnectStatusRsp.hfpdeviceInfo;
}
- (BtConnectStatusRspBuilder*) setHfpdeviceInfo:(NSData*) value {
  resultBtConnectStatusRsp.hasHfpdeviceInfo = YES;
  resultBtConnectStatusRsp.hfpdeviceInfo = value;
  return self;
}
- (BtConnectStatusRspBuilder*) clearHfpdeviceInfo {
  resultBtConnectStatusRsp.hasHfpdeviceInfo = NO;
  resultBtConnectStatusRsp.hfpdeviceInfo = [NSData data];
  return self;
}
- (BOOL) hasA2DpdeviceInfo {
  return resultBtConnectStatusRsp.hasA2DpdeviceInfo;
}
- (NSData*) a2DpdeviceInfo {
  return resultBtConnectStatusRsp.a2DpdeviceInfo;
}
- (BtConnectStatusRspBuilder*) setA2DpdeviceInfo:(NSData*) value {
  resultBtConnectStatusRsp.hasA2DpdeviceInfo = YES;
  resultBtConnectStatusRsp.a2DpdeviceInfo = value;
  return self;
}
- (BtConnectStatusRspBuilder*) clearA2DpdeviceInfo {
  resultBtConnectStatusRsp.hasA2DpdeviceInfo = NO;
  resultBtConnectStatusRsp.a2DpdeviceInfo = [NSData data];
  return self;
}
@end

@interface ReverseVideoReq ()
@property BOOL getReverseVideo;
@end

@implementation ReverseVideoReq

- (BOOL) hasGetReverseVideo {
  return !!hasGetReverseVideo_;
}
- (void) setHasGetReverseVideo:(BOOL) _value_ {
  hasGetReverseVideo_ = !!_value_;
}
- (BOOL) getReverseVideo {
  return !!getReverseVideo_;
}
- (void) setGetReverseVideo:(BOOL) _value_ {
  getReverseVideo_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.getReverseVideo = NO;
  }
  return self;
}
static ReverseVideoReq* defaultReverseVideoReqInstance = nil;
+ (void) initialize {
  if (self == [ReverseVideoReq class]) {
    defaultReverseVideoReqInstance = [[ReverseVideoReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultReverseVideoReqInstance;
}
- (instancetype) defaultInstance {
  return defaultReverseVideoReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetReverseVideo) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetReverseVideo) {
    [output writeBool:1 value:self.getReverseVideo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetReverseVideo) {
    size_ += computeBoolSize(1, self.getReverseVideo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ReverseVideoReq*) parseFromData:(NSData*) data {
  return (ReverseVideoReq*)[[[ReverseVideoReq builder] mergeFromData:data] build];
}
+ (ReverseVideoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseVideoReq*)[[[ReverseVideoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ReverseVideoReq*) parseFromInputStream:(NSInputStream*) input {
  return (ReverseVideoReq*)[[[ReverseVideoReq builder] mergeFromInputStream:input] build];
}
+ (ReverseVideoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseVideoReq*)[[[ReverseVideoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseVideoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ReverseVideoReq*)[[[ReverseVideoReq builder] mergeFromCodedInputStream:input] build];
}
+ (ReverseVideoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseVideoReq*)[[[ReverseVideoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseVideoReqBuilder*) builder {
  return [[ReverseVideoReqBuilder alloc] init];
}
+ (ReverseVideoReqBuilder*) builderWithPrototype:(ReverseVideoReq*) prototype {
  return [[ReverseVideoReq builder] mergeFrom:prototype];
}
- (ReverseVideoReqBuilder*) builder {
  return [ReverseVideoReq builder];
}
- (ReverseVideoReqBuilder*) toBuilder {
  return [ReverseVideoReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetReverseVideo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getReverseVideo", [NSNumber numberWithBool:self.getReverseVideo]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetReverseVideo) {
    [dictionary setObject: [NSNumber numberWithBool:self.getReverseVideo] forKey: @"getReverseVideo"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ReverseVideoReq class]]) {
    return NO;
  }
  ReverseVideoReq *otherMessage = other;
  return
      self.hasGetReverseVideo == otherMessage.hasGetReverseVideo &&
      (!self.hasGetReverseVideo || self.getReverseVideo == otherMessage.getReverseVideo) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetReverseVideo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getReverseVideo] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ReverseVideoReqBuilder()
@property (strong) ReverseVideoReq* resultReverseVideoReq;
@end

@implementation ReverseVideoReqBuilder
@synthesize resultReverseVideoReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReverseVideoReq = [[ReverseVideoReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReverseVideoReq;
}
- (ReverseVideoReqBuilder*) clear {
  self.resultReverseVideoReq = [[ReverseVideoReq alloc] init];
  return self;
}
- (ReverseVideoReqBuilder*) clone {
  return [ReverseVideoReq builderWithPrototype:resultReverseVideoReq];
}
- (ReverseVideoReq*) defaultInstance {
  return [ReverseVideoReq defaultInstance];
}
- (ReverseVideoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ReverseVideoReq*) buildPartial {
  ReverseVideoReq* returnMe = resultReverseVideoReq;
  self.resultReverseVideoReq = nil;
  return returnMe;
}
- (ReverseVideoReqBuilder*) mergeFrom:(ReverseVideoReq*) other {
  if (other == [ReverseVideoReq defaultInstance]) {
    return self;
  }
  if (other.hasGetReverseVideo) {
    [self setGetReverseVideo:other.getReverseVideo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ReverseVideoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ReverseVideoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGetReverseVideo:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasGetReverseVideo {
  return resultReverseVideoReq.hasGetReverseVideo;
}
- (BOOL) getReverseVideo {
  return resultReverseVideoReq.getReverseVideo;
}
- (ReverseVideoReqBuilder*) setGetReverseVideo:(BOOL) value {
  resultReverseVideoReq.hasGetReverseVideo = YES;
  resultReverseVideoReq.getReverseVideo = value;
  return self;
}
- (ReverseVideoReqBuilder*) clearGetReverseVideo {
  resultReverseVideoReq.hasGetReverseVideo = NO;
  resultReverseVideoReq.getReverseVideo = NO;
  return self;
}
@end

@interface ReverseVideoRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@property (strong) NSString* reverseVideoUrl;
@end

@implementation ReverseVideoRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasReverseVideoUrl {
  return !!hasReverseVideoUrl_;
}
- (void) setHasReverseVideoUrl:(BOOL) _value_ {
  hasReverseVideoUrl_ = !!_value_;
}
@synthesize reverseVideoUrl;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
    self.reverseVideoUrl = @"";
  }
  return self;
}
static ReverseVideoRsp* defaultReverseVideoRspInstance = nil;
+ (void) initialize {
  if (self == [ReverseVideoRsp class]) {
    defaultReverseVideoRspInstance = [[ReverseVideoRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultReverseVideoRspInstance;
}
- (instancetype) defaultInstance {
  return defaultReverseVideoRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  if (self.hasReverseVideoUrl) {
    [output writeString:3 value:self.reverseVideoUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  if (self.hasReverseVideoUrl) {
    size_ += computeStringSize(3, self.reverseVideoUrl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ReverseVideoRsp*) parseFromData:(NSData*) data {
  return (ReverseVideoRsp*)[[[ReverseVideoRsp builder] mergeFromData:data] build];
}
+ (ReverseVideoRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseVideoRsp*)[[[ReverseVideoRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ReverseVideoRsp*) parseFromInputStream:(NSInputStream*) input {
  return (ReverseVideoRsp*)[[[ReverseVideoRsp builder] mergeFromInputStream:input] build];
}
+ (ReverseVideoRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseVideoRsp*)[[[ReverseVideoRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseVideoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ReverseVideoRsp*)[[[ReverseVideoRsp builder] mergeFromCodedInputStream:input] build];
}
+ (ReverseVideoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseVideoRsp*)[[[ReverseVideoRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseVideoRspBuilder*) builder {
  return [[ReverseVideoRspBuilder alloc] init];
}
+ (ReverseVideoRspBuilder*) builderWithPrototype:(ReverseVideoRsp*) prototype {
  return [[ReverseVideoRsp builder] mergeFrom:prototype];
}
- (ReverseVideoRspBuilder*) builder {
  return [ReverseVideoRsp builder];
}
- (ReverseVideoRspBuilder*) toBuilder {
  return [ReverseVideoRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  if (self.hasReverseVideoUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reverseVideoUrl", self.reverseVideoUrl];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  if (self.hasReverseVideoUrl) {
    [dictionary setObject: self.reverseVideoUrl forKey: @"reverseVideoUrl"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ReverseVideoRsp class]]) {
    return NO;
  }
  ReverseVideoRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasReverseVideoUrl == otherMessage.hasReverseVideoUrl &&
      (!self.hasReverseVideoUrl || [self.reverseVideoUrl isEqual:otherMessage.reverseVideoUrl]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  if (self.hasReverseVideoUrl) {
    hashCode = hashCode * 31 + [self.reverseVideoUrl hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ReverseVideoRspBuilder()
@property (strong) ReverseVideoRsp* resultReverseVideoRsp;
@end

@implementation ReverseVideoRspBuilder
@synthesize resultReverseVideoRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReverseVideoRsp = [[ReverseVideoRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReverseVideoRsp;
}
- (ReverseVideoRspBuilder*) clear {
  self.resultReverseVideoRsp = [[ReverseVideoRsp alloc] init];
  return self;
}
- (ReverseVideoRspBuilder*) clone {
  return [ReverseVideoRsp builderWithPrototype:resultReverseVideoRsp];
}
- (ReverseVideoRsp*) defaultInstance {
  return [ReverseVideoRsp defaultInstance];
}
- (ReverseVideoRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ReverseVideoRsp*) buildPartial {
  ReverseVideoRsp* returnMe = resultReverseVideoRsp;
  self.resultReverseVideoRsp = nil;
  return returnMe;
}
- (ReverseVideoRspBuilder*) mergeFrom:(ReverseVideoRsp*) other {
  if (other == [ReverseVideoRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasReverseVideoUrl) {
    [self setReverseVideoUrl:other.reverseVideoUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ReverseVideoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ReverseVideoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setReverseVideoUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultReverseVideoRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultReverseVideoRsp.rspCode;
}
- (ReverseVideoRspBuilder*) setRspCode:(RspCode) value {
  resultReverseVideoRsp.hasRspCode = YES;
  resultReverseVideoRsp.rspCode = value;
  return self;
}
- (ReverseVideoRspBuilder*) clearRspCode {
  resultReverseVideoRsp.hasRspCode = NO;
  resultReverseVideoRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultReverseVideoRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultReverseVideoRsp.errorCode;
}
- (ReverseVideoRspBuilder*) setErrorCode:(ErrorCode) value {
  resultReverseVideoRsp.hasErrorCode = YES;
  resultReverseVideoRsp.errorCode = value;
  return self;
}
- (ReverseVideoRspBuilder*) clearErrorCode {
  resultReverseVideoRsp.hasErrorCode = NO;
  resultReverseVideoRsp.errorCode = ErrorCodeNormal;
  return self;
}
- (BOOL) hasReverseVideoUrl {
  return resultReverseVideoRsp.hasReverseVideoUrl;
}
- (NSString*) reverseVideoUrl {
  return resultReverseVideoRsp.reverseVideoUrl;
}
- (ReverseVideoRspBuilder*) setReverseVideoUrl:(NSString*) value {
  resultReverseVideoRsp.hasReverseVideoUrl = YES;
  resultReverseVideoRsp.reverseVideoUrl = value;
  return self;
}
- (ReverseVideoRspBuilder*) clearReverseVideoUrl {
  resultReverseVideoRsp.hasReverseVideoUrl = NO;
  resultReverseVideoRsp.reverseVideoUrl = @"";
  return self;
}
@end

@interface ReverseImageReq ()
@property BOOL getReverseImage;
@end

@implementation ReverseImageReq

- (BOOL) hasGetReverseImage {
  return !!hasGetReverseImage_;
}
- (void) setHasGetReverseImage:(BOOL) _value_ {
  hasGetReverseImage_ = !!_value_;
}
- (BOOL) getReverseImage {
  return !!getReverseImage_;
}
- (void) setGetReverseImage:(BOOL) _value_ {
  getReverseImage_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.getReverseImage = NO;
  }
  return self;
}
static ReverseImageReq* defaultReverseImageReqInstance = nil;
+ (void) initialize {
  if (self == [ReverseImageReq class]) {
    defaultReverseImageReqInstance = [[ReverseImageReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultReverseImageReqInstance;
}
- (instancetype) defaultInstance {
  return defaultReverseImageReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetReverseImage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetReverseImage) {
    [output writeBool:1 value:self.getReverseImage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetReverseImage) {
    size_ += computeBoolSize(1, self.getReverseImage);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ReverseImageReq*) parseFromData:(NSData*) data {
  return (ReverseImageReq*)[[[ReverseImageReq builder] mergeFromData:data] build];
}
+ (ReverseImageReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseImageReq*)[[[ReverseImageReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ReverseImageReq*) parseFromInputStream:(NSInputStream*) input {
  return (ReverseImageReq*)[[[ReverseImageReq builder] mergeFromInputStream:input] build];
}
+ (ReverseImageReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseImageReq*)[[[ReverseImageReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseImageReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ReverseImageReq*)[[[ReverseImageReq builder] mergeFromCodedInputStream:input] build];
}
+ (ReverseImageReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseImageReq*)[[[ReverseImageReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseImageReqBuilder*) builder {
  return [[ReverseImageReqBuilder alloc] init];
}
+ (ReverseImageReqBuilder*) builderWithPrototype:(ReverseImageReq*) prototype {
  return [[ReverseImageReq builder] mergeFrom:prototype];
}
- (ReverseImageReqBuilder*) builder {
  return [ReverseImageReq builder];
}
- (ReverseImageReqBuilder*) toBuilder {
  return [ReverseImageReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetReverseImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getReverseImage", [NSNumber numberWithBool:self.getReverseImage]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetReverseImage) {
    [dictionary setObject: [NSNumber numberWithBool:self.getReverseImage] forKey: @"getReverseImage"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ReverseImageReq class]]) {
    return NO;
  }
  ReverseImageReq *otherMessage = other;
  return
      self.hasGetReverseImage == otherMessage.hasGetReverseImage &&
      (!self.hasGetReverseImage || self.getReverseImage == otherMessage.getReverseImage) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetReverseImage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getReverseImage] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ReverseImageReqBuilder()
@property (strong) ReverseImageReq* resultReverseImageReq;
@end

@implementation ReverseImageReqBuilder
@synthesize resultReverseImageReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReverseImageReq = [[ReverseImageReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReverseImageReq;
}
- (ReverseImageReqBuilder*) clear {
  self.resultReverseImageReq = [[ReverseImageReq alloc] init];
  return self;
}
- (ReverseImageReqBuilder*) clone {
  return [ReverseImageReq builderWithPrototype:resultReverseImageReq];
}
- (ReverseImageReq*) defaultInstance {
  return [ReverseImageReq defaultInstance];
}
- (ReverseImageReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ReverseImageReq*) buildPartial {
  ReverseImageReq* returnMe = resultReverseImageReq;
  self.resultReverseImageReq = nil;
  return returnMe;
}
- (ReverseImageReqBuilder*) mergeFrom:(ReverseImageReq*) other {
  if (other == [ReverseImageReq defaultInstance]) {
    return self;
  }
  if (other.hasGetReverseImage) {
    [self setGetReverseImage:other.getReverseImage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ReverseImageReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ReverseImageReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGetReverseImage:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasGetReverseImage {
  return resultReverseImageReq.hasGetReverseImage;
}
- (BOOL) getReverseImage {
  return resultReverseImageReq.getReverseImage;
}
- (ReverseImageReqBuilder*) setGetReverseImage:(BOOL) value {
  resultReverseImageReq.hasGetReverseImage = YES;
  resultReverseImageReq.getReverseImage = value;
  return self;
}
- (ReverseImageReqBuilder*) clearGetReverseImage {
  resultReverseImageReq.hasGetReverseImage = NO;
  resultReverseImageReq.getReverseImage = NO;
  return self;
}
@end

@interface ReverseImageRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@property (strong) NSString* reverseImageUrl;
@end

@implementation ReverseImageRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasReverseImageUrl {
  return !!hasReverseImageUrl_;
}
- (void) setHasReverseImageUrl:(BOOL) _value_ {
  hasReverseImageUrl_ = !!_value_;
}
@synthesize reverseImageUrl;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
    self.reverseImageUrl = @"";
  }
  return self;
}
static ReverseImageRsp* defaultReverseImageRspInstance = nil;
+ (void) initialize {
  if (self == [ReverseImageRsp class]) {
    defaultReverseImageRspInstance = [[ReverseImageRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultReverseImageRspInstance;
}
- (instancetype) defaultInstance {
  return defaultReverseImageRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  if (self.hasReverseImageUrl) {
    [output writeString:3 value:self.reverseImageUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  if (self.hasReverseImageUrl) {
    size_ += computeStringSize(3, self.reverseImageUrl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ReverseImageRsp*) parseFromData:(NSData*) data {
  return (ReverseImageRsp*)[[[ReverseImageRsp builder] mergeFromData:data] build];
}
+ (ReverseImageRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseImageRsp*)[[[ReverseImageRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ReverseImageRsp*) parseFromInputStream:(NSInputStream*) input {
  return (ReverseImageRsp*)[[[ReverseImageRsp builder] mergeFromInputStream:input] build];
}
+ (ReverseImageRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseImageRsp*)[[[ReverseImageRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseImageRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ReverseImageRsp*)[[[ReverseImageRsp builder] mergeFromCodedInputStream:input] build];
}
+ (ReverseImageRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseImageRsp*)[[[ReverseImageRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseImageRspBuilder*) builder {
  return [[ReverseImageRspBuilder alloc] init];
}
+ (ReverseImageRspBuilder*) builderWithPrototype:(ReverseImageRsp*) prototype {
  return [[ReverseImageRsp builder] mergeFrom:prototype];
}
- (ReverseImageRspBuilder*) builder {
  return [ReverseImageRsp builder];
}
- (ReverseImageRspBuilder*) toBuilder {
  return [ReverseImageRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  if (self.hasReverseImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reverseImageUrl", self.reverseImageUrl];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  if (self.hasReverseImageUrl) {
    [dictionary setObject: self.reverseImageUrl forKey: @"reverseImageUrl"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ReverseImageRsp class]]) {
    return NO;
  }
  ReverseImageRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasReverseImageUrl == otherMessage.hasReverseImageUrl &&
      (!self.hasReverseImageUrl || [self.reverseImageUrl isEqual:otherMessage.reverseImageUrl]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  if (self.hasReverseImageUrl) {
    hashCode = hashCode * 31 + [self.reverseImageUrl hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ReverseImageRspBuilder()
@property (strong) ReverseImageRsp* resultReverseImageRsp;
@end

@implementation ReverseImageRspBuilder
@synthesize resultReverseImageRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReverseImageRsp = [[ReverseImageRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReverseImageRsp;
}
- (ReverseImageRspBuilder*) clear {
  self.resultReverseImageRsp = [[ReverseImageRsp alloc] init];
  return self;
}
- (ReverseImageRspBuilder*) clone {
  return [ReverseImageRsp builderWithPrototype:resultReverseImageRsp];
}
- (ReverseImageRsp*) defaultInstance {
  return [ReverseImageRsp defaultInstance];
}
- (ReverseImageRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ReverseImageRsp*) buildPartial {
  ReverseImageRsp* returnMe = resultReverseImageRsp;
  self.resultReverseImageRsp = nil;
  return returnMe;
}
- (ReverseImageRspBuilder*) mergeFrom:(ReverseImageRsp*) other {
  if (other == [ReverseImageRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasReverseImageUrl) {
    [self setReverseImageUrl:other.reverseImageUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ReverseImageRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ReverseImageRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setReverseImageUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultReverseImageRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultReverseImageRsp.rspCode;
}
- (ReverseImageRspBuilder*) setRspCode:(RspCode) value {
  resultReverseImageRsp.hasRspCode = YES;
  resultReverseImageRsp.rspCode = value;
  return self;
}
- (ReverseImageRspBuilder*) clearRspCode {
  resultReverseImageRsp.hasRspCode = NO;
  resultReverseImageRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultReverseImageRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultReverseImageRsp.errorCode;
}
- (ReverseImageRspBuilder*) setErrorCode:(ErrorCode) value {
  resultReverseImageRsp.hasErrorCode = YES;
  resultReverseImageRsp.errorCode = value;
  return self;
}
- (ReverseImageRspBuilder*) clearErrorCode {
  resultReverseImageRsp.hasErrorCode = NO;
  resultReverseImageRsp.errorCode = ErrorCodeNormal;
  return self;
}
- (BOOL) hasReverseImageUrl {
  return resultReverseImageRsp.hasReverseImageUrl;
}
- (NSString*) reverseImageUrl {
  return resultReverseImageRsp.reverseImageUrl;
}
- (ReverseImageRspBuilder*) setReverseImageUrl:(NSString*) value {
  resultReverseImageRsp.hasReverseImageUrl = YES;
  resultReverseImageRsp.reverseImageUrl = value;
  return self;
}
- (ReverseImageRspBuilder*) clearReverseImageUrl {
  resultReverseImageRsp.hasReverseImageUrl = NO;
  resultReverseImageRsp.reverseImageUrl = @"";
  return self;
}
@end

@interface ReverseStatusReq ()
@property BOOL reverseStatus;
@end

@implementation ReverseStatusReq

- (BOOL) hasReverseStatus {
  return !!hasReverseStatus_;
}
- (void) setHasReverseStatus:(BOOL) _value_ {
  hasReverseStatus_ = !!_value_;
}
- (BOOL) reverseStatus {
  return !!reverseStatus_;
}
- (void) setReverseStatus:(BOOL) _value_ {
  reverseStatus_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.reverseStatus = NO;
  }
  return self;
}
static ReverseStatusReq* defaultReverseStatusReqInstance = nil;
+ (void) initialize {
  if (self == [ReverseStatusReq class]) {
    defaultReverseStatusReqInstance = [[ReverseStatusReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultReverseStatusReqInstance;
}
- (instancetype) defaultInstance {
  return defaultReverseStatusReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasReverseStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasReverseStatus) {
    [output writeBool:1 value:self.reverseStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasReverseStatus) {
    size_ += computeBoolSize(1, self.reverseStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ReverseStatusReq*) parseFromData:(NSData*) data {
  return (ReverseStatusReq*)[[[ReverseStatusReq builder] mergeFromData:data] build];
}
+ (ReverseStatusReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseStatusReq*)[[[ReverseStatusReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ReverseStatusReq*) parseFromInputStream:(NSInputStream*) input {
  return (ReverseStatusReq*)[[[ReverseStatusReq builder] mergeFromInputStream:input] build];
}
+ (ReverseStatusReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseStatusReq*)[[[ReverseStatusReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseStatusReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ReverseStatusReq*)[[[ReverseStatusReq builder] mergeFromCodedInputStream:input] build];
}
+ (ReverseStatusReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseStatusReq*)[[[ReverseStatusReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseStatusReqBuilder*) builder {
  return [[ReverseStatusReqBuilder alloc] init];
}
+ (ReverseStatusReqBuilder*) builderWithPrototype:(ReverseStatusReq*) prototype {
  return [[ReverseStatusReq builder] mergeFrom:prototype];
}
- (ReverseStatusReqBuilder*) builder {
  return [ReverseStatusReq builder];
}
- (ReverseStatusReqBuilder*) toBuilder {
  return [ReverseStatusReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasReverseStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reverseStatus", [NSNumber numberWithBool:self.reverseStatus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasReverseStatus) {
    [dictionary setObject: [NSNumber numberWithBool:self.reverseStatus] forKey: @"reverseStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ReverseStatusReq class]]) {
    return NO;
  }
  ReverseStatusReq *otherMessage = other;
  return
      self.hasReverseStatus == otherMessage.hasReverseStatus &&
      (!self.hasReverseStatus || self.reverseStatus == otherMessage.reverseStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasReverseStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.reverseStatus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ReverseStatusReqBuilder()
@property (strong) ReverseStatusReq* resultReverseStatusReq;
@end

@implementation ReverseStatusReqBuilder
@synthesize resultReverseStatusReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReverseStatusReq = [[ReverseStatusReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReverseStatusReq;
}
- (ReverseStatusReqBuilder*) clear {
  self.resultReverseStatusReq = [[ReverseStatusReq alloc] init];
  return self;
}
- (ReverseStatusReqBuilder*) clone {
  return [ReverseStatusReq builderWithPrototype:resultReverseStatusReq];
}
- (ReverseStatusReq*) defaultInstance {
  return [ReverseStatusReq defaultInstance];
}
- (ReverseStatusReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ReverseStatusReq*) buildPartial {
  ReverseStatusReq* returnMe = resultReverseStatusReq;
  self.resultReverseStatusReq = nil;
  return returnMe;
}
- (ReverseStatusReqBuilder*) mergeFrom:(ReverseStatusReq*) other {
  if (other == [ReverseStatusReq defaultInstance]) {
    return self;
  }
  if (other.hasReverseStatus) {
    [self setReverseStatus:other.reverseStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ReverseStatusReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ReverseStatusReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setReverseStatus:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasReverseStatus {
  return resultReverseStatusReq.hasReverseStatus;
}
- (BOOL) reverseStatus {
  return resultReverseStatusReq.reverseStatus;
}
- (ReverseStatusReqBuilder*) setReverseStatus:(BOOL) value {
  resultReverseStatusReq.hasReverseStatus = YES;
  resultReverseStatusReq.reverseStatus = value;
  return self;
}
- (ReverseStatusReqBuilder*) clearReverseStatus {
  resultReverseStatusReq.hasReverseStatus = NO;
  resultReverseStatusReq.reverseStatus = NO;
  return self;
}
@end

@interface ReverseStatusRsp ()
@property RspCode rspCode;
@property RevesedState nRevesedState;
@end

@implementation ReverseStatusRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasNRevesedState {
  return !!hasNRevesedState_;
}
- (void) setHasNRevesedState:(BOOL) _value_ {
  hasNRevesedState_ = !!_value_;
}
@synthesize nRevesedState;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.nRevesedState = RevesedStateRend;
  }
  return self;
}
static ReverseStatusRsp* defaultReverseStatusRspInstance = nil;
+ (void) initialize {
  if (self == [ReverseStatusRsp class]) {
    defaultReverseStatusRspInstance = [[ReverseStatusRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultReverseStatusRspInstance;
}
- (instancetype) defaultInstance {
  return defaultReverseStatusRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasNRevesedState) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasNRevesedState) {
    [output writeEnum:2 value:self.nRevesedState];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasNRevesedState) {
    size_ += computeEnumSize(2, self.nRevesedState);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ReverseStatusRsp*) parseFromData:(NSData*) data {
  return (ReverseStatusRsp*)[[[ReverseStatusRsp builder] mergeFromData:data] build];
}
+ (ReverseStatusRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseStatusRsp*)[[[ReverseStatusRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ReverseStatusRsp*) parseFromInputStream:(NSInputStream*) input {
  return (ReverseStatusRsp*)[[[ReverseStatusRsp builder] mergeFromInputStream:input] build];
}
+ (ReverseStatusRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseStatusRsp*)[[[ReverseStatusRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseStatusRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ReverseStatusRsp*)[[[ReverseStatusRsp builder] mergeFromCodedInputStream:input] build];
}
+ (ReverseStatusRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseStatusRsp*)[[[ReverseStatusRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseStatusRspBuilder*) builder {
  return [[ReverseStatusRspBuilder alloc] init];
}
+ (ReverseStatusRspBuilder*) builderWithPrototype:(ReverseStatusRsp*) prototype {
  return [[ReverseStatusRsp builder] mergeFrom:prototype];
}
- (ReverseStatusRspBuilder*) builder {
  return [ReverseStatusRsp builder];
}
- (ReverseStatusRspBuilder*) toBuilder {
  return [ReverseStatusRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasNRevesedState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nRevesedState", NSStringFromRevesedState(self.nRevesedState)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasNRevesedState) {
    [dictionary setObject: @(self.nRevesedState) forKey: @"nRevesedState"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ReverseStatusRsp class]]) {
    return NO;
  }
  ReverseStatusRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasNRevesedState == otherMessage.hasNRevesedState &&
      (!self.hasNRevesedState || self.nRevesedState == otherMessage.nRevesedState) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasNRevesedState) {
    hashCode = hashCode * 31 + self.nRevesedState;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ReverseStatusRspBuilder()
@property (strong) ReverseStatusRsp* resultReverseStatusRsp;
@end

@implementation ReverseStatusRspBuilder
@synthesize resultReverseStatusRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReverseStatusRsp = [[ReverseStatusRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReverseStatusRsp;
}
- (ReverseStatusRspBuilder*) clear {
  self.resultReverseStatusRsp = [[ReverseStatusRsp alloc] init];
  return self;
}
- (ReverseStatusRspBuilder*) clone {
  return [ReverseStatusRsp builderWithPrototype:resultReverseStatusRsp];
}
- (ReverseStatusRsp*) defaultInstance {
  return [ReverseStatusRsp defaultInstance];
}
- (ReverseStatusRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ReverseStatusRsp*) buildPartial {
  ReverseStatusRsp* returnMe = resultReverseStatusRsp;
  self.resultReverseStatusRsp = nil;
  return returnMe;
}
- (ReverseStatusRspBuilder*) mergeFrom:(ReverseStatusRsp*) other {
  if (other == [ReverseStatusRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasNRevesedState) {
    [self setNRevesedState:other.nRevesedState];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ReverseStatusRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ReverseStatusRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        RevesedState value = (RevesedState)[input readEnum];
        if (RevesedStateIsValidValue(value)) {
          [self setNRevesedState:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultReverseStatusRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultReverseStatusRsp.rspCode;
}
- (ReverseStatusRspBuilder*) setRspCode:(RspCode) value {
  resultReverseStatusRsp.hasRspCode = YES;
  resultReverseStatusRsp.rspCode = value;
  return self;
}
- (ReverseStatusRspBuilder*) clearRspCode {
  resultReverseStatusRsp.hasRspCode = NO;
  resultReverseStatusRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasNRevesedState {
  return resultReverseStatusRsp.hasNRevesedState;
}
- (RevesedState) nRevesedState {
  return resultReverseStatusRsp.nRevesedState;
}
- (ReverseStatusRspBuilder*) setNRevesedState:(RevesedState) value {
  resultReverseStatusRsp.hasNRevesedState = YES;
  resultReverseStatusRsp.nRevesedState = value;
  return self;
}
- (ReverseStatusRspBuilder*) clearNRevesedState {
  resultReverseStatusRsp.hasNRevesedState = NO;
  resultReverseStatusRsp.nRevesedState = RevesedStateRend;
  return self;
}
@end

@interface SeatAdjustSetReq ()
@property SeatAdjust seatAdjustStatus;
@end

@implementation SeatAdjustSetReq

- (BOOL) hasSeatAdjustStatus {
  return !!hasSeatAdjustStatus_;
}
- (void) setHasSeatAdjustStatus:(BOOL) _value_ {
  hasSeatAdjustStatus_ = !!_value_;
}
@synthesize seatAdjustStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.seatAdjustStatus = SeatAdjustSetatAdjustUp;
  }
  return self;
}
static SeatAdjustSetReq* defaultSeatAdjustSetReqInstance = nil;
+ (void) initialize {
  if (self == [SeatAdjustSetReq class]) {
    defaultSeatAdjustSetReqInstance = [[SeatAdjustSetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSeatAdjustSetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultSeatAdjustSetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeatAdjustStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeatAdjustStatus) {
    [output writeEnum:1 value:self.seatAdjustStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeatAdjustStatus) {
    size_ += computeEnumSize(1, self.seatAdjustStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SeatAdjustSetReq*) parseFromData:(NSData*) data {
  return (SeatAdjustSetReq*)[[[SeatAdjustSetReq builder] mergeFromData:data] build];
}
+ (SeatAdjustSetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SeatAdjustSetReq*)[[[SeatAdjustSetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SeatAdjustSetReq*) parseFromInputStream:(NSInputStream*) input {
  return (SeatAdjustSetReq*)[[[SeatAdjustSetReq builder] mergeFromInputStream:input] build];
}
+ (SeatAdjustSetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SeatAdjustSetReq*)[[[SeatAdjustSetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SeatAdjustSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SeatAdjustSetReq*)[[[SeatAdjustSetReq builder] mergeFromCodedInputStream:input] build];
}
+ (SeatAdjustSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SeatAdjustSetReq*)[[[SeatAdjustSetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SeatAdjustSetReqBuilder*) builder {
  return [[SeatAdjustSetReqBuilder alloc] init];
}
+ (SeatAdjustSetReqBuilder*) builderWithPrototype:(SeatAdjustSetReq*) prototype {
  return [[SeatAdjustSetReq builder] mergeFrom:prototype];
}
- (SeatAdjustSetReqBuilder*) builder {
  return [SeatAdjustSetReq builder];
}
- (SeatAdjustSetReqBuilder*) toBuilder {
  return [SeatAdjustSetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeatAdjustStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seatAdjustStatus", NSStringFromSeatAdjust(self.seatAdjustStatus)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeatAdjustStatus) {
    [dictionary setObject: @(self.seatAdjustStatus) forKey: @"seatAdjustStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SeatAdjustSetReq class]]) {
    return NO;
  }
  SeatAdjustSetReq *otherMessage = other;
  return
      self.hasSeatAdjustStatus == otherMessage.hasSeatAdjustStatus &&
      (!self.hasSeatAdjustStatus || self.seatAdjustStatus == otherMessage.seatAdjustStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeatAdjustStatus) {
    hashCode = hashCode * 31 + self.seatAdjustStatus;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SeatAdjustSetReqBuilder()
@property (strong) SeatAdjustSetReq* resultSeatAdjustSetReq;
@end

@implementation SeatAdjustSetReqBuilder
@synthesize resultSeatAdjustSetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSeatAdjustSetReq = [[SeatAdjustSetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSeatAdjustSetReq;
}
- (SeatAdjustSetReqBuilder*) clear {
  self.resultSeatAdjustSetReq = [[SeatAdjustSetReq alloc] init];
  return self;
}
- (SeatAdjustSetReqBuilder*) clone {
  return [SeatAdjustSetReq builderWithPrototype:resultSeatAdjustSetReq];
}
- (SeatAdjustSetReq*) defaultInstance {
  return [SeatAdjustSetReq defaultInstance];
}
- (SeatAdjustSetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SeatAdjustSetReq*) buildPartial {
  SeatAdjustSetReq* returnMe = resultSeatAdjustSetReq;
  self.resultSeatAdjustSetReq = nil;
  return returnMe;
}
- (SeatAdjustSetReqBuilder*) mergeFrom:(SeatAdjustSetReq*) other {
  if (other == [SeatAdjustSetReq defaultInstance]) {
    return self;
  }
  if (other.hasSeatAdjustStatus) {
    [self setSeatAdjustStatus:other.seatAdjustStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SeatAdjustSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SeatAdjustSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        SeatAdjust value = (SeatAdjust)[input readEnum];
        if (SeatAdjustIsValidValue(value)) {
          [self setSeatAdjustStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasSeatAdjustStatus {
  return resultSeatAdjustSetReq.hasSeatAdjustStatus;
}
- (SeatAdjust) seatAdjustStatus {
  return resultSeatAdjustSetReq.seatAdjustStatus;
}
- (SeatAdjustSetReqBuilder*) setSeatAdjustStatus:(SeatAdjust) value {
  resultSeatAdjustSetReq.hasSeatAdjustStatus = YES;
  resultSeatAdjustSetReq.seatAdjustStatus = value;
  return self;
}
- (SeatAdjustSetReqBuilder*) clearSeatAdjustStatus {
  resultSeatAdjustSetReq.hasSeatAdjustStatus = NO;
  resultSeatAdjustSetReq.seatAdjustStatus = SeatAdjustSetatAdjustUp;
  return self;
}
@end

@interface ACParameterSetReq ()
@property BOOL onoff;
@property BOOL acopen;
@property CycMode cycMode;
@property BlowMode blowMode0;
@property BlowMode blowMode1;
@property UInt32 windSpeed;
@property UInt32 temperature0;
@property UInt32 temperature1;
@end

@implementation ACParameterSetReq

- (BOOL) hasOnoff {
  return !!hasOnoff_;
}
- (void) setHasOnoff:(BOOL) _value_ {
  hasOnoff_ = !!_value_;
}
- (BOOL) onoff {
  return !!onoff_;
}
- (void) setOnoff:(BOOL) _value_ {
  onoff_ = !!_value_;
}
- (BOOL) hasAcopen {
  return !!hasAcopen_;
}
- (void) setHasAcopen:(BOOL) _value_ {
  hasAcopen_ = !!_value_;
}
- (BOOL) acopen {
  return !!acopen_;
}
- (void) setAcopen:(BOOL) _value_ {
  acopen_ = !!_value_;
}
- (BOOL) hasCycMode {
  return !!hasCycMode_;
}
- (void) setHasCycMode:(BOOL) _value_ {
  hasCycMode_ = !!_value_;
}
@synthesize cycMode;
- (BOOL) hasBlowMode0 {
  return !!hasBlowMode0_;
}
- (void) setHasBlowMode0:(BOOL) _value_ {
  hasBlowMode0_ = !!_value_;
}
@synthesize blowMode0;
- (BOOL) hasBlowMode1 {
  return !!hasBlowMode1_;
}
- (void) setHasBlowMode1:(BOOL) _value_ {
  hasBlowMode1_ = !!_value_;
}
@synthesize blowMode1;
- (BOOL) hasWindSpeed {
  return !!hasWindSpeed_;
}
- (void) setHasWindSpeed:(BOOL) _value_ {
  hasWindSpeed_ = !!_value_;
}
@synthesize windSpeed;
- (BOOL) hasTemperature0 {
  return !!hasTemperature0_;
}
- (void) setHasTemperature0:(BOOL) _value_ {
  hasTemperature0_ = !!_value_;
}
@synthesize temperature0;
- (BOOL) hasTemperature1 {
  return !!hasTemperature1_;
}
- (void) setHasTemperature1:(BOOL) _value_ {
  hasTemperature1_ = !!_value_;
}
@synthesize temperature1;
- (instancetype) init {
  if ((self = [super init])) {
    self.onoff = NO;
    self.acopen = NO;
    self.cycMode = CycModeCycModeInside;
    self.blowMode0 = BlowModeBlowFace;
    self.blowMode1 = BlowModeBlowFace;
    self.windSpeed = 0;
    self.temperature0 = 0;
    self.temperature1 = 0;
  }
  return self;
}
static ACParameterSetReq* defaultACParameterSetReqInstance = nil;
+ (void) initialize {
  if (self == [ACParameterSetReq class]) {
    defaultACParameterSetReqInstance = [[ACParameterSetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultACParameterSetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultACParameterSetReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOnoff) {
    [output writeBool:1 value:self.onoff];
  }
  if (self.hasAcopen) {
    [output writeBool:2 value:self.acopen];
  }
  if (self.hasCycMode) {
    [output writeEnum:3 value:self.cycMode];
  }
  if (self.hasBlowMode0) {
    [output writeEnum:4 value:self.blowMode0];
  }
  if (self.hasBlowMode1) {
    [output writeEnum:5 value:self.blowMode1];
  }
  if (self.hasWindSpeed) {
    [output writeUInt32:6 value:self.windSpeed];
  }
  if (self.hasTemperature0) {
    [output writeUInt32:7 value:self.temperature0];
  }
  if (self.hasTemperature1) {
    [output writeUInt32:8 value:self.temperature1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOnoff) {
    size_ += computeBoolSize(1, self.onoff);
  }
  if (self.hasAcopen) {
    size_ += computeBoolSize(2, self.acopen);
  }
  if (self.hasCycMode) {
    size_ += computeEnumSize(3, self.cycMode);
  }
  if (self.hasBlowMode0) {
    size_ += computeEnumSize(4, self.blowMode0);
  }
  if (self.hasBlowMode1) {
    size_ += computeEnumSize(5, self.blowMode1);
  }
  if (self.hasWindSpeed) {
    size_ += computeUInt32Size(6, self.windSpeed);
  }
  if (self.hasTemperature0) {
    size_ += computeUInt32Size(7, self.temperature0);
  }
  if (self.hasTemperature1) {
    size_ += computeUInt32Size(8, self.temperature1);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ACParameterSetReq*) parseFromData:(NSData*) data {
  return (ACParameterSetReq*)[[[ACParameterSetReq builder] mergeFromData:data] build];
}
+ (ACParameterSetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterSetReq*)[[[ACParameterSetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ACParameterSetReq*) parseFromInputStream:(NSInputStream*) input {
  return (ACParameterSetReq*)[[[ACParameterSetReq builder] mergeFromInputStream:input] build];
}
+ (ACParameterSetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterSetReq*)[[[ACParameterSetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ACParameterSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ACParameterSetReq*)[[[ACParameterSetReq builder] mergeFromCodedInputStream:input] build];
}
+ (ACParameterSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterSetReq*)[[[ACParameterSetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ACParameterSetReqBuilder*) builder {
  return [[ACParameterSetReqBuilder alloc] init];
}
+ (ACParameterSetReqBuilder*) builderWithPrototype:(ACParameterSetReq*) prototype {
  return [[ACParameterSetReq builder] mergeFrom:prototype];
}
- (ACParameterSetReqBuilder*) builder {
  return [ACParameterSetReq builder];
}
- (ACParameterSetReqBuilder*) toBuilder {
  return [ACParameterSetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOnoff) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onoff", [NSNumber numberWithBool:self.onoff]];
  }
  if (self.hasAcopen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"acopen", [NSNumber numberWithBool:self.acopen]];
  }
  if (self.hasCycMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cycMode", NSStringFromCycMode(self.cycMode)];
  }
  if (self.hasBlowMode0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"blowMode0", NSStringFromBlowMode(self.blowMode0)];
  }
  if (self.hasBlowMode1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"blowMode1", NSStringFromBlowMode(self.blowMode1)];
  }
  if (self.hasWindSpeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"windSpeed", [NSNumber numberWithInteger:self.windSpeed]];
  }
  if (self.hasTemperature0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temperature0", [NSNumber numberWithInteger:self.temperature0]];
  }
  if (self.hasTemperature1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temperature1", [NSNumber numberWithInteger:self.temperature1]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOnoff) {
    [dictionary setObject: [NSNumber numberWithBool:self.onoff] forKey: @"onoff"];
  }
  if (self.hasAcopen) {
    [dictionary setObject: [NSNumber numberWithBool:self.acopen] forKey: @"acopen"];
  }
  if (self.hasCycMode) {
    [dictionary setObject: @(self.cycMode) forKey: @"cycMode"];
  }
  if (self.hasBlowMode0) {
    [dictionary setObject: @(self.blowMode0) forKey: @"blowMode0"];
  }
  if (self.hasBlowMode1) {
    [dictionary setObject: @(self.blowMode1) forKey: @"blowMode1"];
  }
  if (self.hasWindSpeed) {
    [dictionary setObject: [NSNumber numberWithInteger:self.windSpeed] forKey: @"windSpeed"];
  }
  if (self.hasTemperature0) {
    [dictionary setObject: [NSNumber numberWithInteger:self.temperature0] forKey: @"temperature0"];
  }
  if (self.hasTemperature1) {
    [dictionary setObject: [NSNumber numberWithInteger:self.temperature1] forKey: @"temperature1"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ACParameterSetReq class]]) {
    return NO;
  }
  ACParameterSetReq *otherMessage = other;
  return
      self.hasOnoff == otherMessage.hasOnoff &&
      (!self.hasOnoff || self.onoff == otherMessage.onoff) &&
      self.hasAcopen == otherMessage.hasAcopen &&
      (!self.hasAcopen || self.acopen == otherMessage.acopen) &&
      self.hasCycMode == otherMessage.hasCycMode &&
      (!self.hasCycMode || self.cycMode == otherMessage.cycMode) &&
      self.hasBlowMode0 == otherMessage.hasBlowMode0 &&
      (!self.hasBlowMode0 || self.blowMode0 == otherMessage.blowMode0) &&
      self.hasBlowMode1 == otherMessage.hasBlowMode1 &&
      (!self.hasBlowMode1 || self.blowMode1 == otherMessage.blowMode1) &&
      self.hasWindSpeed == otherMessage.hasWindSpeed &&
      (!self.hasWindSpeed || self.windSpeed == otherMessage.windSpeed) &&
      self.hasTemperature0 == otherMessage.hasTemperature0 &&
      (!self.hasTemperature0 || self.temperature0 == otherMessage.temperature0) &&
      self.hasTemperature1 == otherMessage.hasTemperature1 &&
      (!self.hasTemperature1 || self.temperature1 == otherMessage.temperature1) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOnoff) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.onoff] hash];
  }
  if (self.hasAcopen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.acopen] hash];
  }
  if (self.hasCycMode) {
    hashCode = hashCode * 31 + self.cycMode;
  }
  if (self.hasBlowMode0) {
    hashCode = hashCode * 31 + self.blowMode0;
  }
  if (self.hasBlowMode1) {
    hashCode = hashCode * 31 + self.blowMode1;
  }
  if (self.hasWindSpeed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.windSpeed] hash];
  }
  if (self.hasTemperature0) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.temperature0] hash];
  }
  if (self.hasTemperature1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.temperature1] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ACParameterSetReqBuilder()
@property (strong) ACParameterSetReq* resultAcparameterSetReq;
@end

@implementation ACParameterSetReqBuilder
@synthesize resultAcparameterSetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAcparameterSetReq = [[ACParameterSetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAcparameterSetReq;
}
- (ACParameterSetReqBuilder*) clear {
  self.resultAcparameterSetReq = [[ACParameterSetReq alloc] init];
  return self;
}
- (ACParameterSetReqBuilder*) clone {
  return [ACParameterSetReq builderWithPrototype:resultAcparameterSetReq];
}
- (ACParameterSetReq*) defaultInstance {
  return [ACParameterSetReq defaultInstance];
}
- (ACParameterSetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ACParameterSetReq*) buildPartial {
  ACParameterSetReq* returnMe = resultAcparameterSetReq;
  self.resultAcparameterSetReq = nil;
  return returnMe;
}
- (ACParameterSetReqBuilder*) mergeFrom:(ACParameterSetReq*) other {
  if (other == [ACParameterSetReq defaultInstance]) {
    return self;
  }
  if (other.hasOnoff) {
    [self setOnoff:other.onoff];
  }
  if (other.hasAcopen) {
    [self setAcopen:other.acopen];
  }
  if (other.hasCycMode) {
    [self setCycMode:other.cycMode];
  }
  if (other.hasBlowMode0) {
    [self setBlowMode0:other.blowMode0];
  }
  if (other.hasBlowMode1) {
    [self setBlowMode1:other.blowMode1];
  }
  if (other.hasWindSpeed) {
    [self setWindSpeed:other.windSpeed];
  }
  if (other.hasTemperature0) {
    [self setTemperature0:other.temperature0];
  }
  if (other.hasTemperature1) {
    [self setTemperature1:other.temperature1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ACParameterSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ACParameterSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOnoff:[input readBool]];
        break;
      }
      case 16: {
        [self setAcopen:[input readBool]];
        break;
      }
      case 24: {
        CycMode value = (CycMode)[input readEnum];
        if (CycModeIsValidValue(value)) {
          [self setCycMode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        BlowMode value = (BlowMode)[input readEnum];
        if (BlowModeIsValidValue(value)) {
          [self setBlowMode0:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        BlowMode value = (BlowMode)[input readEnum];
        if (BlowModeIsValidValue(value)) {
          [self setBlowMode1:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 48: {
        [self setWindSpeed:[input readUInt32]];
        break;
      }
      case 56: {
        [self setTemperature0:[input readUInt32]];
        break;
      }
      case 64: {
        [self setTemperature1:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOnoff {
  return resultAcparameterSetReq.hasOnoff;
}
- (BOOL) onoff {
  return resultAcparameterSetReq.onoff;
}
- (ACParameterSetReqBuilder*) setOnoff:(BOOL) value {
  resultAcparameterSetReq.hasOnoff = YES;
  resultAcparameterSetReq.onoff = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearOnoff {
  resultAcparameterSetReq.hasOnoff = NO;
  resultAcparameterSetReq.onoff = NO;
  return self;
}
- (BOOL) hasAcopen {
  return resultAcparameterSetReq.hasAcopen;
}
- (BOOL) acopen {
  return resultAcparameterSetReq.acopen;
}
- (ACParameterSetReqBuilder*) setAcopen:(BOOL) value {
  resultAcparameterSetReq.hasAcopen = YES;
  resultAcparameterSetReq.acopen = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearAcopen {
  resultAcparameterSetReq.hasAcopen = NO;
  resultAcparameterSetReq.acopen = NO;
  return self;
}
- (BOOL) hasCycMode {
  return resultAcparameterSetReq.hasCycMode;
}
- (CycMode) cycMode {
  return resultAcparameterSetReq.cycMode;
}
- (ACParameterSetReqBuilder*) setCycMode:(CycMode) value {
  resultAcparameterSetReq.hasCycMode = YES;
  resultAcparameterSetReq.cycMode = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearCycMode {
  resultAcparameterSetReq.hasCycMode = NO;
  resultAcparameterSetReq.cycMode = CycModeCycModeInside;
  return self;
}
- (BOOL) hasBlowMode0 {
  return resultAcparameterSetReq.hasBlowMode0;
}
- (BlowMode) blowMode0 {
  return resultAcparameterSetReq.blowMode0;
}
- (ACParameterSetReqBuilder*) setBlowMode0:(BlowMode) value {
  resultAcparameterSetReq.hasBlowMode0 = YES;
  resultAcparameterSetReq.blowMode0 = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearBlowMode0 {
  resultAcparameterSetReq.hasBlowMode0 = NO;
  resultAcparameterSetReq.blowMode0 = BlowModeBlowFace;
  return self;
}
- (BOOL) hasBlowMode1 {
  return resultAcparameterSetReq.hasBlowMode1;
}
- (BlowMode) blowMode1 {
  return resultAcparameterSetReq.blowMode1;
}
- (ACParameterSetReqBuilder*) setBlowMode1:(BlowMode) value {
  resultAcparameterSetReq.hasBlowMode1 = YES;
  resultAcparameterSetReq.blowMode1 = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearBlowMode1 {
  resultAcparameterSetReq.hasBlowMode1 = NO;
  resultAcparameterSetReq.blowMode1 = BlowModeBlowFace;
  return self;
}
- (BOOL) hasWindSpeed {
  return resultAcparameterSetReq.hasWindSpeed;
}
- (UInt32) windSpeed {
  return resultAcparameterSetReq.windSpeed;
}
- (ACParameterSetReqBuilder*) setWindSpeed:(UInt32) value {
  resultAcparameterSetReq.hasWindSpeed = YES;
  resultAcparameterSetReq.windSpeed = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearWindSpeed {
  resultAcparameterSetReq.hasWindSpeed = NO;
  resultAcparameterSetReq.windSpeed = 0;
  return self;
}
- (BOOL) hasTemperature0 {
  return resultAcparameterSetReq.hasTemperature0;
}
- (UInt32) temperature0 {
  return resultAcparameterSetReq.temperature0;
}
- (ACParameterSetReqBuilder*) setTemperature0:(UInt32) value {
  resultAcparameterSetReq.hasTemperature0 = YES;
  resultAcparameterSetReq.temperature0 = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearTemperature0 {
  resultAcparameterSetReq.hasTemperature0 = NO;
  resultAcparameterSetReq.temperature0 = 0;
  return self;
}
- (BOOL) hasTemperature1 {
  return resultAcparameterSetReq.hasTemperature1;
}
- (UInt32) temperature1 {
  return resultAcparameterSetReq.temperature1;
}
- (ACParameterSetReqBuilder*) setTemperature1:(UInt32) value {
  resultAcparameterSetReq.hasTemperature1 = YES;
  resultAcparameterSetReq.temperature1 = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearTemperature1 {
  resultAcparameterSetReq.hasTemperature1 = NO;
  resultAcparameterSetReq.temperature1 = 0;
  return self;
}
@end

@interface ACParameterGetReq ()
@property BOOL onOff;
@property BOOL getAcopen;
@property BOOL getCycMode;
@property BOOL getBlowMode0;
@property BOOL getBlowMode1;
@property BOOL getWindSpeed;
@property BOOL getTemperature0;
@property BOOL getTemperature1;
@end

@implementation ACParameterGetReq

- (BOOL) hasOnOff {
  return !!hasOnOff_;
}
- (void) setHasOnOff:(BOOL) _value_ {
  hasOnOff_ = !!_value_;
}
- (BOOL) onOff {
  return !!onOff_;
}
- (void) setOnOff:(BOOL) _value_ {
  onOff_ = !!_value_;
}
- (BOOL) hasGetAcopen {
  return !!hasGetAcopen_;
}
- (void) setHasGetAcopen:(BOOL) _value_ {
  hasGetAcopen_ = !!_value_;
}
- (BOOL) getAcopen {
  return !!getAcopen_;
}
- (void) setGetAcopen:(BOOL) _value_ {
  getAcopen_ = !!_value_;
}
- (BOOL) hasGetCycMode {
  return !!hasGetCycMode_;
}
- (void) setHasGetCycMode:(BOOL) _value_ {
  hasGetCycMode_ = !!_value_;
}
- (BOOL) getCycMode {
  return !!getCycMode_;
}
- (void) setGetCycMode:(BOOL) _value_ {
  getCycMode_ = !!_value_;
}
- (BOOL) hasGetBlowMode0 {
  return !!hasGetBlowMode0_;
}
- (void) setHasGetBlowMode0:(BOOL) _value_ {
  hasGetBlowMode0_ = !!_value_;
}
- (BOOL) getBlowMode0 {
  return !!getBlowMode0_;
}
- (void) setGetBlowMode0:(BOOL) _value_ {
  getBlowMode0_ = !!_value_;
}
- (BOOL) hasGetBlowMode1 {
  return !!hasGetBlowMode1_;
}
- (void) setHasGetBlowMode1:(BOOL) _value_ {
  hasGetBlowMode1_ = !!_value_;
}
- (BOOL) getBlowMode1 {
  return !!getBlowMode1_;
}
- (void) setGetBlowMode1:(BOOL) _value_ {
  getBlowMode1_ = !!_value_;
}
- (BOOL) hasGetWindSpeed {
  return !!hasGetWindSpeed_;
}
- (void) setHasGetWindSpeed:(BOOL) _value_ {
  hasGetWindSpeed_ = !!_value_;
}
- (BOOL) getWindSpeed {
  return !!getWindSpeed_;
}
- (void) setGetWindSpeed:(BOOL) _value_ {
  getWindSpeed_ = !!_value_;
}
- (BOOL) hasGetTemperature0 {
  return !!hasGetTemperature0_;
}
- (void) setHasGetTemperature0:(BOOL) _value_ {
  hasGetTemperature0_ = !!_value_;
}
- (BOOL) getTemperature0 {
  return !!getTemperature0_;
}
- (void) setGetTemperature0:(BOOL) _value_ {
  getTemperature0_ = !!_value_;
}
- (BOOL) hasGetTemperature1 {
  return !!hasGetTemperature1_;
}
- (void) setHasGetTemperature1:(BOOL) _value_ {
  hasGetTemperature1_ = !!_value_;
}
- (BOOL) getTemperature1 {
  return !!getTemperature1_;
}
- (void) setGetTemperature1:(BOOL) _value_ {
  getTemperature1_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.onOff = NO;
    self.getAcopen = NO;
    self.getCycMode = NO;
    self.getBlowMode0 = NO;
    self.getBlowMode1 = NO;
    self.getWindSpeed = NO;
    self.getTemperature0 = NO;
    self.getTemperature1 = NO;
  }
  return self;
}
static ACParameterGetReq* defaultACParameterGetReqInstance = nil;
+ (void) initialize {
  if (self == [ACParameterGetReq class]) {
    defaultACParameterGetReqInstance = [[ACParameterGetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultACParameterGetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultACParameterGetReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOnOff) {
    [output writeBool:1 value:self.onOff];
  }
  if (self.hasGetAcopen) {
    [output writeBool:2 value:self.getAcopen];
  }
  if (self.hasGetCycMode) {
    [output writeBool:3 value:self.getCycMode];
  }
  if (self.hasGetBlowMode0) {
    [output writeBool:4 value:self.getBlowMode0];
  }
  if (self.hasGetBlowMode1) {
    [output writeBool:5 value:self.getBlowMode1];
  }
  if (self.hasGetWindSpeed) {
    [output writeBool:6 value:self.getWindSpeed];
  }
  if (self.hasGetTemperature0) {
    [output writeBool:7 value:self.getTemperature0];
  }
  if (self.hasGetTemperature1) {
    [output writeBool:8 value:self.getTemperature1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOnOff) {
    size_ += computeBoolSize(1, self.onOff);
  }
  if (self.hasGetAcopen) {
    size_ += computeBoolSize(2, self.getAcopen);
  }
  if (self.hasGetCycMode) {
    size_ += computeBoolSize(3, self.getCycMode);
  }
  if (self.hasGetBlowMode0) {
    size_ += computeBoolSize(4, self.getBlowMode0);
  }
  if (self.hasGetBlowMode1) {
    size_ += computeBoolSize(5, self.getBlowMode1);
  }
  if (self.hasGetWindSpeed) {
    size_ += computeBoolSize(6, self.getWindSpeed);
  }
  if (self.hasGetTemperature0) {
    size_ += computeBoolSize(7, self.getTemperature0);
  }
  if (self.hasGetTemperature1) {
    size_ += computeBoolSize(8, self.getTemperature1);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ACParameterGetReq*) parseFromData:(NSData*) data {
  return (ACParameterGetReq*)[[[ACParameterGetReq builder] mergeFromData:data] build];
}
+ (ACParameterGetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterGetReq*)[[[ACParameterGetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ACParameterGetReq*) parseFromInputStream:(NSInputStream*) input {
  return (ACParameterGetReq*)[[[ACParameterGetReq builder] mergeFromInputStream:input] build];
}
+ (ACParameterGetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterGetReq*)[[[ACParameterGetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ACParameterGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ACParameterGetReq*)[[[ACParameterGetReq builder] mergeFromCodedInputStream:input] build];
}
+ (ACParameterGetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterGetReq*)[[[ACParameterGetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ACParameterGetReqBuilder*) builder {
  return [[ACParameterGetReqBuilder alloc] init];
}
+ (ACParameterGetReqBuilder*) builderWithPrototype:(ACParameterGetReq*) prototype {
  return [[ACParameterGetReq builder] mergeFrom:prototype];
}
- (ACParameterGetReqBuilder*) builder {
  return [ACParameterGetReq builder];
}
- (ACParameterGetReqBuilder*) toBuilder {
  return [ACParameterGetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOnOff) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onOff", [NSNumber numberWithBool:self.onOff]];
  }
  if (self.hasGetAcopen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getAcopen", [NSNumber numberWithBool:self.getAcopen]];
  }
  if (self.hasGetCycMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getCycMode", [NSNumber numberWithBool:self.getCycMode]];
  }
  if (self.hasGetBlowMode0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getBlowMode0", [NSNumber numberWithBool:self.getBlowMode0]];
  }
  if (self.hasGetBlowMode1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getBlowMode1", [NSNumber numberWithBool:self.getBlowMode1]];
  }
  if (self.hasGetWindSpeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getWindSpeed", [NSNumber numberWithBool:self.getWindSpeed]];
  }
  if (self.hasGetTemperature0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getTemperature0", [NSNumber numberWithBool:self.getTemperature0]];
  }
  if (self.hasGetTemperature1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getTemperature1", [NSNumber numberWithBool:self.getTemperature1]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOnOff) {
    [dictionary setObject: [NSNumber numberWithBool:self.onOff] forKey: @"onOff"];
  }
  if (self.hasGetAcopen) {
    [dictionary setObject: [NSNumber numberWithBool:self.getAcopen] forKey: @"getAcopen"];
  }
  if (self.hasGetCycMode) {
    [dictionary setObject: [NSNumber numberWithBool:self.getCycMode] forKey: @"getCycMode"];
  }
  if (self.hasGetBlowMode0) {
    [dictionary setObject: [NSNumber numberWithBool:self.getBlowMode0] forKey: @"getBlowMode0"];
  }
  if (self.hasGetBlowMode1) {
    [dictionary setObject: [NSNumber numberWithBool:self.getBlowMode1] forKey: @"getBlowMode1"];
  }
  if (self.hasGetWindSpeed) {
    [dictionary setObject: [NSNumber numberWithBool:self.getWindSpeed] forKey: @"getWindSpeed"];
  }
  if (self.hasGetTemperature0) {
    [dictionary setObject: [NSNumber numberWithBool:self.getTemperature0] forKey: @"getTemperature0"];
  }
  if (self.hasGetTemperature1) {
    [dictionary setObject: [NSNumber numberWithBool:self.getTemperature1] forKey: @"getTemperature1"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ACParameterGetReq class]]) {
    return NO;
  }
  ACParameterGetReq *otherMessage = other;
  return
      self.hasOnOff == otherMessage.hasOnOff &&
      (!self.hasOnOff || self.onOff == otherMessage.onOff) &&
      self.hasGetAcopen == otherMessage.hasGetAcopen &&
      (!self.hasGetAcopen || self.getAcopen == otherMessage.getAcopen) &&
      self.hasGetCycMode == otherMessage.hasGetCycMode &&
      (!self.hasGetCycMode || self.getCycMode == otherMessage.getCycMode) &&
      self.hasGetBlowMode0 == otherMessage.hasGetBlowMode0 &&
      (!self.hasGetBlowMode0 || self.getBlowMode0 == otherMessage.getBlowMode0) &&
      self.hasGetBlowMode1 == otherMessage.hasGetBlowMode1 &&
      (!self.hasGetBlowMode1 || self.getBlowMode1 == otherMessage.getBlowMode1) &&
      self.hasGetWindSpeed == otherMessage.hasGetWindSpeed &&
      (!self.hasGetWindSpeed || self.getWindSpeed == otherMessage.getWindSpeed) &&
      self.hasGetTemperature0 == otherMessage.hasGetTemperature0 &&
      (!self.hasGetTemperature0 || self.getTemperature0 == otherMessage.getTemperature0) &&
      self.hasGetTemperature1 == otherMessage.hasGetTemperature1 &&
      (!self.hasGetTemperature1 || self.getTemperature1 == otherMessage.getTemperature1) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOnOff) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.onOff] hash];
  }
  if (self.hasGetAcopen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getAcopen] hash];
  }
  if (self.hasGetCycMode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getCycMode] hash];
  }
  if (self.hasGetBlowMode0) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getBlowMode0] hash];
  }
  if (self.hasGetBlowMode1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getBlowMode1] hash];
  }
  if (self.hasGetWindSpeed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getWindSpeed] hash];
  }
  if (self.hasGetTemperature0) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getTemperature0] hash];
  }
  if (self.hasGetTemperature1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getTemperature1] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ACParameterGetReqBuilder()
@property (strong) ACParameterGetReq* resultAcparameterGetReq;
@end

@implementation ACParameterGetReqBuilder
@synthesize resultAcparameterGetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAcparameterGetReq = [[ACParameterGetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAcparameterGetReq;
}
- (ACParameterGetReqBuilder*) clear {
  self.resultAcparameterGetReq = [[ACParameterGetReq alloc] init];
  return self;
}
- (ACParameterGetReqBuilder*) clone {
  return [ACParameterGetReq builderWithPrototype:resultAcparameterGetReq];
}
- (ACParameterGetReq*) defaultInstance {
  return [ACParameterGetReq defaultInstance];
}
- (ACParameterGetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ACParameterGetReq*) buildPartial {
  ACParameterGetReq* returnMe = resultAcparameterGetReq;
  self.resultAcparameterGetReq = nil;
  return returnMe;
}
- (ACParameterGetReqBuilder*) mergeFrom:(ACParameterGetReq*) other {
  if (other == [ACParameterGetReq defaultInstance]) {
    return self;
  }
  if (other.hasOnOff) {
    [self setOnOff:other.onOff];
  }
  if (other.hasGetAcopen) {
    [self setGetAcopen:other.getAcopen];
  }
  if (other.hasGetCycMode) {
    [self setGetCycMode:other.getCycMode];
  }
  if (other.hasGetBlowMode0) {
    [self setGetBlowMode0:other.getBlowMode0];
  }
  if (other.hasGetBlowMode1) {
    [self setGetBlowMode1:other.getBlowMode1];
  }
  if (other.hasGetWindSpeed) {
    [self setGetWindSpeed:other.getWindSpeed];
  }
  if (other.hasGetTemperature0) {
    [self setGetTemperature0:other.getTemperature0];
  }
  if (other.hasGetTemperature1) {
    [self setGetTemperature1:other.getTemperature1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ACParameterGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ACParameterGetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOnOff:[input readBool]];
        break;
      }
      case 16: {
        [self setGetAcopen:[input readBool]];
        break;
      }
      case 24: {
        [self setGetCycMode:[input readBool]];
        break;
      }
      case 32: {
        [self setGetBlowMode0:[input readBool]];
        break;
      }
      case 40: {
        [self setGetBlowMode1:[input readBool]];
        break;
      }
      case 48: {
        [self setGetWindSpeed:[input readBool]];
        break;
      }
      case 56: {
        [self setGetTemperature0:[input readBool]];
        break;
      }
      case 64: {
        [self setGetTemperature1:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasOnOff {
  return resultAcparameterGetReq.hasOnOff;
}
- (BOOL) onOff {
  return resultAcparameterGetReq.onOff;
}
- (ACParameterGetReqBuilder*) setOnOff:(BOOL) value {
  resultAcparameterGetReq.hasOnOff = YES;
  resultAcparameterGetReq.onOff = value;
  return self;
}
- (ACParameterGetReqBuilder*) clearOnOff {
  resultAcparameterGetReq.hasOnOff = NO;
  resultAcparameterGetReq.onOff = NO;
  return self;
}
- (BOOL) hasGetAcopen {
  return resultAcparameterGetReq.hasGetAcopen;
}
- (BOOL) getAcopen {
  return resultAcparameterGetReq.getAcopen;
}
- (ACParameterGetReqBuilder*) setGetAcopen:(BOOL) value {
  resultAcparameterGetReq.hasGetAcopen = YES;
  resultAcparameterGetReq.getAcopen = value;
  return self;
}
- (ACParameterGetReqBuilder*) clearGetAcopen {
  resultAcparameterGetReq.hasGetAcopen = NO;
  resultAcparameterGetReq.getAcopen = NO;
  return self;
}
- (BOOL) hasGetCycMode {
  return resultAcparameterGetReq.hasGetCycMode;
}
- (BOOL) getCycMode {
  return resultAcparameterGetReq.getCycMode;
}
- (ACParameterGetReqBuilder*) setGetCycMode:(BOOL) value {
  resultAcparameterGetReq.hasGetCycMode = YES;
  resultAcparameterGetReq.getCycMode = value;
  return self;
}
- (ACParameterGetReqBuilder*) clearGetCycMode {
  resultAcparameterGetReq.hasGetCycMode = NO;
  resultAcparameterGetReq.getCycMode = NO;
  return self;
}
- (BOOL) hasGetBlowMode0 {
  return resultAcparameterGetReq.hasGetBlowMode0;
}
- (BOOL) getBlowMode0 {
  return resultAcparameterGetReq.getBlowMode0;
}
- (ACParameterGetReqBuilder*) setGetBlowMode0:(BOOL) value {
  resultAcparameterGetReq.hasGetBlowMode0 = YES;
  resultAcparameterGetReq.getBlowMode0 = value;
  return self;
}
- (ACParameterGetReqBuilder*) clearGetBlowMode0 {
  resultAcparameterGetReq.hasGetBlowMode0 = NO;
  resultAcparameterGetReq.getBlowMode0 = NO;
  return self;
}
- (BOOL) hasGetBlowMode1 {
  return resultAcparameterGetReq.hasGetBlowMode1;
}
- (BOOL) getBlowMode1 {
  return resultAcparameterGetReq.getBlowMode1;
}
- (ACParameterGetReqBuilder*) setGetBlowMode1:(BOOL) value {
  resultAcparameterGetReq.hasGetBlowMode1 = YES;
  resultAcparameterGetReq.getBlowMode1 = value;
  return self;
}
- (ACParameterGetReqBuilder*) clearGetBlowMode1 {
  resultAcparameterGetReq.hasGetBlowMode1 = NO;
  resultAcparameterGetReq.getBlowMode1 = NO;
  return self;
}
- (BOOL) hasGetWindSpeed {
  return resultAcparameterGetReq.hasGetWindSpeed;
}
- (BOOL) getWindSpeed {
  return resultAcparameterGetReq.getWindSpeed;
}
- (ACParameterGetReqBuilder*) setGetWindSpeed:(BOOL) value {
  resultAcparameterGetReq.hasGetWindSpeed = YES;
  resultAcparameterGetReq.getWindSpeed = value;
  return self;
}
- (ACParameterGetReqBuilder*) clearGetWindSpeed {
  resultAcparameterGetReq.hasGetWindSpeed = NO;
  resultAcparameterGetReq.getWindSpeed = NO;
  return self;
}
- (BOOL) hasGetTemperature0 {
  return resultAcparameterGetReq.hasGetTemperature0;
}
- (BOOL) getTemperature0 {
  return resultAcparameterGetReq.getTemperature0;
}
- (ACParameterGetReqBuilder*) setGetTemperature0:(BOOL) value {
  resultAcparameterGetReq.hasGetTemperature0 = YES;
  resultAcparameterGetReq.getTemperature0 = value;
  return self;
}
- (ACParameterGetReqBuilder*) clearGetTemperature0 {
  resultAcparameterGetReq.hasGetTemperature0 = NO;
  resultAcparameterGetReq.getTemperature0 = NO;
  return self;
}
- (BOOL) hasGetTemperature1 {
  return resultAcparameterGetReq.hasGetTemperature1;
}
- (BOOL) getTemperature1 {
  return resultAcparameterGetReq.getTemperature1;
}
- (ACParameterGetReqBuilder*) setGetTemperature1:(BOOL) value {
  resultAcparameterGetReq.hasGetTemperature1 = YES;
  resultAcparameterGetReq.getTemperature1 = value;
  return self;
}
- (ACParameterGetReqBuilder*) clearGetTemperature1 {
  resultAcparameterGetReq.hasGetTemperature1 = NO;
  resultAcparameterGetReq.getTemperature1 = NO;
  return self;
}
@end

@interface ACParameterRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@property BOOL onOff;
@property BOOL acOpen;
@property CycMode cycMode;
@property BlowMode blowMode0;
@property BlowMode blowMode1;
@property UInt32 windSpeed;
@property UInt32 temperature0;
@property UInt32 temperature1;
@end

@implementation ACParameterRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasOnOff {
  return !!hasOnOff_;
}
- (void) setHasOnOff:(BOOL) _value_ {
  hasOnOff_ = !!_value_;
}
- (BOOL) onOff {
  return !!onOff_;
}
- (void) setOnOff:(BOOL) _value_ {
  onOff_ = !!_value_;
}
- (BOOL) hasAcOpen {
  return !!hasAcOpen_;
}
- (void) setHasAcOpen:(BOOL) _value_ {
  hasAcOpen_ = !!_value_;
}
- (BOOL) acOpen {
  return !!acOpen_;
}
- (void) setAcOpen:(BOOL) _value_ {
  acOpen_ = !!_value_;
}
- (BOOL) hasCycMode {
  return !!hasCycMode_;
}
- (void) setHasCycMode:(BOOL) _value_ {
  hasCycMode_ = !!_value_;
}
@synthesize cycMode;
- (BOOL) hasBlowMode0 {
  return !!hasBlowMode0_;
}
- (void) setHasBlowMode0:(BOOL) _value_ {
  hasBlowMode0_ = !!_value_;
}
@synthesize blowMode0;
- (BOOL) hasBlowMode1 {
  return !!hasBlowMode1_;
}
- (void) setHasBlowMode1:(BOOL) _value_ {
  hasBlowMode1_ = !!_value_;
}
@synthesize blowMode1;
- (BOOL) hasWindSpeed {
  return !!hasWindSpeed_;
}
- (void) setHasWindSpeed:(BOOL) _value_ {
  hasWindSpeed_ = !!_value_;
}
@synthesize windSpeed;
- (BOOL) hasTemperature0 {
  return !!hasTemperature0_;
}
- (void) setHasTemperature0:(BOOL) _value_ {
  hasTemperature0_ = !!_value_;
}
@synthesize temperature0;
- (BOOL) hasTemperature1 {
  return !!hasTemperature1_;
}
- (void) setHasTemperature1:(BOOL) _value_ {
  hasTemperature1_ = !!_value_;
}
@synthesize temperature1;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
    self.onOff = NO;
    self.acOpen = NO;
    self.cycMode = CycModeCycModeInside;
    self.blowMode0 = BlowModeBlowFace;
    self.blowMode1 = BlowModeBlowFace;
    self.windSpeed = 0;
    self.temperature0 = 0;
    self.temperature1 = 0;
  }
  return self;
}
static ACParameterRsp* defaultACParameterRspInstance = nil;
+ (void) initialize {
  if (self == [ACParameterRsp class]) {
    defaultACParameterRspInstance = [[ACParameterRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultACParameterRspInstance;
}
- (instancetype) defaultInstance {
  return defaultACParameterRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  if (self.hasOnOff) {
    [output writeBool:3 value:self.onOff];
  }
  if (self.hasAcOpen) {
    [output writeBool:4 value:self.acOpen];
  }
  if (self.hasCycMode) {
    [output writeEnum:5 value:self.cycMode];
  }
  if (self.hasBlowMode0) {
    [output writeEnum:6 value:self.blowMode0];
  }
  if (self.hasBlowMode1) {
    [output writeEnum:7 value:self.blowMode1];
  }
  if (self.hasWindSpeed) {
    [output writeUInt32:8 value:self.windSpeed];
  }
  if (self.hasTemperature0) {
    [output writeUInt32:9 value:self.temperature0];
  }
  if (self.hasTemperature1) {
    [output writeUInt32:10 value:self.temperature1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  if (self.hasOnOff) {
    size_ += computeBoolSize(3, self.onOff);
  }
  if (self.hasAcOpen) {
    size_ += computeBoolSize(4, self.acOpen);
  }
  if (self.hasCycMode) {
    size_ += computeEnumSize(5, self.cycMode);
  }
  if (self.hasBlowMode0) {
    size_ += computeEnumSize(6, self.blowMode0);
  }
  if (self.hasBlowMode1) {
    size_ += computeEnumSize(7, self.blowMode1);
  }
  if (self.hasWindSpeed) {
    size_ += computeUInt32Size(8, self.windSpeed);
  }
  if (self.hasTemperature0) {
    size_ += computeUInt32Size(9, self.temperature0);
  }
  if (self.hasTemperature1) {
    size_ += computeUInt32Size(10, self.temperature1);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ACParameterRsp*) parseFromData:(NSData*) data {
  return (ACParameterRsp*)[[[ACParameterRsp builder] mergeFromData:data] build];
}
+ (ACParameterRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterRsp*)[[[ACParameterRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ACParameterRsp*) parseFromInputStream:(NSInputStream*) input {
  return (ACParameterRsp*)[[[ACParameterRsp builder] mergeFromInputStream:input] build];
}
+ (ACParameterRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterRsp*)[[[ACParameterRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ACParameterRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ACParameterRsp*)[[[ACParameterRsp builder] mergeFromCodedInputStream:input] build];
}
+ (ACParameterRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterRsp*)[[[ACParameterRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ACParameterRspBuilder*) builder {
  return [[ACParameterRspBuilder alloc] init];
}
+ (ACParameterRspBuilder*) builderWithPrototype:(ACParameterRsp*) prototype {
  return [[ACParameterRsp builder] mergeFrom:prototype];
}
- (ACParameterRspBuilder*) builder {
  return [ACParameterRsp builder];
}
- (ACParameterRspBuilder*) toBuilder {
  return [ACParameterRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  if (self.hasOnOff) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onOff", [NSNumber numberWithBool:self.onOff]];
  }
  if (self.hasAcOpen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"acOpen", [NSNumber numberWithBool:self.acOpen]];
  }
  if (self.hasCycMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cycMode", NSStringFromCycMode(self.cycMode)];
  }
  if (self.hasBlowMode0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"blowMode0", NSStringFromBlowMode(self.blowMode0)];
  }
  if (self.hasBlowMode1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"blowMode1", NSStringFromBlowMode(self.blowMode1)];
  }
  if (self.hasWindSpeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"windSpeed", [NSNumber numberWithInteger:self.windSpeed]];
  }
  if (self.hasTemperature0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temperature0", [NSNumber numberWithInteger:self.temperature0]];
  }
  if (self.hasTemperature1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temperature1", [NSNumber numberWithInteger:self.temperature1]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  if (self.hasOnOff) {
    [dictionary setObject: [NSNumber numberWithBool:self.onOff] forKey: @"onOff"];
  }
  if (self.hasAcOpen) {
    [dictionary setObject: [NSNumber numberWithBool:self.acOpen] forKey: @"acOpen"];
  }
  if (self.hasCycMode) {
    [dictionary setObject: @(self.cycMode) forKey: @"cycMode"];
  }
  if (self.hasBlowMode0) {
    [dictionary setObject: @(self.blowMode0) forKey: @"blowMode0"];
  }
  if (self.hasBlowMode1) {
    [dictionary setObject: @(self.blowMode1) forKey: @"blowMode1"];
  }
  if (self.hasWindSpeed) {
    [dictionary setObject: [NSNumber numberWithInteger:self.windSpeed] forKey: @"windSpeed"];
  }
  if (self.hasTemperature0) {
    [dictionary setObject: [NSNumber numberWithInteger:self.temperature0] forKey: @"temperature0"];
  }
  if (self.hasTemperature1) {
    [dictionary setObject: [NSNumber numberWithInteger:self.temperature1] forKey: @"temperature1"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ACParameterRsp class]]) {
    return NO;
  }
  ACParameterRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasOnOff == otherMessage.hasOnOff &&
      (!self.hasOnOff || self.onOff == otherMessage.onOff) &&
      self.hasAcOpen == otherMessage.hasAcOpen &&
      (!self.hasAcOpen || self.acOpen == otherMessage.acOpen) &&
      self.hasCycMode == otherMessage.hasCycMode &&
      (!self.hasCycMode || self.cycMode == otherMessage.cycMode) &&
      self.hasBlowMode0 == otherMessage.hasBlowMode0 &&
      (!self.hasBlowMode0 || self.blowMode0 == otherMessage.blowMode0) &&
      self.hasBlowMode1 == otherMessage.hasBlowMode1 &&
      (!self.hasBlowMode1 || self.blowMode1 == otherMessage.blowMode1) &&
      self.hasWindSpeed == otherMessage.hasWindSpeed &&
      (!self.hasWindSpeed || self.windSpeed == otherMessage.windSpeed) &&
      self.hasTemperature0 == otherMessage.hasTemperature0 &&
      (!self.hasTemperature0 || self.temperature0 == otherMessage.temperature0) &&
      self.hasTemperature1 == otherMessage.hasTemperature1 &&
      (!self.hasTemperature1 || self.temperature1 == otherMessage.temperature1) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  if (self.hasOnOff) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.onOff] hash];
  }
  if (self.hasAcOpen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.acOpen] hash];
  }
  if (self.hasCycMode) {
    hashCode = hashCode * 31 + self.cycMode;
  }
  if (self.hasBlowMode0) {
    hashCode = hashCode * 31 + self.blowMode0;
  }
  if (self.hasBlowMode1) {
    hashCode = hashCode * 31 + self.blowMode1;
  }
  if (self.hasWindSpeed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.windSpeed] hash];
  }
  if (self.hasTemperature0) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.temperature0] hash];
  }
  if (self.hasTemperature1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.temperature1] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ACParameterRspBuilder()
@property (strong) ACParameterRsp* resultAcparameterRsp;
@end

@implementation ACParameterRspBuilder
@synthesize resultAcparameterRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAcparameterRsp = [[ACParameterRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAcparameterRsp;
}
- (ACParameterRspBuilder*) clear {
  self.resultAcparameterRsp = [[ACParameterRsp alloc] init];
  return self;
}
- (ACParameterRspBuilder*) clone {
  return [ACParameterRsp builderWithPrototype:resultAcparameterRsp];
}
- (ACParameterRsp*) defaultInstance {
  return [ACParameterRsp defaultInstance];
}
- (ACParameterRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ACParameterRsp*) buildPartial {
  ACParameterRsp* returnMe = resultAcparameterRsp;
  self.resultAcparameterRsp = nil;
  return returnMe;
}
- (ACParameterRspBuilder*) mergeFrom:(ACParameterRsp*) other {
  if (other == [ACParameterRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasOnOff) {
    [self setOnOff:other.onOff];
  }
  if (other.hasAcOpen) {
    [self setAcOpen:other.acOpen];
  }
  if (other.hasCycMode) {
    [self setCycMode:other.cycMode];
  }
  if (other.hasBlowMode0) {
    [self setBlowMode0:other.blowMode0];
  }
  if (other.hasBlowMode1) {
    [self setBlowMode1:other.blowMode1];
  }
  if (other.hasWindSpeed) {
    [self setWindSpeed:other.windSpeed];
  }
  if (other.hasTemperature0) {
    [self setTemperature0:other.temperature0];
  }
  if (other.hasTemperature1) {
    [self setTemperature1:other.temperature1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ACParameterRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ACParameterRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setOnOff:[input readBool]];
        break;
      }
      case 32: {
        [self setAcOpen:[input readBool]];
        break;
      }
      case 40: {
        CycMode value = (CycMode)[input readEnum];
        if (CycModeIsValidValue(value)) {
          [self setCycMode:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 48: {
        BlowMode value = (BlowMode)[input readEnum];
        if (BlowModeIsValidValue(value)) {
          [self setBlowMode0:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 56: {
        BlowMode value = (BlowMode)[input readEnum];
        if (BlowModeIsValidValue(value)) {
          [self setBlowMode1:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 64: {
        [self setWindSpeed:[input readUInt32]];
        break;
      }
      case 72: {
        [self setTemperature0:[input readUInt32]];
        break;
      }
      case 80: {
        [self setTemperature1:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultAcparameterRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultAcparameterRsp.rspCode;
}
- (ACParameterRspBuilder*) setRspCode:(RspCode) value {
  resultAcparameterRsp.hasRspCode = YES;
  resultAcparameterRsp.rspCode = value;
  return self;
}
- (ACParameterRspBuilder*) clearRspCode {
  resultAcparameterRsp.hasRspCode = NO;
  resultAcparameterRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultAcparameterRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultAcparameterRsp.errorCode;
}
- (ACParameterRspBuilder*) setErrorCode:(ErrorCode) value {
  resultAcparameterRsp.hasErrorCode = YES;
  resultAcparameterRsp.errorCode = value;
  return self;
}
- (ACParameterRspBuilder*) clearErrorCode {
  resultAcparameterRsp.hasErrorCode = NO;
  resultAcparameterRsp.errorCode = ErrorCodeNormal;
  return self;
}
- (BOOL) hasOnOff {
  return resultAcparameterRsp.hasOnOff;
}
- (BOOL) onOff {
  return resultAcparameterRsp.onOff;
}
- (ACParameterRspBuilder*) setOnOff:(BOOL) value {
  resultAcparameterRsp.hasOnOff = YES;
  resultAcparameterRsp.onOff = value;
  return self;
}
- (ACParameterRspBuilder*) clearOnOff {
  resultAcparameterRsp.hasOnOff = NO;
  resultAcparameterRsp.onOff = NO;
  return self;
}
- (BOOL) hasAcOpen {
  return resultAcparameterRsp.hasAcOpen;
}
- (BOOL) acOpen {
  return resultAcparameterRsp.acOpen;
}
- (ACParameterRspBuilder*) setAcOpen:(BOOL) value {
  resultAcparameterRsp.hasAcOpen = YES;
  resultAcparameterRsp.acOpen = value;
  return self;
}
- (ACParameterRspBuilder*) clearAcOpen {
  resultAcparameterRsp.hasAcOpen = NO;
  resultAcparameterRsp.acOpen = NO;
  return self;
}
- (BOOL) hasCycMode {
  return resultAcparameterRsp.hasCycMode;
}
- (CycMode) cycMode {
  return resultAcparameterRsp.cycMode;
}
- (ACParameterRspBuilder*) setCycMode:(CycMode) value {
  resultAcparameterRsp.hasCycMode = YES;
  resultAcparameterRsp.cycMode = value;
  return self;
}
- (ACParameterRspBuilder*) clearCycMode {
  resultAcparameterRsp.hasCycMode = NO;
  resultAcparameterRsp.cycMode = CycModeCycModeInside;
  return self;
}
- (BOOL) hasBlowMode0 {
  return resultAcparameterRsp.hasBlowMode0;
}
- (BlowMode) blowMode0 {
  return resultAcparameterRsp.blowMode0;
}
- (ACParameterRspBuilder*) setBlowMode0:(BlowMode) value {
  resultAcparameterRsp.hasBlowMode0 = YES;
  resultAcparameterRsp.blowMode0 = value;
  return self;
}
- (ACParameterRspBuilder*) clearBlowMode0 {
  resultAcparameterRsp.hasBlowMode0 = NO;
  resultAcparameterRsp.blowMode0 = BlowModeBlowFace;
  return self;
}
- (BOOL) hasBlowMode1 {
  return resultAcparameterRsp.hasBlowMode1;
}
- (BlowMode) blowMode1 {
  return resultAcparameterRsp.blowMode1;
}
- (ACParameterRspBuilder*) setBlowMode1:(BlowMode) value {
  resultAcparameterRsp.hasBlowMode1 = YES;
  resultAcparameterRsp.blowMode1 = value;
  return self;
}
- (ACParameterRspBuilder*) clearBlowMode1 {
  resultAcparameterRsp.hasBlowMode1 = NO;
  resultAcparameterRsp.blowMode1 = BlowModeBlowFace;
  return self;
}
- (BOOL) hasWindSpeed {
  return resultAcparameterRsp.hasWindSpeed;
}
- (UInt32) windSpeed {
  return resultAcparameterRsp.windSpeed;
}
- (ACParameterRspBuilder*) setWindSpeed:(UInt32) value {
  resultAcparameterRsp.hasWindSpeed = YES;
  resultAcparameterRsp.windSpeed = value;
  return self;
}
- (ACParameterRspBuilder*) clearWindSpeed {
  resultAcparameterRsp.hasWindSpeed = NO;
  resultAcparameterRsp.windSpeed = 0;
  return self;
}
- (BOOL) hasTemperature0 {
  return resultAcparameterRsp.hasTemperature0;
}
- (UInt32) temperature0 {
  return resultAcparameterRsp.temperature0;
}
- (ACParameterRspBuilder*) setTemperature0:(UInt32) value {
  resultAcparameterRsp.hasTemperature0 = YES;
  resultAcparameterRsp.temperature0 = value;
  return self;
}
- (ACParameterRspBuilder*) clearTemperature0 {
  resultAcparameterRsp.hasTemperature0 = NO;
  resultAcparameterRsp.temperature0 = 0;
  return self;
}
- (BOOL) hasTemperature1 {
  return resultAcparameterRsp.hasTemperature1;
}
- (UInt32) temperature1 {
  return resultAcparameterRsp.temperature1;
}
- (ACParameterRspBuilder*) setTemperature1:(UInt32) value {
  resultAcparameterRsp.hasTemperature1 = YES;
  resultAcparameterRsp.temperature1 = value;
  return self;
}
- (ACParameterRspBuilder*) clearTemperature1 {
  resultAcparameterRsp.hasTemperature1 = NO;
  resultAcparameterRsp.temperature1 = 0;
  return self;
}
@end

@interface ACParameterNotify ()
@property BOOL onOff;
@property BOOL acOpen;
@property CycMode cycMode;
@property BlowMode blowMode0;
@property BlowMode blowMode1;
@property UInt32 windSpeed;
@property UInt32 temperature0;
@property UInt32 desTemperature0;
@property UInt32 temperature1;
@property UInt32 desTemperature1;
@end

@implementation ACParameterNotify

- (BOOL) hasOnOff {
  return !!hasOnOff_;
}
- (void) setHasOnOff:(BOOL) _value_ {
  hasOnOff_ = !!_value_;
}
- (BOOL) onOff {
  return !!onOff_;
}
- (void) setOnOff:(BOOL) _value_ {
  onOff_ = !!_value_;
}
- (BOOL) hasAcOpen {
  return !!hasAcOpen_;
}
- (void) setHasAcOpen:(BOOL) _value_ {
  hasAcOpen_ = !!_value_;
}
- (BOOL) acOpen {
  return !!acOpen_;
}
- (void) setAcOpen:(BOOL) _value_ {
  acOpen_ = !!_value_;
}
- (BOOL) hasCycMode {
  return !!hasCycMode_;
}
- (void) setHasCycMode:(BOOL) _value_ {
  hasCycMode_ = !!_value_;
}
@synthesize cycMode;
- (BOOL) hasBlowMode0 {
  return !!hasBlowMode0_;
}
- (void) setHasBlowMode0:(BOOL) _value_ {
  hasBlowMode0_ = !!_value_;
}
@synthesize blowMode0;
- (BOOL) hasBlowMode1 {
  return !!hasBlowMode1_;
}
- (void) setHasBlowMode1:(BOOL) _value_ {
  hasBlowMode1_ = !!_value_;
}
@synthesize blowMode1;
- (BOOL) hasWindSpeed {
  return !!hasWindSpeed_;
}
- (void) setHasWindSpeed:(BOOL) _value_ {
  hasWindSpeed_ = !!_value_;
}
@synthesize windSpeed;
- (BOOL) hasTemperature0 {
  return !!hasTemperature0_;
}
- (void) setHasTemperature0:(BOOL) _value_ {
  hasTemperature0_ = !!_value_;
}
@synthesize temperature0;
- (BOOL) hasDesTemperature0 {
  return !!hasDesTemperature0_;
}
- (void) setHasDesTemperature0:(BOOL) _value_ {
  hasDesTemperature0_ = !!_value_;
}
@synthesize desTemperature0;
- (BOOL) hasTemperature1 {
  return !!hasTemperature1_;
}
- (void) setHasTemperature1:(BOOL) _value_ {
  hasTemperature1_ = !!_value_;
}
@synthesize temperature1;
- (BOOL) hasDesTemperature1 {
  return !!hasDesTemperature1_;
}
- (void) setHasDesTemperature1:(BOOL) _value_ {
  hasDesTemperature1_ = !!_value_;
}
@synthesize desTemperature1;
- (instancetype) init {
  if ((self = [super init])) {
    self.onOff = NO;
    self.acOpen = NO;
    self.cycMode = CycModeCycModeInside;
    self.blowMode0 = BlowModeBlowFace;
    self.blowMode1 = BlowModeBlowFace;
    self.windSpeed = 0;
    self.temperature0 = 0;
    self.desTemperature0 = 0;
    self.temperature1 = 0;
    self.desTemperature1 = 0;
  }
  return self;
}
static ACParameterNotify* defaultACParameterNotifyInstance = nil;
+ (void) initialize {
  if (self == [ACParameterNotify class]) {
    defaultACParameterNotifyInstance = [[ACParameterNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultACParameterNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultACParameterNotifyInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOnOff) {
    [output writeBool:1 value:self.onOff];
  }
  if (self.hasAcOpen) {
    [output writeBool:2 value:self.acOpen];
  }
  if (self.hasCycMode) {
    [output writeEnum:3 value:self.cycMode];
  }
  if (self.hasBlowMode0) {
    [output writeEnum:4 value:self.blowMode0];
  }
  if (self.hasBlowMode1) {
    [output writeEnum:5 value:self.blowMode1];
  }
  if (self.hasWindSpeed) {
    [output writeUInt32:6 value:self.windSpeed];
  }
  if (self.hasTemperature0) {
    [output writeUInt32:7 value:self.temperature0];
  }
  if (self.hasDesTemperature0) {
    [output writeUInt32:8 value:self.desTemperature0];
  }
  if (self.hasTemperature1) {
    [output writeUInt32:9 value:self.temperature1];
  }
  if (self.hasDesTemperature1) {
    [output writeUInt32:10 value:self.desTemperature1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOnOff) {
    size_ += computeBoolSize(1, self.onOff);
  }
  if (self.hasAcOpen) {
    size_ += computeBoolSize(2, self.acOpen);
  }
  if (self.hasCycMode) {
    size_ += computeEnumSize(3, self.cycMode);
  }
  if (self.hasBlowMode0) {
    size_ += computeEnumSize(4, self.blowMode0);
  }
  if (self.hasBlowMode1) {
    size_ += computeEnumSize(5, self.blowMode1);
  }
  if (self.hasWindSpeed) {
    size_ += computeUInt32Size(6, self.windSpeed);
  }
  if (self.hasTemperature0) {
    size_ += computeUInt32Size(7, self.temperature0);
  }
  if (self.hasDesTemperature0) {
    size_ += computeUInt32Size(8, self.desTemperature0);
  }
  if (self.hasTemperature1) {
    size_ += computeUInt32Size(9, self.temperature1);
  }
  if (self.hasDesTemperature1) {
    size_ += computeUInt32Size(10, self.desTemperature1);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ACParameterNotify*) parseFromData:(NSData*) data {
  return (ACParameterNotify*)[[[ACParameterNotify builder] mergeFromData:data] build];
}
+ (ACParameterNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterNotify*)[[[ACParameterNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ACParameterNotify*) parseFromInputStream:(NSInputStream*) input {
  return (ACParameterNotify*)[[[ACParameterNotify builder] mergeFromInputStream:input] build];
}
+ (ACParameterNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterNotify*)[[[ACParameterNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ACParameterNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ACParameterNotify*)[[[ACParameterNotify builder] mergeFromCodedInputStream:input] build];
}
+ (ACParameterNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterNotify*)[[[ACParameterNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ACParameterNotifyBuilder*) builder {
  return [[ACParameterNotifyBuilder alloc] init];
}
+ (ACParameterNotifyBuilder*) builderWithPrototype:(ACParameterNotify*) prototype {
  return [[ACParameterNotify builder] mergeFrom:prototype];
}
- (ACParameterNotifyBuilder*) builder {
  return [ACParameterNotify builder];
}
- (ACParameterNotifyBuilder*) toBuilder {
  return [ACParameterNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOnOff) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onOff", [NSNumber numberWithBool:self.onOff]];
  }
  if (self.hasAcOpen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"acOpen", [NSNumber numberWithBool:self.acOpen]];
  }
  if (self.hasCycMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cycMode", NSStringFromCycMode(self.cycMode)];
  }
  if (self.hasBlowMode0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"blowMode0", NSStringFromBlowMode(self.blowMode0)];
  }
  if (self.hasBlowMode1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"blowMode1", NSStringFromBlowMode(self.blowMode1)];
  }
  if (self.hasWindSpeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"windSpeed", [NSNumber numberWithInteger:self.windSpeed]];
  }
  if (self.hasTemperature0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temperature0", [NSNumber numberWithInteger:self.temperature0]];
  }
  if (self.hasDesTemperature0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desTemperature0", [NSNumber numberWithInteger:self.desTemperature0]];
  }
  if (self.hasTemperature1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temperature1", [NSNumber numberWithInteger:self.temperature1]];
  }
  if (self.hasDesTemperature1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desTemperature1", [NSNumber numberWithInteger:self.desTemperature1]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOnOff) {
    [dictionary setObject: [NSNumber numberWithBool:self.onOff] forKey: @"onOff"];
  }
  if (self.hasAcOpen) {
    [dictionary setObject: [NSNumber numberWithBool:self.acOpen] forKey: @"acOpen"];
  }
  if (self.hasCycMode) {
    [dictionary setObject: @(self.cycMode) forKey: @"cycMode"];
  }
  if (self.hasBlowMode0) {
    [dictionary setObject: @(self.blowMode0) forKey: @"blowMode0"];
  }
  if (self.hasBlowMode1) {
    [dictionary setObject: @(self.blowMode1) forKey: @"blowMode1"];
  }
  if (self.hasWindSpeed) {
    [dictionary setObject: [NSNumber numberWithInteger:self.windSpeed] forKey: @"windSpeed"];
  }
  if (self.hasTemperature0) {
    [dictionary setObject: [NSNumber numberWithInteger:self.temperature0] forKey: @"temperature0"];
  }
  if (self.hasDesTemperature0) {
    [dictionary setObject: [NSNumber numberWithInteger:self.desTemperature0] forKey: @"desTemperature0"];
  }
  if (self.hasTemperature1) {
    [dictionary setObject: [NSNumber numberWithInteger:self.temperature1] forKey: @"temperature1"];
  }
  if (self.hasDesTemperature1) {
    [dictionary setObject: [NSNumber numberWithInteger:self.desTemperature1] forKey: @"desTemperature1"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ACParameterNotify class]]) {
    return NO;
  }
  ACParameterNotify *otherMessage = other;
  return
      self.hasOnOff == otherMessage.hasOnOff &&
      (!self.hasOnOff || self.onOff == otherMessage.onOff) &&
      self.hasAcOpen == otherMessage.hasAcOpen &&
      (!self.hasAcOpen || self.acOpen == otherMessage.acOpen) &&
      self.hasCycMode == otherMessage.hasCycMode &&
      (!self.hasCycMode || self.cycMode == otherMessage.cycMode) &&
      self.hasBlowMode0 == otherMessage.hasBlowMode0 &&
      (!self.hasBlowMode0 || self.blowMode0 == otherMessage.blowMode0) &&
      self.hasBlowMode1 == otherMessage.hasBlowMode1 &&
      (!self.hasBlowMode1 || self.blowMode1 == otherMessage.blowMode1) &&
      self.hasWindSpeed == otherMessage.hasWindSpeed &&
      (!self.hasWindSpeed || self.windSpeed == otherMessage.windSpeed) &&
      self.hasTemperature0 == otherMessage.hasTemperature0 &&
      (!self.hasTemperature0 || self.temperature0 == otherMessage.temperature0) &&
      self.hasDesTemperature0 == otherMessage.hasDesTemperature0 &&
      (!self.hasDesTemperature0 || self.desTemperature0 == otherMessage.desTemperature0) &&
      self.hasTemperature1 == otherMessage.hasTemperature1 &&
      (!self.hasTemperature1 || self.temperature1 == otherMessage.temperature1) &&
      self.hasDesTemperature1 == otherMessage.hasDesTemperature1 &&
      (!self.hasDesTemperature1 || self.desTemperature1 == otherMessage.desTemperature1) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOnOff) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.onOff] hash];
  }
  if (self.hasAcOpen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.acOpen] hash];
  }
  if (self.hasCycMode) {
    hashCode = hashCode * 31 + self.cycMode;
  }
  if (self.hasBlowMode0) {
    hashCode = hashCode * 31 + self.blowMode0;
  }
  if (self.hasBlowMode1) {
    hashCode = hashCode * 31 + self.blowMode1;
  }
  if (self.hasWindSpeed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.windSpeed] hash];
  }
  if (self.hasTemperature0) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.temperature0] hash];
  }
  if (self.hasDesTemperature0) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.desTemperature0] hash];
  }
  if (self.hasTemperature1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.temperature1] hash];
  }
  if (self.hasDesTemperature1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.desTemperature1] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ACParameterNotifyBuilder()
@property (strong) ACParameterNotify* resultAcparameterNotify;
@end

@implementation ACParameterNotifyBuilder
@synthesize resultAcparameterNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAcparameterNotify = [[ACParameterNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAcparameterNotify;
}
- (ACParameterNotifyBuilder*) clear {
  self.resultAcparameterNotify = [[ACParameterNotify alloc] init];
  return self;
}
- (ACParameterNotifyBuilder*) clone {
  return [ACParameterNotify builderWithPrototype:resultAcparameterNotify];
}
- (ACParameterNotify*) defaultInstance {
  return [ACParameterNotify defaultInstance];
}
- (ACParameterNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ACParameterNotify*) buildPartial {
  ACParameterNotify* returnMe = resultAcparameterNotify;
  self.resultAcparameterNotify = nil;
  return returnMe;
}
- (ACParameterNotifyBuilder*) mergeFrom:(ACParameterNotify*) other {
  if (other == [ACParameterNotify defaultInstance]) {
    return self;
  }
  if (other.hasOnOff) {
    [self setOnOff:other.onOff];
  }
  if (other.hasAcOpen) {
    [self setAcOpen:other.acOpen];
  }
  if (other.hasCycMode) {
    [self setCycMode:other.cycMode];
  }
  if (other.hasBlowMode0) {
    [self setBlowMode0:other.blowMode0];
  }
  if (other.hasBlowMode1) {
    [self setBlowMode1:other.blowMode1];
  }
  if (other.hasWindSpeed) {
    [self setWindSpeed:other.windSpeed];
  }
  if (other.hasTemperature0) {
    [self setTemperature0:other.temperature0];
  }
  if (other.hasDesTemperature0) {
    [self setDesTemperature0:other.desTemperature0];
  }
  if (other.hasTemperature1) {
    [self setTemperature1:other.temperature1];
  }
  if (other.hasDesTemperature1) {
    [self setDesTemperature1:other.desTemperature1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ACParameterNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ACParameterNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOnOff:[input readBool]];
        break;
      }
      case 16: {
        [self setAcOpen:[input readBool]];
        break;
      }
      case 24: {
        CycMode value = (CycMode)[input readEnum];
        if (CycModeIsValidValue(value)) {
          [self setCycMode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        BlowMode value = (BlowMode)[input readEnum];
        if (BlowModeIsValidValue(value)) {
          [self setBlowMode0:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        BlowMode value = (BlowMode)[input readEnum];
        if (BlowModeIsValidValue(value)) {
          [self setBlowMode1:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 48: {
        [self setWindSpeed:[input readUInt32]];
        break;
      }
      case 56: {
        [self setTemperature0:[input readUInt32]];
        break;
      }
      case 64: {
        [self setDesTemperature0:[input readUInt32]];
        break;
      }
      case 72: {
        [self setTemperature1:[input readUInt32]];
        break;
      }
      case 80: {
        [self setDesTemperature1:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOnOff {
  return resultAcparameterNotify.hasOnOff;
}
- (BOOL) onOff {
  return resultAcparameterNotify.onOff;
}
- (ACParameterNotifyBuilder*) setOnOff:(BOOL) value {
  resultAcparameterNotify.hasOnOff = YES;
  resultAcparameterNotify.onOff = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearOnOff {
  resultAcparameterNotify.hasOnOff = NO;
  resultAcparameterNotify.onOff = NO;
  return self;
}
- (BOOL) hasAcOpen {
  return resultAcparameterNotify.hasAcOpen;
}
- (BOOL) acOpen {
  return resultAcparameterNotify.acOpen;
}
- (ACParameterNotifyBuilder*) setAcOpen:(BOOL) value {
  resultAcparameterNotify.hasAcOpen = YES;
  resultAcparameterNotify.acOpen = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearAcOpen {
  resultAcparameterNotify.hasAcOpen = NO;
  resultAcparameterNotify.acOpen = NO;
  return self;
}
- (BOOL) hasCycMode {
  return resultAcparameterNotify.hasCycMode;
}
- (CycMode) cycMode {
  return resultAcparameterNotify.cycMode;
}
- (ACParameterNotifyBuilder*) setCycMode:(CycMode) value {
  resultAcparameterNotify.hasCycMode = YES;
  resultAcparameterNotify.cycMode = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearCycMode {
  resultAcparameterNotify.hasCycMode = NO;
  resultAcparameterNotify.cycMode = CycModeCycModeInside;
  return self;
}
- (BOOL) hasBlowMode0 {
  return resultAcparameterNotify.hasBlowMode0;
}
- (BlowMode) blowMode0 {
  return resultAcparameterNotify.blowMode0;
}
- (ACParameterNotifyBuilder*) setBlowMode0:(BlowMode) value {
  resultAcparameterNotify.hasBlowMode0 = YES;
  resultAcparameterNotify.blowMode0 = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearBlowMode0 {
  resultAcparameterNotify.hasBlowMode0 = NO;
  resultAcparameterNotify.blowMode0 = BlowModeBlowFace;
  return self;
}
- (BOOL) hasBlowMode1 {
  return resultAcparameterNotify.hasBlowMode1;
}
- (BlowMode) blowMode1 {
  return resultAcparameterNotify.blowMode1;
}
- (ACParameterNotifyBuilder*) setBlowMode1:(BlowMode) value {
  resultAcparameterNotify.hasBlowMode1 = YES;
  resultAcparameterNotify.blowMode1 = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearBlowMode1 {
  resultAcparameterNotify.hasBlowMode1 = NO;
  resultAcparameterNotify.blowMode1 = BlowModeBlowFace;
  return self;
}
- (BOOL) hasWindSpeed {
  return resultAcparameterNotify.hasWindSpeed;
}
- (UInt32) windSpeed {
  return resultAcparameterNotify.windSpeed;
}
- (ACParameterNotifyBuilder*) setWindSpeed:(UInt32) value {
  resultAcparameterNotify.hasWindSpeed = YES;
  resultAcparameterNotify.windSpeed = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearWindSpeed {
  resultAcparameterNotify.hasWindSpeed = NO;
  resultAcparameterNotify.windSpeed = 0;
  return self;
}
- (BOOL) hasTemperature0 {
  return resultAcparameterNotify.hasTemperature0;
}
- (UInt32) temperature0 {
  return resultAcparameterNotify.temperature0;
}
- (ACParameterNotifyBuilder*) setTemperature0:(UInt32) value {
  resultAcparameterNotify.hasTemperature0 = YES;
  resultAcparameterNotify.temperature0 = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearTemperature0 {
  resultAcparameterNotify.hasTemperature0 = NO;
  resultAcparameterNotify.temperature0 = 0;
  return self;
}
- (BOOL) hasDesTemperature0 {
  return resultAcparameterNotify.hasDesTemperature0;
}
- (UInt32) desTemperature0 {
  return resultAcparameterNotify.desTemperature0;
}
- (ACParameterNotifyBuilder*) setDesTemperature0:(UInt32) value {
  resultAcparameterNotify.hasDesTemperature0 = YES;
  resultAcparameterNotify.desTemperature0 = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearDesTemperature0 {
  resultAcparameterNotify.hasDesTemperature0 = NO;
  resultAcparameterNotify.desTemperature0 = 0;
  return self;
}
- (BOOL) hasTemperature1 {
  return resultAcparameterNotify.hasTemperature1;
}
- (UInt32) temperature1 {
  return resultAcparameterNotify.temperature1;
}
- (ACParameterNotifyBuilder*) setTemperature1:(UInt32) value {
  resultAcparameterNotify.hasTemperature1 = YES;
  resultAcparameterNotify.temperature1 = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearTemperature1 {
  resultAcparameterNotify.hasTemperature1 = NO;
  resultAcparameterNotify.temperature1 = 0;
  return self;
}
- (BOOL) hasDesTemperature1 {
  return resultAcparameterNotify.hasDesTemperature1;
}
- (UInt32) desTemperature1 {
  return resultAcparameterNotify.desTemperature1;
}
- (ACParameterNotifyBuilder*) setDesTemperature1:(UInt32) value {
  resultAcparameterNotify.hasDesTemperature1 = YES;
  resultAcparameterNotify.desTemperature1 = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearDesTemperature1 {
  resultAcparameterNotify.hasDesTemperature1 = NO;
  resultAcparameterNotify.desTemperature1 = 0;
  return self;
}
@end

@interface SytemPowerStatusReq ()
@property BOOL getPowerStatus;
@end

@implementation SytemPowerStatusReq

- (BOOL) hasGetPowerStatus {
  return !!hasGetPowerStatus_;
}
- (void) setHasGetPowerStatus:(BOOL) _value_ {
  hasGetPowerStatus_ = !!_value_;
}
- (BOOL) getPowerStatus {
  return !!getPowerStatus_;
}
- (void) setGetPowerStatus:(BOOL) _value_ {
  getPowerStatus_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.getPowerStatus = NO;
  }
  return self;
}
static SytemPowerStatusReq* defaultSytemPowerStatusReqInstance = nil;
+ (void) initialize {
  if (self == [SytemPowerStatusReq class]) {
    defaultSytemPowerStatusReqInstance = [[SytemPowerStatusReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSytemPowerStatusReqInstance;
}
- (instancetype) defaultInstance {
  return defaultSytemPowerStatusReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetPowerStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetPowerStatus) {
    [output writeBool:1 value:self.getPowerStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetPowerStatus) {
    size_ += computeBoolSize(1, self.getPowerStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SytemPowerStatusReq*) parseFromData:(NSData*) data {
  return (SytemPowerStatusReq*)[[[SytemPowerStatusReq builder] mergeFromData:data] build];
}
+ (SytemPowerStatusReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SytemPowerStatusReq*)[[[SytemPowerStatusReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SytemPowerStatusReq*) parseFromInputStream:(NSInputStream*) input {
  return (SytemPowerStatusReq*)[[[SytemPowerStatusReq builder] mergeFromInputStream:input] build];
}
+ (SytemPowerStatusReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SytemPowerStatusReq*)[[[SytemPowerStatusReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SytemPowerStatusReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SytemPowerStatusReq*)[[[SytemPowerStatusReq builder] mergeFromCodedInputStream:input] build];
}
+ (SytemPowerStatusReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SytemPowerStatusReq*)[[[SytemPowerStatusReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SytemPowerStatusReqBuilder*) builder {
  return [[SytemPowerStatusReqBuilder alloc] init];
}
+ (SytemPowerStatusReqBuilder*) builderWithPrototype:(SytemPowerStatusReq*) prototype {
  return [[SytemPowerStatusReq builder] mergeFrom:prototype];
}
- (SytemPowerStatusReqBuilder*) builder {
  return [SytemPowerStatusReq builder];
}
- (SytemPowerStatusReqBuilder*) toBuilder {
  return [SytemPowerStatusReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetPowerStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getPowerStatus", [NSNumber numberWithBool:self.getPowerStatus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetPowerStatus) {
    [dictionary setObject: [NSNumber numberWithBool:self.getPowerStatus] forKey: @"getPowerStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SytemPowerStatusReq class]]) {
    return NO;
  }
  SytemPowerStatusReq *otherMessage = other;
  return
      self.hasGetPowerStatus == otherMessage.hasGetPowerStatus &&
      (!self.hasGetPowerStatus || self.getPowerStatus == otherMessage.getPowerStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetPowerStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getPowerStatus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SytemPowerStatusReqBuilder()
@property (strong) SytemPowerStatusReq* resultSytemPowerStatusReq;
@end

@implementation SytemPowerStatusReqBuilder
@synthesize resultSytemPowerStatusReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSytemPowerStatusReq = [[SytemPowerStatusReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSytemPowerStatusReq;
}
- (SytemPowerStatusReqBuilder*) clear {
  self.resultSytemPowerStatusReq = [[SytemPowerStatusReq alloc] init];
  return self;
}
- (SytemPowerStatusReqBuilder*) clone {
  return [SytemPowerStatusReq builderWithPrototype:resultSytemPowerStatusReq];
}
- (SytemPowerStatusReq*) defaultInstance {
  return [SytemPowerStatusReq defaultInstance];
}
- (SytemPowerStatusReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SytemPowerStatusReq*) buildPartial {
  SytemPowerStatusReq* returnMe = resultSytemPowerStatusReq;
  self.resultSytemPowerStatusReq = nil;
  return returnMe;
}
- (SytemPowerStatusReqBuilder*) mergeFrom:(SytemPowerStatusReq*) other {
  if (other == [SytemPowerStatusReq defaultInstance]) {
    return self;
  }
  if (other.hasGetPowerStatus) {
    [self setGetPowerStatus:other.getPowerStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SytemPowerStatusReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SytemPowerStatusReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGetPowerStatus:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasGetPowerStatus {
  return resultSytemPowerStatusReq.hasGetPowerStatus;
}
- (BOOL) getPowerStatus {
  return resultSytemPowerStatusReq.getPowerStatus;
}
- (SytemPowerStatusReqBuilder*) setGetPowerStatus:(BOOL) value {
  resultSytemPowerStatusReq.hasGetPowerStatus = YES;
  resultSytemPowerStatusReq.getPowerStatus = value;
  return self;
}
- (SytemPowerStatusReqBuilder*) clearGetPowerStatus {
  resultSytemPowerStatusReq.hasGetPowerStatus = NO;
  resultSytemPowerStatusReq.getPowerStatus = NO;
  return self;
}
@end

@interface SytemPowerStatusSetReq ()
@property SystemPowerStatus powerStatus;
@end

@implementation SytemPowerStatusSetReq

- (BOOL) hasPowerStatus {
  return !!hasPowerStatus_;
}
- (void) setHasPowerStatus:(BOOL) _value_ {
  hasPowerStatus_ = !!_value_;
}
@synthesize powerStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.powerStatus = SystemPowerStatusSystemPowerStart;
  }
  return self;
}
static SytemPowerStatusSetReq* defaultSytemPowerStatusSetReqInstance = nil;
+ (void) initialize {
  if (self == [SytemPowerStatusSetReq class]) {
    defaultSytemPowerStatusSetReqInstance = [[SytemPowerStatusSetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSytemPowerStatusSetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultSytemPowerStatusSetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPowerStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPowerStatus) {
    [output writeEnum:1 value:self.powerStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPowerStatus) {
    size_ += computeEnumSize(1, self.powerStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SytemPowerStatusSetReq*) parseFromData:(NSData*) data {
  return (SytemPowerStatusSetReq*)[[[SytemPowerStatusSetReq builder] mergeFromData:data] build];
}
+ (SytemPowerStatusSetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SytemPowerStatusSetReq*)[[[SytemPowerStatusSetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SytemPowerStatusSetReq*) parseFromInputStream:(NSInputStream*) input {
  return (SytemPowerStatusSetReq*)[[[SytemPowerStatusSetReq builder] mergeFromInputStream:input] build];
}
+ (SytemPowerStatusSetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SytemPowerStatusSetReq*)[[[SytemPowerStatusSetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SytemPowerStatusSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SytemPowerStatusSetReq*)[[[SytemPowerStatusSetReq builder] mergeFromCodedInputStream:input] build];
}
+ (SytemPowerStatusSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SytemPowerStatusSetReq*)[[[SytemPowerStatusSetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SytemPowerStatusSetReqBuilder*) builder {
  return [[SytemPowerStatusSetReqBuilder alloc] init];
}
+ (SytemPowerStatusSetReqBuilder*) builderWithPrototype:(SytemPowerStatusSetReq*) prototype {
  return [[SytemPowerStatusSetReq builder] mergeFrom:prototype];
}
- (SytemPowerStatusSetReqBuilder*) builder {
  return [SytemPowerStatusSetReq builder];
}
- (SytemPowerStatusSetReqBuilder*) toBuilder {
  return [SytemPowerStatusSetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPowerStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"powerStatus", NSStringFromSystemPowerStatus(self.powerStatus)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPowerStatus) {
    [dictionary setObject: @(self.powerStatus) forKey: @"powerStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SytemPowerStatusSetReq class]]) {
    return NO;
  }
  SytemPowerStatusSetReq *otherMessage = other;
  return
      self.hasPowerStatus == otherMessage.hasPowerStatus &&
      (!self.hasPowerStatus || self.powerStatus == otherMessage.powerStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPowerStatus) {
    hashCode = hashCode * 31 + self.powerStatus;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SytemPowerStatusSetReqBuilder()
@property (strong) SytemPowerStatusSetReq* resultSytemPowerStatusSetReq;
@end

@implementation SytemPowerStatusSetReqBuilder
@synthesize resultSytemPowerStatusSetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSytemPowerStatusSetReq = [[SytemPowerStatusSetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSytemPowerStatusSetReq;
}
- (SytemPowerStatusSetReqBuilder*) clear {
  self.resultSytemPowerStatusSetReq = [[SytemPowerStatusSetReq alloc] init];
  return self;
}
- (SytemPowerStatusSetReqBuilder*) clone {
  return [SytemPowerStatusSetReq builderWithPrototype:resultSytemPowerStatusSetReq];
}
- (SytemPowerStatusSetReq*) defaultInstance {
  return [SytemPowerStatusSetReq defaultInstance];
}
- (SytemPowerStatusSetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SytemPowerStatusSetReq*) buildPartial {
  SytemPowerStatusSetReq* returnMe = resultSytemPowerStatusSetReq;
  self.resultSytemPowerStatusSetReq = nil;
  return returnMe;
}
- (SytemPowerStatusSetReqBuilder*) mergeFrom:(SytemPowerStatusSetReq*) other {
  if (other == [SytemPowerStatusSetReq defaultInstance]) {
    return self;
  }
  if (other.hasPowerStatus) {
    [self setPowerStatus:other.powerStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SytemPowerStatusSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SytemPowerStatusSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        SystemPowerStatus value = (SystemPowerStatus)[input readEnum];
        if (SystemPowerStatusIsValidValue(value)) {
          [self setPowerStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasPowerStatus {
  return resultSytemPowerStatusSetReq.hasPowerStatus;
}
- (SystemPowerStatus) powerStatus {
  return resultSytemPowerStatusSetReq.powerStatus;
}
- (SytemPowerStatusSetReqBuilder*) setPowerStatus:(SystemPowerStatus) value {
  resultSytemPowerStatusSetReq.hasPowerStatus = YES;
  resultSytemPowerStatusSetReq.powerStatus = value;
  return self;
}
- (SytemPowerStatusSetReqBuilder*) clearPowerStatus {
  resultSytemPowerStatusSetReq.hasPowerStatus = NO;
  resultSytemPowerStatusSetReq.powerStatus = SystemPowerStatusSystemPowerStart;
  return self;
}
@end

@interface WifiStatusNotification ()
@property (strong) NSString* externDeviceName;
@property (strong) NSString* externDeviceMacAddress;
@property WifiStatus wifiStatus;
@end

@implementation WifiStatusNotification

- (BOOL) hasExternDeviceName {
  return !!hasExternDeviceName_;
}
- (void) setHasExternDeviceName:(BOOL) _value_ {
  hasExternDeviceName_ = !!_value_;
}
@synthesize externDeviceName;
- (BOOL) hasExternDeviceMacAddress {
  return !!hasExternDeviceMacAddress_;
}
- (void) setHasExternDeviceMacAddress:(BOOL) _value_ {
  hasExternDeviceMacAddress_ = !!_value_;
}
@synthesize externDeviceMacAddress;
- (BOOL) hasWifiStatus {
  return !!hasWifiStatus_;
}
- (void) setHasWifiStatus:(BOOL) _value_ {
  hasWifiStatus_ = !!_value_;
}
@synthesize wifiStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.externDeviceName = @"";
    self.externDeviceMacAddress = @"";
    self.wifiStatus = WifiStatusWifiStatusConnected;
  }
  return self;
}
static WifiStatusNotification* defaultWifiStatusNotificationInstance = nil;
+ (void) initialize {
  if (self == [WifiStatusNotification class]) {
    defaultWifiStatusNotificationInstance = [[WifiStatusNotification alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWifiStatusNotificationInstance;
}
- (instancetype) defaultInstance {
  return defaultWifiStatusNotificationInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasExternDeviceName) {
    [output writeString:1 value:self.externDeviceName];
  }
  if (self.hasExternDeviceMacAddress) {
    [output writeString:2 value:self.externDeviceMacAddress];
  }
  if (self.hasWifiStatus) {
    [output writeEnum:3 value:self.wifiStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasExternDeviceName) {
    size_ += computeStringSize(1, self.externDeviceName);
  }
  if (self.hasExternDeviceMacAddress) {
    size_ += computeStringSize(2, self.externDeviceMacAddress);
  }
  if (self.hasWifiStatus) {
    size_ += computeEnumSize(3, self.wifiStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WifiStatusNotification*) parseFromData:(NSData*) data {
  return (WifiStatusNotification*)[[[WifiStatusNotification builder] mergeFromData:data] build];
}
+ (WifiStatusNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiStatusNotification*)[[[WifiStatusNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WifiStatusNotification*) parseFromInputStream:(NSInputStream*) input {
  return (WifiStatusNotification*)[[[WifiStatusNotification builder] mergeFromInputStream:input] build];
}
+ (WifiStatusNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiStatusNotification*)[[[WifiStatusNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WifiStatusNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WifiStatusNotification*)[[[WifiStatusNotification builder] mergeFromCodedInputStream:input] build];
}
+ (WifiStatusNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WifiStatusNotification*)[[[WifiStatusNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WifiStatusNotificationBuilder*) builder {
  return [[WifiStatusNotificationBuilder alloc] init];
}
+ (WifiStatusNotificationBuilder*) builderWithPrototype:(WifiStatusNotification*) prototype {
  return [[WifiStatusNotification builder] mergeFrom:prototype];
}
- (WifiStatusNotificationBuilder*) builder {
  return [WifiStatusNotification builder];
}
- (WifiStatusNotificationBuilder*) toBuilder {
  return [WifiStatusNotification builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasExternDeviceName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"externDeviceName", self.externDeviceName];
  }
  if (self.hasExternDeviceMacAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"externDeviceMacAddress", self.externDeviceMacAddress];
  }
  if (self.hasWifiStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wifiStatus", NSStringFromWifiStatus(self.wifiStatus)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasExternDeviceName) {
    [dictionary setObject: self.externDeviceName forKey: @"externDeviceName"];
  }
  if (self.hasExternDeviceMacAddress) {
    [dictionary setObject: self.externDeviceMacAddress forKey: @"externDeviceMacAddress"];
  }
  if (self.hasWifiStatus) {
    [dictionary setObject: @(self.wifiStatus) forKey: @"wifiStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WifiStatusNotification class]]) {
    return NO;
  }
  WifiStatusNotification *otherMessage = other;
  return
      self.hasExternDeviceName == otherMessage.hasExternDeviceName &&
      (!self.hasExternDeviceName || [self.externDeviceName isEqual:otherMessage.externDeviceName]) &&
      self.hasExternDeviceMacAddress == otherMessage.hasExternDeviceMacAddress &&
      (!self.hasExternDeviceMacAddress || [self.externDeviceMacAddress isEqual:otherMessage.externDeviceMacAddress]) &&
      self.hasWifiStatus == otherMessage.hasWifiStatus &&
      (!self.hasWifiStatus || self.wifiStatus == otherMessage.wifiStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasExternDeviceName) {
    hashCode = hashCode * 31 + [self.externDeviceName hash];
  }
  if (self.hasExternDeviceMacAddress) {
    hashCode = hashCode * 31 + [self.externDeviceMacAddress hash];
  }
  if (self.hasWifiStatus) {
    hashCode = hashCode * 31 + self.wifiStatus;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WifiStatusNotificationBuilder()
@property (strong) WifiStatusNotification* resultWifiStatusNotification;
@end

@implementation WifiStatusNotificationBuilder
@synthesize resultWifiStatusNotification;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWifiStatusNotification = [[WifiStatusNotification alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWifiStatusNotification;
}
- (WifiStatusNotificationBuilder*) clear {
  self.resultWifiStatusNotification = [[WifiStatusNotification alloc] init];
  return self;
}
- (WifiStatusNotificationBuilder*) clone {
  return [WifiStatusNotification builderWithPrototype:resultWifiStatusNotification];
}
- (WifiStatusNotification*) defaultInstance {
  return [WifiStatusNotification defaultInstance];
}
- (WifiStatusNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WifiStatusNotification*) buildPartial {
  WifiStatusNotification* returnMe = resultWifiStatusNotification;
  self.resultWifiStatusNotification = nil;
  return returnMe;
}
- (WifiStatusNotificationBuilder*) mergeFrom:(WifiStatusNotification*) other {
  if (other == [WifiStatusNotification defaultInstance]) {
    return self;
  }
  if (other.hasExternDeviceName) {
    [self setExternDeviceName:other.externDeviceName];
  }
  if (other.hasExternDeviceMacAddress) {
    [self setExternDeviceMacAddress:other.externDeviceMacAddress];
  }
  if (other.hasWifiStatus) {
    [self setWifiStatus:other.wifiStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WifiStatusNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WifiStatusNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setExternDeviceName:[input readString]];
        break;
      }
      case 18: {
        [self setExternDeviceMacAddress:[input readString]];
        break;
      }
      case 24: {
        WifiStatus value = (WifiStatus)[input readEnum];
        if (WifiStatusIsValidValue(value)) {
          [self setWifiStatus:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasExternDeviceName {
  return resultWifiStatusNotification.hasExternDeviceName;
}
- (NSString*) externDeviceName {
  return resultWifiStatusNotification.externDeviceName;
}
- (WifiStatusNotificationBuilder*) setExternDeviceName:(NSString*) value {
  resultWifiStatusNotification.hasExternDeviceName = YES;
  resultWifiStatusNotification.externDeviceName = value;
  return self;
}
- (WifiStatusNotificationBuilder*) clearExternDeviceName {
  resultWifiStatusNotification.hasExternDeviceName = NO;
  resultWifiStatusNotification.externDeviceName = @"";
  return self;
}
- (BOOL) hasExternDeviceMacAddress {
  return resultWifiStatusNotification.hasExternDeviceMacAddress;
}
- (NSString*) externDeviceMacAddress {
  return resultWifiStatusNotification.externDeviceMacAddress;
}
- (WifiStatusNotificationBuilder*) setExternDeviceMacAddress:(NSString*) value {
  resultWifiStatusNotification.hasExternDeviceMacAddress = YES;
  resultWifiStatusNotification.externDeviceMacAddress = value;
  return self;
}
- (WifiStatusNotificationBuilder*) clearExternDeviceMacAddress {
  resultWifiStatusNotification.hasExternDeviceMacAddress = NO;
  resultWifiStatusNotification.externDeviceMacAddress = @"";
  return self;
}
- (BOOL) hasWifiStatus {
  return resultWifiStatusNotification.hasWifiStatus;
}
- (WifiStatus) wifiStatus {
  return resultWifiStatusNotification.wifiStatus;
}
- (WifiStatusNotificationBuilder*) setWifiStatus:(WifiStatus) value {
  resultWifiStatusNotification.hasWifiStatus = YES;
  resultWifiStatusNotification.wifiStatus = value;
  return self;
}
- (WifiStatusNotificationBuilder*) clearWifiStatus {
  resultWifiStatusNotification.hasWifiStatus = NO;
  resultWifiStatusNotification.wifiStatus = WifiStatusWifiStatusConnected;
  return self;
}
@end

@interface PhoneBookStatusNotification ()
@property PhoneBookStatus phoneBookStatus;
@end

@implementation PhoneBookStatusNotification

- (BOOL) hasPhoneBookStatus {
  return !!hasPhoneBookStatus_;
}
- (void) setHasPhoneBookStatus:(BOOL) _value_ {
  hasPhoneBookStatus_ = !!_value_;
}
@synthesize phoneBookStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.phoneBookStatus = PhoneBookStatusPhoneBookSyncStart;
  }
  return self;
}
static PhoneBookStatusNotification* defaultPhoneBookStatusNotificationInstance = nil;
+ (void) initialize {
  if (self == [PhoneBookStatusNotification class]) {
    defaultPhoneBookStatusNotificationInstance = [[PhoneBookStatusNotification alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPhoneBookStatusNotificationInstance;
}
- (instancetype) defaultInstance {
  return defaultPhoneBookStatusNotificationInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPhoneBookStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPhoneBookStatus) {
    [output writeEnum:1 value:self.phoneBookStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPhoneBookStatus) {
    size_ += computeEnumSize(1, self.phoneBookStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PhoneBookStatusNotification*) parseFromData:(NSData*) data {
  return (PhoneBookStatusNotification*)[[[PhoneBookStatusNotification builder] mergeFromData:data] build];
}
+ (PhoneBookStatusNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneBookStatusNotification*)[[[PhoneBookStatusNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PhoneBookStatusNotification*) parseFromInputStream:(NSInputStream*) input {
  return (PhoneBookStatusNotification*)[[[PhoneBookStatusNotification builder] mergeFromInputStream:input] build];
}
+ (PhoneBookStatusNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneBookStatusNotification*)[[[PhoneBookStatusNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PhoneBookStatusNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PhoneBookStatusNotification*)[[[PhoneBookStatusNotification builder] mergeFromCodedInputStream:input] build];
}
+ (PhoneBookStatusNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneBookStatusNotification*)[[[PhoneBookStatusNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PhoneBookStatusNotificationBuilder*) builder {
  return [[PhoneBookStatusNotificationBuilder alloc] init];
}
+ (PhoneBookStatusNotificationBuilder*) builderWithPrototype:(PhoneBookStatusNotification*) prototype {
  return [[PhoneBookStatusNotification builder] mergeFrom:prototype];
}
- (PhoneBookStatusNotificationBuilder*) builder {
  return [PhoneBookStatusNotification builder];
}
- (PhoneBookStatusNotificationBuilder*) toBuilder {
  return [PhoneBookStatusNotification builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPhoneBookStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneBookStatus", NSStringFromPhoneBookStatus(self.phoneBookStatus)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPhoneBookStatus) {
    [dictionary setObject: @(self.phoneBookStatus) forKey: @"phoneBookStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PhoneBookStatusNotification class]]) {
    return NO;
  }
  PhoneBookStatusNotification *otherMessage = other;
  return
      self.hasPhoneBookStatus == otherMessage.hasPhoneBookStatus &&
      (!self.hasPhoneBookStatus || self.phoneBookStatus == otherMessage.phoneBookStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPhoneBookStatus) {
    hashCode = hashCode * 31 + self.phoneBookStatus;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PhoneBookStatusNotificationBuilder()
@property (strong) PhoneBookStatusNotification* resultPhoneBookStatusNotification;
@end

@implementation PhoneBookStatusNotificationBuilder
@synthesize resultPhoneBookStatusNotification;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPhoneBookStatusNotification = [[PhoneBookStatusNotification alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPhoneBookStatusNotification;
}
- (PhoneBookStatusNotificationBuilder*) clear {
  self.resultPhoneBookStatusNotification = [[PhoneBookStatusNotification alloc] init];
  return self;
}
- (PhoneBookStatusNotificationBuilder*) clone {
  return [PhoneBookStatusNotification builderWithPrototype:resultPhoneBookStatusNotification];
}
- (PhoneBookStatusNotification*) defaultInstance {
  return [PhoneBookStatusNotification defaultInstance];
}
- (PhoneBookStatusNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PhoneBookStatusNotification*) buildPartial {
  PhoneBookStatusNotification* returnMe = resultPhoneBookStatusNotification;
  self.resultPhoneBookStatusNotification = nil;
  return returnMe;
}
- (PhoneBookStatusNotificationBuilder*) mergeFrom:(PhoneBookStatusNotification*) other {
  if (other == [PhoneBookStatusNotification defaultInstance]) {
    return self;
  }
  if (other.hasPhoneBookStatus) {
    [self setPhoneBookStatus:other.phoneBookStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PhoneBookStatusNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PhoneBookStatusNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        PhoneBookStatus value = (PhoneBookStatus)[input readEnum];
        if (PhoneBookStatusIsValidValue(value)) {
          [self setPhoneBookStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasPhoneBookStatus {
  return resultPhoneBookStatusNotification.hasPhoneBookStatus;
}
- (PhoneBookStatus) phoneBookStatus {
  return resultPhoneBookStatusNotification.phoneBookStatus;
}
- (PhoneBookStatusNotificationBuilder*) setPhoneBookStatus:(PhoneBookStatus) value {
  resultPhoneBookStatusNotification.hasPhoneBookStatus = YES;
  resultPhoneBookStatusNotification.phoneBookStatus = value;
  return self;
}
- (PhoneBookStatusNotificationBuilder*) clearPhoneBookStatus {
  resultPhoneBookStatusNotification.hasPhoneBookStatus = NO;
  resultPhoneBookStatusNotification.phoneBookStatus = PhoneBookStatusPhoneBookSyncStart;
  return self;
}
@end

@interface ReverseStatusNotification ()
@property ReverseStatus nReverseStatus;
@end

@implementation ReverseStatusNotification

- (BOOL) hasNReverseStatus {
  return !!hasNReverseStatus_;
}
- (void) setHasNReverseStatus:(BOOL) _value_ {
  hasNReverseStatus_ = !!_value_;
}
@synthesize nReverseStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.nReverseStatus = ReverseStatusReverseStart;
  }
  return self;
}
static ReverseStatusNotification* defaultReverseStatusNotificationInstance = nil;
+ (void) initialize {
  if (self == [ReverseStatusNotification class]) {
    defaultReverseStatusNotificationInstance = [[ReverseStatusNotification alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultReverseStatusNotificationInstance;
}
- (instancetype) defaultInstance {
  return defaultReverseStatusNotificationInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNReverseStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNReverseStatus) {
    [output writeEnum:1 value:self.nReverseStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNReverseStatus) {
    size_ += computeEnumSize(1, self.nReverseStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ReverseStatusNotification*) parseFromData:(NSData*) data {
  return (ReverseStatusNotification*)[[[ReverseStatusNotification builder] mergeFromData:data] build];
}
+ (ReverseStatusNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseStatusNotification*)[[[ReverseStatusNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ReverseStatusNotification*) parseFromInputStream:(NSInputStream*) input {
  return (ReverseStatusNotification*)[[[ReverseStatusNotification builder] mergeFromInputStream:input] build];
}
+ (ReverseStatusNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseStatusNotification*)[[[ReverseStatusNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseStatusNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ReverseStatusNotification*)[[[ReverseStatusNotification builder] mergeFromCodedInputStream:input] build];
}
+ (ReverseStatusNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseStatusNotification*)[[[ReverseStatusNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseStatusNotificationBuilder*) builder {
  return [[ReverseStatusNotificationBuilder alloc] init];
}
+ (ReverseStatusNotificationBuilder*) builderWithPrototype:(ReverseStatusNotification*) prototype {
  return [[ReverseStatusNotification builder] mergeFrom:prototype];
}
- (ReverseStatusNotificationBuilder*) builder {
  return [ReverseStatusNotification builder];
}
- (ReverseStatusNotificationBuilder*) toBuilder {
  return [ReverseStatusNotification builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNReverseStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nReverseStatus", NSStringFromReverseStatus(self.nReverseStatus)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNReverseStatus) {
    [dictionary setObject: @(self.nReverseStatus) forKey: @"nReverseStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ReverseStatusNotification class]]) {
    return NO;
  }
  ReverseStatusNotification *otherMessage = other;
  return
      self.hasNReverseStatus == otherMessage.hasNReverseStatus &&
      (!self.hasNReverseStatus || self.nReverseStatus == otherMessage.nReverseStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNReverseStatus) {
    hashCode = hashCode * 31 + self.nReverseStatus;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ReverseStatusNotificationBuilder()
@property (strong) ReverseStatusNotification* resultReverseStatusNotification;
@end

@implementation ReverseStatusNotificationBuilder
@synthesize resultReverseStatusNotification;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReverseStatusNotification = [[ReverseStatusNotification alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReverseStatusNotification;
}
- (ReverseStatusNotificationBuilder*) clear {
  self.resultReverseStatusNotification = [[ReverseStatusNotification alloc] init];
  return self;
}
- (ReverseStatusNotificationBuilder*) clone {
  return [ReverseStatusNotification builderWithPrototype:resultReverseStatusNotification];
}
- (ReverseStatusNotification*) defaultInstance {
  return [ReverseStatusNotification defaultInstance];
}
- (ReverseStatusNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ReverseStatusNotification*) buildPartial {
  ReverseStatusNotification* returnMe = resultReverseStatusNotification;
  self.resultReverseStatusNotification = nil;
  return returnMe;
}
- (ReverseStatusNotificationBuilder*) mergeFrom:(ReverseStatusNotification*) other {
  if (other == [ReverseStatusNotification defaultInstance]) {
    return self;
  }
  if (other.hasNReverseStatus) {
    [self setNReverseStatus:other.nReverseStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ReverseStatusNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ReverseStatusNotificationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        ReverseStatus value = (ReverseStatus)[input readEnum];
        if (ReverseStatusIsValidValue(value)) {
          [self setNReverseStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasNReverseStatus {
  return resultReverseStatusNotification.hasNReverseStatus;
}
- (ReverseStatus) nReverseStatus {
  return resultReverseStatusNotification.nReverseStatus;
}
- (ReverseStatusNotificationBuilder*) setNReverseStatus:(ReverseStatus) value {
  resultReverseStatusNotification.hasNReverseStatus = YES;
  resultReverseStatusNotification.nReverseStatus = value;
  return self;
}
- (ReverseStatusNotificationBuilder*) clearNReverseStatus {
  resultReverseStatusNotification.hasNReverseStatus = NO;
  resultReverseStatusNotification.nReverseStatus = ReverseStatusReverseStart;
  return self;
}
@end

@interface ReverseStatusNotificationRsp ()
@property RspCode nReverseResult;
@end

@implementation ReverseStatusNotificationRsp

- (BOOL) hasNReverseResult {
  return !!hasNReverseResult_;
}
- (void) setHasNReverseResult:(BOOL) _value_ {
  hasNReverseResult_ = !!_value_;
}
@synthesize nReverseResult;
- (instancetype) init {
  if ((self = [super init])) {
    self.nReverseResult = RspCodeFailed;
  }
  return self;
}
static ReverseStatusNotificationRsp* defaultReverseStatusNotificationRspInstance = nil;
+ (void) initialize {
  if (self == [ReverseStatusNotificationRsp class]) {
    defaultReverseStatusNotificationRspInstance = [[ReverseStatusNotificationRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultReverseStatusNotificationRspInstance;
}
- (instancetype) defaultInstance {
  return defaultReverseStatusNotificationRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNReverseResult) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNReverseResult) {
    [output writeEnum:1 value:self.nReverseResult];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNReverseResult) {
    size_ += computeEnumSize(1, self.nReverseResult);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ReverseStatusNotificationRsp*) parseFromData:(NSData*) data {
  return (ReverseStatusNotificationRsp*)[[[ReverseStatusNotificationRsp builder] mergeFromData:data] build];
}
+ (ReverseStatusNotificationRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseStatusNotificationRsp*)[[[ReverseStatusNotificationRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ReverseStatusNotificationRsp*) parseFromInputStream:(NSInputStream*) input {
  return (ReverseStatusNotificationRsp*)[[[ReverseStatusNotificationRsp builder] mergeFromInputStream:input] build];
}
+ (ReverseStatusNotificationRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseStatusNotificationRsp*)[[[ReverseStatusNotificationRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseStatusNotificationRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ReverseStatusNotificationRsp*)[[[ReverseStatusNotificationRsp builder] mergeFromCodedInputStream:input] build];
}
+ (ReverseStatusNotificationRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReverseStatusNotificationRsp*)[[[ReverseStatusNotificationRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReverseStatusNotificationRspBuilder*) builder {
  return [[ReverseStatusNotificationRspBuilder alloc] init];
}
+ (ReverseStatusNotificationRspBuilder*) builderWithPrototype:(ReverseStatusNotificationRsp*) prototype {
  return [[ReverseStatusNotificationRsp builder] mergeFrom:prototype];
}
- (ReverseStatusNotificationRspBuilder*) builder {
  return [ReverseStatusNotificationRsp builder];
}
- (ReverseStatusNotificationRspBuilder*) toBuilder {
  return [ReverseStatusNotificationRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNReverseResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nReverseResult", NSStringFromRspCode(self.nReverseResult)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNReverseResult) {
    [dictionary setObject: @(self.nReverseResult) forKey: @"nReverseResult"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ReverseStatusNotificationRsp class]]) {
    return NO;
  }
  ReverseStatusNotificationRsp *otherMessage = other;
  return
      self.hasNReverseResult == otherMessage.hasNReverseResult &&
      (!self.hasNReverseResult || self.nReverseResult == otherMessage.nReverseResult) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNReverseResult) {
    hashCode = hashCode * 31 + self.nReverseResult;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ReverseStatusNotificationRspBuilder()
@property (strong) ReverseStatusNotificationRsp* resultReverseStatusNotificationRsp;
@end

@implementation ReverseStatusNotificationRspBuilder
@synthesize resultReverseStatusNotificationRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReverseStatusNotificationRsp = [[ReverseStatusNotificationRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReverseStatusNotificationRsp;
}
- (ReverseStatusNotificationRspBuilder*) clear {
  self.resultReverseStatusNotificationRsp = [[ReverseStatusNotificationRsp alloc] init];
  return self;
}
- (ReverseStatusNotificationRspBuilder*) clone {
  return [ReverseStatusNotificationRsp builderWithPrototype:resultReverseStatusNotificationRsp];
}
- (ReverseStatusNotificationRsp*) defaultInstance {
  return [ReverseStatusNotificationRsp defaultInstance];
}
- (ReverseStatusNotificationRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ReverseStatusNotificationRsp*) buildPartial {
  ReverseStatusNotificationRsp* returnMe = resultReverseStatusNotificationRsp;
  self.resultReverseStatusNotificationRsp = nil;
  return returnMe;
}
- (ReverseStatusNotificationRspBuilder*) mergeFrom:(ReverseStatusNotificationRsp*) other {
  if (other == [ReverseStatusNotificationRsp defaultInstance]) {
    return self;
  }
  if (other.hasNReverseResult) {
    [self setNReverseResult:other.nReverseResult];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ReverseStatusNotificationRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ReverseStatusNotificationRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setNReverseResult:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasNReverseResult {
  return resultReverseStatusNotificationRsp.hasNReverseResult;
}
- (RspCode) nReverseResult {
  return resultReverseStatusNotificationRsp.nReverseResult;
}
- (ReverseStatusNotificationRspBuilder*) setNReverseResult:(RspCode) value {
  resultReverseStatusNotificationRsp.hasNReverseResult = YES;
  resultReverseStatusNotificationRsp.nReverseResult = value;
  return self;
}
- (ReverseStatusNotificationRspBuilder*) clearNReverseResult {
  resultReverseStatusNotificationRsp.hasNReverseResult = NO;
  resultReverseStatusNotificationRsp.nReverseResult = RspCodeFailed;
  return self;
}
@end

@interface GPSGetStatusReq ()
@property BOOL getGpsstatus;
@end

@implementation GPSGetStatusReq

- (BOOL) hasGetGpsstatus {
  return !!hasGetGpsstatus_;
}
- (void) setHasGetGpsstatus:(BOOL) _value_ {
  hasGetGpsstatus_ = !!_value_;
}
- (BOOL) getGpsstatus {
  return !!getGpsstatus_;
}
- (void) setGetGpsstatus:(BOOL) _value_ {
  getGpsstatus_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.getGpsstatus = NO;
  }
  return self;
}
static GPSGetStatusReq* defaultGPSGetStatusReqInstance = nil;
+ (void) initialize {
  if (self == [GPSGetStatusReq class]) {
    defaultGPSGetStatusReqInstance = [[GPSGetStatusReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGPSGetStatusReqInstance;
}
- (instancetype) defaultInstance {
  return defaultGPSGetStatusReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetGpsstatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetGpsstatus) {
    [output writeBool:1 value:self.getGpsstatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetGpsstatus) {
    size_ += computeBoolSize(1, self.getGpsstatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GPSGetStatusReq*) parseFromData:(NSData*) data {
  return (GPSGetStatusReq*)[[[GPSGetStatusReq builder] mergeFromData:data] build];
}
+ (GPSGetStatusReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GPSGetStatusReq*)[[[GPSGetStatusReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GPSGetStatusReq*) parseFromInputStream:(NSInputStream*) input {
  return (GPSGetStatusReq*)[[[GPSGetStatusReq builder] mergeFromInputStream:input] build];
}
+ (GPSGetStatusReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GPSGetStatusReq*)[[[GPSGetStatusReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GPSGetStatusReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GPSGetStatusReq*)[[[GPSGetStatusReq builder] mergeFromCodedInputStream:input] build];
}
+ (GPSGetStatusReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GPSGetStatusReq*)[[[GPSGetStatusReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GPSGetStatusReqBuilder*) builder {
  return [[GPSGetStatusReqBuilder alloc] init];
}
+ (GPSGetStatusReqBuilder*) builderWithPrototype:(GPSGetStatusReq*) prototype {
  return [[GPSGetStatusReq builder] mergeFrom:prototype];
}
- (GPSGetStatusReqBuilder*) builder {
  return [GPSGetStatusReq builder];
}
- (GPSGetStatusReqBuilder*) toBuilder {
  return [GPSGetStatusReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetGpsstatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getGpsstatus", [NSNumber numberWithBool:self.getGpsstatus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetGpsstatus) {
    [dictionary setObject: [NSNumber numberWithBool:self.getGpsstatus] forKey: @"getGpsstatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GPSGetStatusReq class]]) {
    return NO;
  }
  GPSGetStatusReq *otherMessage = other;
  return
      self.hasGetGpsstatus == otherMessage.hasGetGpsstatus &&
      (!self.hasGetGpsstatus || self.getGpsstatus == otherMessage.getGpsstatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetGpsstatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getGpsstatus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GPSGetStatusReqBuilder()
@property (strong) GPSGetStatusReq* resultGpsgetStatusReq;
@end

@implementation GPSGetStatusReqBuilder
@synthesize resultGpsgetStatusReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGpsgetStatusReq = [[GPSGetStatusReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGpsgetStatusReq;
}
- (GPSGetStatusReqBuilder*) clear {
  self.resultGpsgetStatusReq = [[GPSGetStatusReq alloc] init];
  return self;
}
- (GPSGetStatusReqBuilder*) clone {
  return [GPSGetStatusReq builderWithPrototype:resultGpsgetStatusReq];
}
- (GPSGetStatusReq*) defaultInstance {
  return [GPSGetStatusReq defaultInstance];
}
- (GPSGetStatusReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GPSGetStatusReq*) buildPartial {
  GPSGetStatusReq* returnMe = resultGpsgetStatusReq;
  self.resultGpsgetStatusReq = nil;
  return returnMe;
}
- (GPSGetStatusReqBuilder*) mergeFrom:(GPSGetStatusReq*) other {
  if (other == [GPSGetStatusReq defaultInstance]) {
    return self;
  }
  if (other.hasGetGpsstatus) {
    [self setGetGpsstatus:other.getGpsstatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GPSGetStatusReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GPSGetStatusReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGetGpsstatus:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasGetGpsstatus {
  return resultGpsgetStatusReq.hasGetGpsstatus;
}
- (BOOL) getGpsstatus {
  return resultGpsgetStatusReq.getGpsstatus;
}
- (GPSGetStatusReqBuilder*) setGetGpsstatus:(BOOL) value {
  resultGpsgetStatusReq.hasGetGpsstatus = YES;
  resultGpsgetStatusReq.getGpsstatus = value;
  return self;
}
- (GPSGetStatusReqBuilder*) clearGetGpsstatus {
  resultGpsgetStatusReq.hasGetGpsstatus = NO;
  resultGpsgetStatusReq.getGpsstatus = NO;
  return self;
}
@end

@interface GPSStatusRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@property BOOL gpsStatus;
@end

@implementation GPSStatusRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasGpsStatus {
  return !!hasGpsStatus_;
}
- (void) setHasGpsStatus:(BOOL) _value_ {
  hasGpsStatus_ = !!_value_;
}
- (BOOL) gpsStatus {
  return !!gpsStatus_;
}
- (void) setGpsStatus:(BOOL) _value_ {
  gpsStatus_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
    self.gpsStatus = NO;
  }
  return self;
}
static GPSStatusRsp* defaultGPSStatusRspInstance = nil;
+ (void) initialize {
  if (self == [GPSStatusRsp class]) {
    defaultGPSStatusRspInstance = [[GPSStatusRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGPSStatusRspInstance;
}
- (instancetype) defaultInstance {
  return defaultGPSStatusRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  if (self.hasGpsStatus) {
    [output writeBool:3 value:self.gpsStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  if (self.hasGpsStatus) {
    size_ += computeBoolSize(3, self.gpsStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GPSStatusRsp*) parseFromData:(NSData*) data {
  return (GPSStatusRsp*)[[[GPSStatusRsp builder] mergeFromData:data] build];
}
+ (GPSStatusRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GPSStatusRsp*)[[[GPSStatusRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GPSStatusRsp*) parseFromInputStream:(NSInputStream*) input {
  return (GPSStatusRsp*)[[[GPSStatusRsp builder] mergeFromInputStream:input] build];
}
+ (GPSStatusRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GPSStatusRsp*)[[[GPSStatusRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GPSStatusRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GPSStatusRsp*)[[[GPSStatusRsp builder] mergeFromCodedInputStream:input] build];
}
+ (GPSStatusRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GPSStatusRsp*)[[[GPSStatusRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GPSStatusRspBuilder*) builder {
  return [[GPSStatusRspBuilder alloc] init];
}
+ (GPSStatusRspBuilder*) builderWithPrototype:(GPSStatusRsp*) prototype {
  return [[GPSStatusRsp builder] mergeFrom:prototype];
}
- (GPSStatusRspBuilder*) builder {
  return [GPSStatusRsp builder];
}
- (GPSStatusRspBuilder*) toBuilder {
  return [GPSStatusRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  if (self.hasGpsStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gpsStatus", [NSNumber numberWithBool:self.gpsStatus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  if (self.hasGpsStatus) {
    [dictionary setObject: [NSNumber numberWithBool:self.gpsStatus] forKey: @"gpsStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GPSStatusRsp class]]) {
    return NO;
  }
  GPSStatusRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasGpsStatus == otherMessage.hasGpsStatus &&
      (!self.hasGpsStatus || self.gpsStatus == otherMessage.gpsStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  if (self.hasGpsStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.gpsStatus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GPSStatusRspBuilder()
@property (strong) GPSStatusRsp* resultGpsstatusRsp;
@end

@implementation GPSStatusRspBuilder
@synthesize resultGpsstatusRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGpsstatusRsp = [[GPSStatusRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGpsstatusRsp;
}
- (GPSStatusRspBuilder*) clear {
  self.resultGpsstatusRsp = [[GPSStatusRsp alloc] init];
  return self;
}
- (GPSStatusRspBuilder*) clone {
  return [GPSStatusRsp builderWithPrototype:resultGpsstatusRsp];
}
- (GPSStatusRsp*) defaultInstance {
  return [GPSStatusRsp defaultInstance];
}
- (GPSStatusRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GPSStatusRsp*) buildPartial {
  GPSStatusRsp* returnMe = resultGpsstatusRsp;
  self.resultGpsstatusRsp = nil;
  return returnMe;
}
- (GPSStatusRspBuilder*) mergeFrom:(GPSStatusRsp*) other {
  if (other == [GPSStatusRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasGpsStatus) {
    [self setGpsStatus:other.gpsStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GPSStatusRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GPSStatusRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setGpsStatus:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultGpsstatusRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultGpsstatusRsp.rspCode;
}
- (GPSStatusRspBuilder*) setRspCode:(RspCode) value {
  resultGpsstatusRsp.hasRspCode = YES;
  resultGpsstatusRsp.rspCode = value;
  return self;
}
- (GPSStatusRspBuilder*) clearRspCode {
  resultGpsstatusRsp.hasRspCode = NO;
  resultGpsstatusRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultGpsstatusRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultGpsstatusRsp.errorCode;
}
- (GPSStatusRspBuilder*) setErrorCode:(ErrorCode) value {
  resultGpsstatusRsp.hasErrorCode = YES;
  resultGpsstatusRsp.errorCode = value;
  return self;
}
- (GPSStatusRspBuilder*) clearErrorCode {
  resultGpsstatusRsp.hasErrorCode = NO;
  resultGpsstatusRsp.errorCode = ErrorCodeNormal;
  return self;
}
- (BOOL) hasGpsStatus {
  return resultGpsstatusRsp.hasGpsStatus;
}
- (BOOL) gpsStatus {
  return resultGpsstatusRsp.gpsStatus;
}
- (GPSStatusRspBuilder*) setGpsStatus:(BOOL) value {
  resultGpsstatusRsp.hasGpsStatus = YES;
  resultGpsstatusRsp.gpsStatus = value;
  return self;
}
- (GPSStatusRspBuilder*) clearGpsStatus {
  resultGpsstatusRsp.hasGpsStatus = NO;
  resultGpsstatusRsp.gpsStatus = NO;
  return self;
}
@end

@interface GPSStatusSetReq ()
@property BOOL setGpsstatus;
@end

@implementation GPSStatusSetReq

- (BOOL) hasSetGpsstatus {
  return !!hasSetGpsstatus_;
}
- (void) setHasSetGpsstatus:(BOOL) _value_ {
  hasSetGpsstatus_ = !!_value_;
}
- (BOOL) setGpsstatus {
  return !!setGpsstatus_;
}
- (void) setSetGpsstatus:(BOOL) _value_ {
  setGpsstatus_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.setGpsstatus = NO;
  }
  return self;
}
static GPSStatusSetReq* defaultGPSStatusSetReqInstance = nil;
+ (void) initialize {
  if (self == [GPSStatusSetReq class]) {
    defaultGPSStatusSetReqInstance = [[GPSStatusSetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGPSStatusSetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultGPSStatusSetReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSetGpsstatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSetGpsstatus) {
    [output writeBool:1 value:self.setGpsstatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSetGpsstatus) {
    size_ += computeBoolSize(1, self.setGpsstatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GPSStatusSetReq*) parseFromData:(NSData*) data {
  return (GPSStatusSetReq*)[[[GPSStatusSetReq builder] mergeFromData:data] build];
}
+ (GPSStatusSetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GPSStatusSetReq*)[[[GPSStatusSetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GPSStatusSetReq*) parseFromInputStream:(NSInputStream*) input {
  return (GPSStatusSetReq*)[[[GPSStatusSetReq builder] mergeFromInputStream:input] build];
}
+ (GPSStatusSetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GPSStatusSetReq*)[[[GPSStatusSetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GPSStatusSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GPSStatusSetReq*)[[[GPSStatusSetReq builder] mergeFromCodedInputStream:input] build];
}
+ (GPSStatusSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GPSStatusSetReq*)[[[GPSStatusSetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GPSStatusSetReqBuilder*) builder {
  return [[GPSStatusSetReqBuilder alloc] init];
}
+ (GPSStatusSetReqBuilder*) builderWithPrototype:(GPSStatusSetReq*) prototype {
  return [[GPSStatusSetReq builder] mergeFrom:prototype];
}
- (GPSStatusSetReqBuilder*) builder {
  return [GPSStatusSetReq builder];
}
- (GPSStatusSetReqBuilder*) toBuilder {
  return [GPSStatusSetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSetGpsstatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"setGpsstatus", [NSNumber numberWithBool:self.setGpsstatus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSetGpsstatus) {
    [dictionary setObject: [NSNumber numberWithBool:self.setGpsstatus] forKey: @"setGpsstatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GPSStatusSetReq class]]) {
    return NO;
  }
  GPSStatusSetReq *otherMessage = other;
  return
      self.hasSetGpsstatus == otherMessage.hasSetGpsstatus &&
      (!self.hasSetGpsstatus || self.setGpsstatus == otherMessage.setGpsstatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSetGpsstatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.setGpsstatus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GPSStatusSetReqBuilder()
@property (strong) GPSStatusSetReq* resultGpsstatusSetReq;
@end

@implementation GPSStatusSetReqBuilder
@synthesize resultGpsstatusSetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGpsstatusSetReq = [[GPSStatusSetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGpsstatusSetReq;
}
- (GPSStatusSetReqBuilder*) clear {
  self.resultGpsstatusSetReq = [[GPSStatusSetReq alloc] init];
  return self;
}
- (GPSStatusSetReqBuilder*) clone {
  return [GPSStatusSetReq builderWithPrototype:resultGpsstatusSetReq];
}
- (GPSStatusSetReq*) defaultInstance {
  return [GPSStatusSetReq defaultInstance];
}
- (GPSStatusSetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GPSStatusSetReq*) buildPartial {
  GPSStatusSetReq* returnMe = resultGpsstatusSetReq;
  self.resultGpsstatusSetReq = nil;
  return returnMe;
}
- (GPSStatusSetReqBuilder*) mergeFrom:(GPSStatusSetReq*) other {
  if (other == [GPSStatusSetReq defaultInstance]) {
    return self;
  }
  if (other.hasSetGpsstatus) {
    [self setSetGpsstatus:other.setGpsstatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GPSStatusSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GPSStatusSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSetGpsstatus:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSetGpsstatus {
  return resultGpsstatusSetReq.hasSetGpsstatus;
}
- (BOOL) setGpsstatus {
  return resultGpsstatusSetReq.setGpsstatus;
}
- (GPSStatusSetReqBuilder*) setSetGpsstatus:(BOOL) value {
  resultGpsstatusSetReq.hasSetGpsstatus = YES;
  resultGpsstatusSetReq.setGpsstatus = value;
  return self;
}
- (GPSStatusSetReqBuilder*) clearSetGpsstatus {
  resultGpsstatusSetReq.hasSetGpsstatus = NO;
  resultGpsstatusSetReq.setGpsstatus = NO;
  return self;
}
@end

@interface GPSGetDataReq ()
@property BOOL getGpsdata;
@end

@implementation GPSGetDataReq

- (BOOL) hasGetGpsdata {
  return !!hasGetGpsdata_;
}
- (void) setHasGetGpsdata:(BOOL) _value_ {
  hasGetGpsdata_ = !!_value_;
}
- (BOOL) getGpsdata {
  return !!getGpsdata_;
}
- (void) setGetGpsdata:(BOOL) _value_ {
  getGpsdata_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.getGpsdata = NO;
  }
  return self;
}
static GPSGetDataReq* defaultGPSGetDataReqInstance = nil;
+ (void) initialize {
  if (self == [GPSGetDataReq class]) {
    defaultGPSGetDataReqInstance = [[GPSGetDataReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGPSGetDataReqInstance;
}
- (instancetype) defaultInstance {
  return defaultGPSGetDataReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGetGpsdata) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGetGpsdata) {
    [output writeBool:1 value:self.getGpsdata];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGetGpsdata) {
    size_ += computeBoolSize(1, self.getGpsdata);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GPSGetDataReq*) parseFromData:(NSData*) data {
  return (GPSGetDataReq*)[[[GPSGetDataReq builder] mergeFromData:data] build];
}
+ (GPSGetDataReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GPSGetDataReq*)[[[GPSGetDataReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GPSGetDataReq*) parseFromInputStream:(NSInputStream*) input {
  return (GPSGetDataReq*)[[[GPSGetDataReq builder] mergeFromInputStream:input] build];
}
+ (GPSGetDataReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GPSGetDataReq*)[[[GPSGetDataReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GPSGetDataReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GPSGetDataReq*)[[[GPSGetDataReq builder] mergeFromCodedInputStream:input] build];
}
+ (GPSGetDataReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GPSGetDataReq*)[[[GPSGetDataReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GPSGetDataReqBuilder*) builder {
  return [[GPSGetDataReqBuilder alloc] init];
}
+ (GPSGetDataReqBuilder*) builderWithPrototype:(GPSGetDataReq*) prototype {
  return [[GPSGetDataReq builder] mergeFrom:prototype];
}
- (GPSGetDataReqBuilder*) builder {
  return [GPSGetDataReq builder];
}
- (GPSGetDataReqBuilder*) toBuilder {
  return [GPSGetDataReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGetGpsdata) {
    [output appendFormat:@"%@%@: %@\n", indent, @"getGpsdata", [NSNumber numberWithBool:self.getGpsdata]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasGetGpsdata) {
    [dictionary setObject: [NSNumber numberWithBool:self.getGpsdata] forKey: @"getGpsdata"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GPSGetDataReq class]]) {
    return NO;
  }
  GPSGetDataReq *otherMessage = other;
  return
      self.hasGetGpsdata == otherMessage.hasGetGpsdata &&
      (!self.hasGetGpsdata || self.getGpsdata == otherMessage.getGpsdata) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGetGpsdata) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.getGpsdata] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GPSGetDataReqBuilder()
@property (strong) GPSGetDataReq* resultGpsgetDataReq;
@end

@implementation GPSGetDataReqBuilder
@synthesize resultGpsgetDataReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGpsgetDataReq = [[GPSGetDataReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGpsgetDataReq;
}
- (GPSGetDataReqBuilder*) clear {
  self.resultGpsgetDataReq = [[GPSGetDataReq alloc] init];
  return self;
}
- (GPSGetDataReqBuilder*) clone {
  return [GPSGetDataReq builderWithPrototype:resultGpsgetDataReq];
}
- (GPSGetDataReq*) defaultInstance {
  return [GPSGetDataReq defaultInstance];
}
- (GPSGetDataReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GPSGetDataReq*) buildPartial {
  GPSGetDataReq* returnMe = resultGpsgetDataReq;
  self.resultGpsgetDataReq = nil;
  return returnMe;
}
- (GPSGetDataReqBuilder*) mergeFrom:(GPSGetDataReq*) other {
  if (other == [GPSGetDataReq defaultInstance]) {
    return self;
  }
  if (other.hasGetGpsdata) {
    [self setGetGpsdata:other.getGpsdata];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GPSGetDataReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GPSGetDataReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGetGpsdata:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasGetGpsdata {
  return resultGpsgetDataReq.hasGetGpsdata;
}
- (BOOL) getGpsdata {
  return resultGpsgetDataReq.getGpsdata;
}
- (GPSGetDataReqBuilder*) setGetGpsdata:(BOOL) value {
  resultGpsgetDataReq.hasGetGpsdata = YES;
  resultGpsgetDataReq.getGpsdata = value;
  return self;
}
- (GPSGetDataReqBuilder*) clearGetGpsdata {
  resultGpsgetDataReq.hasGetGpsdata = NO;
  resultGpsgetDataReq.getGpsdata = NO;
  return self;
}
@end

@interface GpsGetDataRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@property (strong) NSData* gpsdata;
@end

@implementation GpsGetDataRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (BOOL) hasGpsdata {
  return !!hasGpsdata_;
}
- (void) setHasGpsdata:(BOOL) _value_ {
  hasGpsdata_ = !!_value_;
}
@synthesize gpsdata;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
    self.gpsdata = [NSData data];
  }
  return self;
}
static GpsGetDataRsp* defaultGpsGetDataRspInstance = nil;
+ (void) initialize {
  if (self == [GpsGetDataRsp class]) {
    defaultGpsGetDataRspInstance = [[GpsGetDataRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGpsGetDataRspInstance;
}
- (instancetype) defaultInstance {
  return defaultGpsGetDataRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  if (self.hasGpsdata) {
    [output writeData:3 value:self.gpsdata];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  if (self.hasGpsdata) {
    size_ += computeDataSize(3, self.gpsdata);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GpsGetDataRsp*) parseFromData:(NSData*) data {
  return (GpsGetDataRsp*)[[[GpsGetDataRsp builder] mergeFromData:data] build];
}
+ (GpsGetDataRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GpsGetDataRsp*)[[[GpsGetDataRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GpsGetDataRsp*) parseFromInputStream:(NSInputStream*) input {
  return (GpsGetDataRsp*)[[[GpsGetDataRsp builder] mergeFromInputStream:input] build];
}
+ (GpsGetDataRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GpsGetDataRsp*)[[[GpsGetDataRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GpsGetDataRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GpsGetDataRsp*)[[[GpsGetDataRsp builder] mergeFromCodedInputStream:input] build];
}
+ (GpsGetDataRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GpsGetDataRsp*)[[[GpsGetDataRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GpsGetDataRspBuilder*) builder {
  return [[GpsGetDataRspBuilder alloc] init];
}
+ (GpsGetDataRspBuilder*) builderWithPrototype:(GpsGetDataRsp*) prototype {
  return [[GpsGetDataRsp builder] mergeFrom:prototype];
}
- (GpsGetDataRspBuilder*) builder {
  return [GpsGetDataRsp builder];
}
- (GpsGetDataRspBuilder*) toBuilder {
  return [GpsGetDataRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  if (self.hasGpsdata) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gpsdata", self.gpsdata];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  if (self.hasGpsdata) {
    [dictionary setObject: self.gpsdata forKey: @"gpsdata"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GpsGetDataRsp class]]) {
    return NO;
  }
  GpsGetDataRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasGpsdata == otherMessage.hasGpsdata &&
      (!self.hasGpsdata || [self.gpsdata isEqual:otherMessage.gpsdata]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  if (self.hasGpsdata) {
    hashCode = hashCode * 31 + [self.gpsdata hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GpsGetDataRspBuilder()
@property (strong) GpsGetDataRsp* resultGpsGetDataRsp;
@end

@implementation GpsGetDataRspBuilder
@synthesize resultGpsGetDataRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGpsGetDataRsp = [[GpsGetDataRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGpsGetDataRsp;
}
- (GpsGetDataRspBuilder*) clear {
  self.resultGpsGetDataRsp = [[GpsGetDataRsp alloc] init];
  return self;
}
- (GpsGetDataRspBuilder*) clone {
  return [GpsGetDataRsp builderWithPrototype:resultGpsGetDataRsp];
}
- (GpsGetDataRsp*) defaultInstance {
  return [GpsGetDataRsp defaultInstance];
}
- (GpsGetDataRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GpsGetDataRsp*) buildPartial {
  GpsGetDataRsp* returnMe = resultGpsGetDataRsp;
  self.resultGpsGetDataRsp = nil;
  return returnMe;
}
- (GpsGetDataRspBuilder*) mergeFrom:(GpsGetDataRsp*) other {
  if (other == [GpsGetDataRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasGpsdata) {
    [self setGpsdata:other.gpsdata];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GpsGetDataRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GpsGetDataRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setGpsdata:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultGpsGetDataRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultGpsGetDataRsp.rspCode;
}
- (GpsGetDataRspBuilder*) setRspCode:(RspCode) value {
  resultGpsGetDataRsp.hasRspCode = YES;
  resultGpsGetDataRsp.rspCode = value;
  return self;
}
- (GpsGetDataRspBuilder*) clearRspCode {
  resultGpsGetDataRsp.hasRspCode = NO;
  resultGpsGetDataRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultGpsGetDataRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultGpsGetDataRsp.errorCode;
}
- (GpsGetDataRspBuilder*) setErrorCode:(ErrorCode) value {
  resultGpsGetDataRsp.hasErrorCode = YES;
  resultGpsGetDataRsp.errorCode = value;
  return self;
}
- (GpsGetDataRspBuilder*) clearErrorCode {
  resultGpsGetDataRsp.hasErrorCode = NO;
  resultGpsGetDataRsp.errorCode = ErrorCodeNormal;
  return self;
}
- (BOOL) hasGpsdata {
  return resultGpsGetDataRsp.hasGpsdata;
}
- (NSData*) gpsdata {
  return resultGpsGetDataRsp.gpsdata;
}
- (GpsGetDataRspBuilder*) setGpsdata:(NSData*) value {
  resultGpsGetDataRsp.hasGpsdata = YES;
  resultGpsGetDataRsp.gpsdata = value;
  return self;
}
- (GpsGetDataRspBuilder*) clearGpsdata {
  resultGpsGetDataRsp.hasGpsdata = NO;
  resultGpsGetDataRsp.gpsdata = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
