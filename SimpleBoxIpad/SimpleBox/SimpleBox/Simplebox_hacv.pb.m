// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Simplebox_hacv.pb.h"
// @@protoc_insertion_point(imports)

@implementation SimpleboxHacvRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SimpleboxHacvRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL RspCodeIsValidValue(RspCode value) {
  switch (value) {
    case RspCodeFailed:
    case RspCodeSuccess:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromRspCode(RspCode value) {
  switch (value) {
    case RspCodeFailed:
      return @"RspCodeFailed";
    case RspCodeSuccess:
      return @"RspCodeSuccess";
    default:
      return nil;
  }
}

BOOL ErrorCodeIsValidValue(ErrorCode value) {
  switch (value) {
    case ErrorCodeNormal:
    case ErrorCodeDataInvalid:
    case ErrorCodeDataEmpty:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromErrorCode(ErrorCode value) {
  switch (value) {
    case ErrorCodeNormal:
      return @"ErrorCodeNormal";
    case ErrorCodeDataInvalid:
      return @"ErrorCodeDataInvalid";
    case ErrorCodeDataEmpty:
      return @"ErrorCodeDataEmpty";
    default:
      return nil;
  }
}

BOOL CycModeIsValidValue(CycMode value) {
  switch (value) {
    case CycModeCycModeInside:
    case CycModeCycModeOuter:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromCycMode(CycMode value) {
  switch (value) {
    case CycModeCycModeInside:
      return @"CycModeCycModeInside";
    case CycModeCycModeOuter:
      return @"CycModeCycModeOuter";
    default:
      return nil;
  }
}

BOOL BlowModeIsValidValue(BlowMode value) {
  switch (value) {
    case BlowModeBlowFace:
    case BlowModeBlowFoot:
    case BlowModeBlowFaceFoot:
    case BlowModeBlowFootDefroest:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBlowMode(BlowMode value) {
  switch (value) {
    case BlowModeBlowFace:
      return @"BlowModeBlowFace";
    case BlowModeBlowFoot:
      return @"BlowModeBlowFoot";
    case BlowModeBlowFaceFoot:
      return @"BlowModeBlowFaceFoot";
    case BlowModeBlowFootDefroest:
      return @"BlowModeBlowFootDefroest";
    default:
      return nil;
  }
}

BOOL WindOptionIsValidValue(WindOption value) {
  switch (value) {
    case WindOptionSpeedUp:
    case WindOptionSpeedDown:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromWindOption(WindOption value) {
  switch (value) {
    case WindOptionSpeedUp:
      return @"WindOptionSpeedUp";
    case WindOptionSpeedDown:
      return @"WindOptionSpeedDown";
    default:
      return nil;
  }
}

BOOL TempOptionIsValidValue(TempOption value) {
  switch (value) {
    case TempOptionTempUp:
    case TempOptionTempDown:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromTempOption(TempOption value) {
  switch (value) {
    case TempOptionTempUp:
      return @"TempOptionTempUp";
    case TempOptionTempDown:
      return @"TempOptionTempDown";
    default:
      return nil;
  }
}

@interface SetRsp ()
@property RspCode rspCode;
@property ErrorCode errorCode;
@end

@implementation SetRsp

- (BOOL) hasRspCode {
  return !!hasRspCode_;
}
- (void) setHasRspCode:(BOOL) _value_ {
  hasRspCode_ = !!_value_;
}
@synthesize rspCode;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (instancetype) init {
  if ((self = [super init])) {
    self.rspCode = RspCodeFailed;
    self.errorCode = ErrorCodeNormal;
  }
  return self;
}
static SetRsp* defaultSetRspInstance = nil;
+ (void) initialize {
  if (self == [SetRsp class]) {
    defaultSetRspInstance = [[SetRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSetRspInstance;
}
- (instancetype) defaultInstance {
  return defaultSetRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRspCode) {
    return NO;
  }
  if (!self.hasErrorCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRspCode) {
    [output writeEnum:1 value:self.rspCode];
  }
  if (self.hasErrorCode) {
    [output writeEnum:2 value:self.errorCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRspCode) {
    size_ += computeEnumSize(1, self.rspCode);
  }
  if (self.hasErrorCode) {
    size_ += computeEnumSize(2, self.errorCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SetRsp*) parseFromData:(NSData*) data {
  return (SetRsp*)[[[SetRsp builder] mergeFromData:data] build];
}
+ (SetRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SetRsp*)[[[SetRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SetRsp*) parseFromInputStream:(NSInputStream*) input {
  return (SetRsp*)[[[SetRsp builder] mergeFromInputStream:input] build];
}
+ (SetRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SetRsp*)[[[SetRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SetRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SetRsp*)[[[SetRsp builder] mergeFromCodedInputStream:input] build];
}
+ (SetRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SetRsp*)[[[SetRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SetRspBuilder*) builder {
  return [[SetRspBuilder alloc] init];
}
+ (SetRspBuilder*) builderWithPrototype:(SetRsp*) prototype {
  return [[SetRsp builder] mergeFrom:prototype];
}
- (SetRspBuilder*) builder {
  return [SetRsp builder];
}
- (SetRspBuilder*) toBuilder {
  return [SetRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRspCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rspCode", NSStringFromRspCode(self.rspCode)];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", NSStringFromErrorCode(self.errorCode)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRspCode) {
    [dictionary setObject: @(self.rspCode) forKey: @"rspCode"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: @(self.errorCode) forKey: @"errorCode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SetRsp class]]) {
    return NO;
  }
  SetRsp *otherMessage = other;
  return
      self.hasRspCode == otherMessage.hasRspCode &&
      (!self.hasRspCode || self.rspCode == otherMessage.rspCode) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRspCode) {
    hashCode = hashCode * 31 + self.rspCode;
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + self.errorCode;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SetRspBuilder()
@property (strong) SetRsp* resultSetRsp;
@end

@implementation SetRspBuilder
@synthesize resultSetRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSetRsp = [[SetRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSetRsp;
}
- (SetRspBuilder*) clear {
  self.resultSetRsp = [[SetRsp alloc] init];
  return self;
}
- (SetRspBuilder*) clone {
  return [SetRsp builderWithPrototype:resultSetRsp];
}
- (SetRsp*) defaultInstance {
  return [SetRsp defaultInstance];
}
- (SetRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SetRsp*) buildPartial {
  SetRsp* returnMe = resultSetRsp;
  self.resultSetRsp = nil;
  return returnMe;
}
- (SetRspBuilder*) mergeFrom:(SetRsp*) other {
  if (other == [SetRsp defaultInstance]) {
    return self;
  }
  if (other.hasRspCode) {
    [self setRspCode:other.rspCode];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SetRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SetRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setRspCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ErrorCode value = (ErrorCode)[input readEnum];
        if (ErrorCodeIsValidValue(value)) {
          [self setErrorCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasRspCode {
  return resultSetRsp.hasRspCode;
}
- (RspCode) rspCode {
  return resultSetRsp.rspCode;
}
- (SetRspBuilder*) setRspCode:(RspCode) value {
  resultSetRsp.hasRspCode = YES;
  resultSetRsp.rspCode = value;
  return self;
}
- (SetRspBuilder*) clearRspCode {
  resultSetRsp.hasRspCode = NO;
  resultSetRsp.rspCode = RspCodeFailed;
  return self;
}
- (BOOL) hasErrorCode {
  return resultSetRsp.hasErrorCode;
}
- (ErrorCode) errorCode {
  return resultSetRsp.errorCode;
}
- (SetRspBuilder*) setErrorCode:(ErrorCode) value {
  resultSetRsp.hasErrorCode = YES;
  resultSetRsp.errorCode = value;
  return self;
}
- (SetRspBuilder*) clearErrorCode {
  resultSetRsp.hasErrorCode = NO;
  resultSetRsp.errorCode = ErrorCodeNormal;
  return self;
}
@end

@interface ACParameterNotify ()
@property BOOL onOff;
@property BOOL acOpen;
@property BOOL dualOpen;
@property BOOL autoOpen;
@property BOOL frontDefrost;
@property BOOL backDefrost;
@property CycMode cycMode;
@property BlowMode blowMode;
@property UInt32 windSpeed;
@property UInt32 temperature0;
@property UInt32 temperature1;
@end

@implementation ACParameterNotify

- (BOOL) hasOnOff {
  return !!hasOnOff_;
}
- (void) setHasOnOff:(BOOL) _value_ {
  hasOnOff_ = !!_value_;
}
- (BOOL) onOff {
  return !!onOff_;
}
- (void) setOnOff:(BOOL) _value_ {
  onOff_ = !!_value_;
}
- (BOOL) hasAcOpen {
  return !!hasAcOpen_;
}
- (void) setHasAcOpen:(BOOL) _value_ {
  hasAcOpen_ = !!_value_;
}
- (BOOL) acOpen {
  return !!acOpen_;
}
- (void) setAcOpen:(BOOL) _value_ {
  acOpen_ = !!_value_;
}
- (BOOL) hasDualOpen {
  return !!hasDualOpen_;
}
- (void) setHasDualOpen:(BOOL) _value_ {
  hasDualOpen_ = !!_value_;
}
- (BOOL) dualOpen {
  return !!dualOpen_;
}
- (void) setDualOpen:(BOOL) _value_ {
  dualOpen_ = !!_value_;
}
- (BOOL) hasAutoOpen {
  return !!hasAutoOpen_;
}
- (void) setHasAutoOpen:(BOOL) _value_ {
  hasAutoOpen_ = !!_value_;
}
- (BOOL) autoOpen {
  return !!autoOpen_;
}
- (void) setAutoOpen:(BOOL) _value_ {
  autoOpen_ = !!_value_;
}
- (BOOL) hasFrontDefrost {
  return !!hasFrontDefrost_;
}
- (void) setHasFrontDefrost:(BOOL) _value_ {
  hasFrontDefrost_ = !!_value_;
}
- (BOOL) frontDefrost {
  return !!frontDefrost_;
}
- (void) setFrontDefrost:(BOOL) _value_ {
  frontDefrost_ = !!_value_;
}
- (BOOL) hasBackDefrost {
  return !!hasBackDefrost_;
}
- (void) setHasBackDefrost:(BOOL) _value_ {
  hasBackDefrost_ = !!_value_;
}
- (BOOL) backDefrost {
  return !!backDefrost_;
}
- (void) setBackDefrost:(BOOL) _value_ {
  backDefrost_ = !!_value_;
}
- (BOOL) hasCycMode {
  return !!hasCycMode_;
}
- (void) setHasCycMode:(BOOL) _value_ {
  hasCycMode_ = !!_value_;
}
@synthesize cycMode;
- (BOOL) hasBlowMode {
  return !!hasBlowMode_;
}
- (void) setHasBlowMode:(BOOL) _value_ {
  hasBlowMode_ = !!_value_;
}
@synthesize blowMode;
- (BOOL) hasWindSpeed {
  return !!hasWindSpeed_;
}
- (void) setHasWindSpeed:(BOOL) _value_ {
  hasWindSpeed_ = !!_value_;
}
@synthesize windSpeed;
- (BOOL) hasTemperature0 {
  return !!hasTemperature0_;
}
- (void) setHasTemperature0:(BOOL) _value_ {
  hasTemperature0_ = !!_value_;
}
@synthesize temperature0;
- (BOOL) hasTemperature1 {
  return !!hasTemperature1_;
}
- (void) setHasTemperature1:(BOOL) _value_ {
  hasTemperature1_ = !!_value_;
}
@synthesize temperature1;
- (instancetype) init {
  if ((self = [super init])) {
    self.onOff = NO;
    self.acOpen = NO;
    self.dualOpen = NO;
    self.autoOpen = NO;
    self.frontDefrost = NO;
    self.backDefrost = NO;
    self.cycMode = CycModeCycModeInside;
    self.blowMode = BlowModeBlowFace;
    self.windSpeed = 0;
    self.temperature0 = 0;
    self.temperature1 = 0;
  }
  return self;
}
static ACParameterNotify* defaultACParameterNotifyInstance = nil;
+ (void) initialize {
  if (self == [ACParameterNotify class]) {
    defaultACParameterNotifyInstance = [[ACParameterNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultACParameterNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultACParameterNotifyInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOnOff) {
    [output writeBool:1 value:self.onOff];
  }
  if (self.hasAcOpen) {
    [output writeBool:2 value:self.acOpen];
  }
  if (self.hasDualOpen) {
    [output writeBool:3 value:self.dualOpen];
  }
  if (self.hasAutoOpen) {
    [output writeBool:4 value:self.autoOpen];
  }
  if (self.hasFrontDefrost) {
    [output writeBool:5 value:self.frontDefrost];
  }
  if (self.hasBackDefrost) {
    [output writeBool:6 value:self.backDefrost];
  }
  if (self.hasCycMode) {
    [output writeEnum:7 value:self.cycMode];
  }
  if (self.hasBlowMode) {
    [output writeEnum:8 value:self.blowMode];
  }
  if (self.hasWindSpeed) {
    [output writeUInt32:9 value:self.windSpeed];
  }
  if (self.hasTemperature0) {
    [output writeUInt32:10 value:self.temperature0];
  }
  if (self.hasTemperature1) {
    [output writeUInt32:11 value:self.temperature1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOnOff) {
    size_ += computeBoolSize(1, self.onOff);
  }
  if (self.hasAcOpen) {
    size_ += computeBoolSize(2, self.acOpen);
  }
  if (self.hasDualOpen) {
    size_ += computeBoolSize(3, self.dualOpen);
  }
  if (self.hasAutoOpen) {
    size_ += computeBoolSize(4, self.autoOpen);
  }
  if (self.hasFrontDefrost) {
    size_ += computeBoolSize(5, self.frontDefrost);
  }
  if (self.hasBackDefrost) {
    size_ += computeBoolSize(6, self.backDefrost);
  }
  if (self.hasCycMode) {
    size_ += computeEnumSize(7, self.cycMode);
  }
  if (self.hasBlowMode) {
    size_ += computeEnumSize(8, self.blowMode);
  }
  if (self.hasWindSpeed) {
    size_ += computeUInt32Size(9, self.windSpeed);
  }
  if (self.hasTemperature0) {
    size_ += computeUInt32Size(10, self.temperature0);
  }
  if (self.hasTemperature1) {
    size_ += computeUInt32Size(11, self.temperature1);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ACParameterNotify*) parseFromData:(NSData*) data {
  return (ACParameterNotify*)[[[ACParameterNotify builder] mergeFromData:data] build];
}
+ (ACParameterNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterNotify*)[[[ACParameterNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ACParameterNotify*) parseFromInputStream:(NSInputStream*) input {
  return (ACParameterNotify*)[[[ACParameterNotify builder] mergeFromInputStream:input] build];
}
+ (ACParameterNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterNotify*)[[[ACParameterNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ACParameterNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ACParameterNotify*)[[[ACParameterNotify builder] mergeFromCodedInputStream:input] build];
}
+ (ACParameterNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterNotify*)[[[ACParameterNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ACParameterNotifyBuilder*) builder {
  return [[ACParameterNotifyBuilder alloc] init];
}
+ (ACParameterNotifyBuilder*) builderWithPrototype:(ACParameterNotify*) prototype {
  return [[ACParameterNotify builder] mergeFrom:prototype];
}
- (ACParameterNotifyBuilder*) builder {
  return [ACParameterNotify builder];
}
- (ACParameterNotifyBuilder*) toBuilder {
  return [ACParameterNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOnOff) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onOff", [NSNumber numberWithBool:self.onOff]];
  }
  if (self.hasAcOpen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"acOpen", [NSNumber numberWithBool:self.acOpen]];
  }
  if (self.hasDualOpen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dualOpen", [NSNumber numberWithBool:self.dualOpen]];
  }
  if (self.hasAutoOpen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"autoOpen", [NSNumber numberWithBool:self.autoOpen]];
  }
  if (self.hasFrontDefrost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"frontDefrost", [NSNumber numberWithBool:self.frontDefrost]];
  }
  if (self.hasBackDefrost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"backDefrost", [NSNumber numberWithBool:self.backDefrost]];
  }
  if (self.hasCycMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cycMode", NSStringFromCycMode(self.cycMode)];
  }
  if (self.hasBlowMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"blowMode", NSStringFromBlowMode(self.blowMode)];
  }
  if (self.hasWindSpeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"windSpeed", [NSNumber numberWithInteger:self.windSpeed]];
  }
  if (self.hasTemperature0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temperature0", [NSNumber numberWithInteger:self.temperature0]];
  }
  if (self.hasTemperature1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temperature1", [NSNumber numberWithInteger:self.temperature1]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOnOff) {
    [dictionary setObject: [NSNumber numberWithBool:self.onOff] forKey: @"onOff"];
  }
  if (self.hasAcOpen) {
    [dictionary setObject: [NSNumber numberWithBool:self.acOpen] forKey: @"acOpen"];
  }
  if (self.hasDualOpen) {
    [dictionary setObject: [NSNumber numberWithBool:self.dualOpen] forKey: @"dualOpen"];
  }
  if (self.hasAutoOpen) {
    [dictionary setObject: [NSNumber numberWithBool:self.autoOpen] forKey: @"autoOpen"];
  }
  if (self.hasFrontDefrost) {
    [dictionary setObject: [NSNumber numberWithBool:self.frontDefrost] forKey: @"frontDefrost"];
  }
  if (self.hasBackDefrost) {
    [dictionary setObject: [NSNumber numberWithBool:self.backDefrost] forKey: @"backDefrost"];
  }
  if (self.hasCycMode) {
    [dictionary setObject: @(self.cycMode) forKey: @"cycMode"];
  }
  if (self.hasBlowMode) {
    [dictionary setObject: @(self.blowMode) forKey: @"blowMode"];
  }
  if (self.hasWindSpeed) {
    [dictionary setObject: [NSNumber numberWithInteger:self.windSpeed] forKey: @"windSpeed"];
  }
  if (self.hasTemperature0) {
    [dictionary setObject: [NSNumber numberWithInteger:self.temperature0] forKey: @"temperature0"];
  }
  if (self.hasTemperature1) {
    [dictionary setObject: [NSNumber numberWithInteger:self.temperature1] forKey: @"temperature1"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ACParameterNotify class]]) {
    return NO;
  }
  ACParameterNotify *otherMessage = other;
  return
      self.hasOnOff == otherMessage.hasOnOff &&
      (!self.hasOnOff || self.onOff == otherMessage.onOff) &&
      self.hasAcOpen == otherMessage.hasAcOpen &&
      (!self.hasAcOpen || self.acOpen == otherMessage.acOpen) &&
      self.hasDualOpen == otherMessage.hasDualOpen &&
      (!self.hasDualOpen || self.dualOpen == otherMessage.dualOpen) &&
      self.hasAutoOpen == otherMessage.hasAutoOpen &&
      (!self.hasAutoOpen || self.autoOpen == otherMessage.autoOpen) &&
      self.hasFrontDefrost == otherMessage.hasFrontDefrost &&
      (!self.hasFrontDefrost || self.frontDefrost == otherMessage.frontDefrost) &&
      self.hasBackDefrost == otherMessage.hasBackDefrost &&
      (!self.hasBackDefrost || self.backDefrost == otherMessage.backDefrost) &&
      self.hasCycMode == otherMessage.hasCycMode &&
      (!self.hasCycMode || self.cycMode == otherMessage.cycMode) &&
      self.hasBlowMode == otherMessage.hasBlowMode &&
      (!self.hasBlowMode || self.blowMode == otherMessage.blowMode) &&
      self.hasWindSpeed == otherMessage.hasWindSpeed &&
      (!self.hasWindSpeed || self.windSpeed == otherMessage.windSpeed) &&
      self.hasTemperature0 == otherMessage.hasTemperature0 &&
      (!self.hasTemperature0 || self.temperature0 == otherMessage.temperature0) &&
      self.hasTemperature1 == otherMessage.hasTemperature1 &&
      (!self.hasTemperature1 || self.temperature1 == otherMessage.temperature1) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOnOff) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.onOff] hash];
  }
  if (self.hasAcOpen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.acOpen] hash];
  }
  if (self.hasDualOpen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.dualOpen] hash];
  }
  if (self.hasAutoOpen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.autoOpen] hash];
  }
  if (self.hasFrontDefrost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.frontDefrost] hash];
  }
  if (self.hasBackDefrost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.backDefrost] hash];
  }
  if (self.hasCycMode) {
    hashCode = hashCode * 31 + self.cycMode;
  }
  if (self.hasBlowMode) {
    hashCode = hashCode * 31 + self.blowMode;
  }
  if (self.hasWindSpeed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.windSpeed] hash];
  }
  if (self.hasTemperature0) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.temperature0] hash];
  }
  if (self.hasTemperature1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.temperature1] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ACParameterNotifyBuilder()
@property (strong) ACParameterNotify* resultAcparameterNotify;
@end

@implementation ACParameterNotifyBuilder
@synthesize resultAcparameterNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAcparameterNotify = [[ACParameterNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAcparameterNotify;
}
- (ACParameterNotifyBuilder*) clear {
  self.resultAcparameterNotify = [[ACParameterNotify alloc] init];
  return self;
}
- (ACParameterNotifyBuilder*) clone {
  return [ACParameterNotify builderWithPrototype:resultAcparameterNotify];
}
- (ACParameterNotify*) defaultInstance {
  return [ACParameterNotify defaultInstance];
}
- (ACParameterNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ACParameterNotify*) buildPartial {
  ACParameterNotify* returnMe = resultAcparameterNotify;
  self.resultAcparameterNotify = nil;
  return returnMe;
}
- (ACParameterNotifyBuilder*) mergeFrom:(ACParameterNotify*) other {
  if (other == [ACParameterNotify defaultInstance]) {
    return self;
  }
  if (other.hasOnOff) {
    [self setOnOff:other.onOff];
  }
  if (other.hasAcOpen) {
    [self setAcOpen:other.acOpen];
  }
  if (other.hasDualOpen) {
    [self setDualOpen:other.dualOpen];
  }
  if (other.hasAutoOpen) {
    [self setAutoOpen:other.autoOpen];
  }
  if (other.hasFrontDefrost) {
    [self setFrontDefrost:other.frontDefrost];
  }
  if (other.hasBackDefrost) {
    [self setBackDefrost:other.backDefrost];
  }
  if (other.hasCycMode) {
    [self setCycMode:other.cycMode];
  }
  if (other.hasBlowMode) {
    [self setBlowMode:other.blowMode];
  }
  if (other.hasWindSpeed) {
    [self setWindSpeed:other.windSpeed];
  }
  if (other.hasTemperature0) {
    [self setTemperature0:other.temperature0];
  }
  if (other.hasTemperature1) {
    [self setTemperature1:other.temperature1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ACParameterNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ACParameterNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOnOff:[input readBool]];
        break;
      }
      case 16: {
        [self setAcOpen:[input readBool]];
        break;
      }
      case 24: {
        [self setDualOpen:[input readBool]];
        break;
      }
      case 32: {
        [self setAutoOpen:[input readBool]];
        break;
      }
      case 40: {
        [self setFrontDefrost:[input readBool]];
        break;
      }
      case 48: {
        [self setBackDefrost:[input readBool]];
        break;
      }
      case 56: {
        CycMode value = (CycMode)[input readEnum];
        if (CycModeIsValidValue(value)) {
          [self setCycMode:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 64: {
        BlowMode value = (BlowMode)[input readEnum];
        if (BlowModeIsValidValue(value)) {
          [self setBlowMode:value];
        } else {
          [unknownFields mergeVarintField:8 value:value];
        }
        break;
      }
      case 72: {
        [self setWindSpeed:[input readUInt32]];
        break;
      }
      case 80: {
        [self setTemperature0:[input readUInt32]];
        break;
      }
      case 88: {
        [self setTemperature1:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOnOff {
  return resultAcparameterNotify.hasOnOff;
}
- (BOOL) onOff {
  return resultAcparameterNotify.onOff;
}
- (ACParameterNotifyBuilder*) setOnOff:(BOOL) value {
  resultAcparameterNotify.hasOnOff = YES;
  resultAcparameterNotify.onOff = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearOnOff {
  resultAcparameterNotify.hasOnOff = NO;
  resultAcparameterNotify.onOff = NO;
  return self;
}
- (BOOL) hasAcOpen {
  return resultAcparameterNotify.hasAcOpen;
}
- (BOOL) acOpen {
  return resultAcparameterNotify.acOpen;
}
- (ACParameterNotifyBuilder*) setAcOpen:(BOOL) value {
  resultAcparameterNotify.hasAcOpen = YES;
  resultAcparameterNotify.acOpen = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearAcOpen {
  resultAcparameterNotify.hasAcOpen = NO;
  resultAcparameterNotify.acOpen = NO;
  return self;
}
- (BOOL) hasDualOpen {
  return resultAcparameterNotify.hasDualOpen;
}
- (BOOL) dualOpen {
  return resultAcparameterNotify.dualOpen;
}
- (ACParameterNotifyBuilder*) setDualOpen:(BOOL) value {
  resultAcparameterNotify.hasDualOpen = YES;
  resultAcparameterNotify.dualOpen = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearDualOpen {
  resultAcparameterNotify.hasDualOpen = NO;
  resultAcparameterNotify.dualOpen = NO;
  return self;
}
- (BOOL) hasAutoOpen {
  return resultAcparameterNotify.hasAutoOpen;
}
- (BOOL) autoOpen {
  return resultAcparameterNotify.autoOpen;
}
- (ACParameterNotifyBuilder*) setAutoOpen:(BOOL) value {
  resultAcparameterNotify.hasAutoOpen = YES;
  resultAcparameterNotify.autoOpen = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearAutoOpen {
  resultAcparameterNotify.hasAutoOpen = NO;
  resultAcparameterNotify.autoOpen = NO;
  return self;
}
- (BOOL) hasFrontDefrost {
  return resultAcparameterNotify.hasFrontDefrost;
}
- (BOOL) frontDefrost {
  return resultAcparameterNotify.frontDefrost;
}
- (ACParameterNotifyBuilder*) setFrontDefrost:(BOOL) value {
  resultAcparameterNotify.hasFrontDefrost = YES;
  resultAcparameterNotify.frontDefrost = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearFrontDefrost {
  resultAcparameterNotify.hasFrontDefrost = NO;
  resultAcparameterNotify.frontDefrost = NO;
  return self;
}
- (BOOL) hasBackDefrost {
  return resultAcparameterNotify.hasBackDefrost;
}
- (BOOL) backDefrost {
  return resultAcparameterNotify.backDefrost;
}
- (ACParameterNotifyBuilder*) setBackDefrost:(BOOL) value {
  resultAcparameterNotify.hasBackDefrost = YES;
  resultAcparameterNotify.backDefrost = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearBackDefrost {
  resultAcparameterNotify.hasBackDefrost = NO;
  resultAcparameterNotify.backDefrost = NO;
  return self;
}
- (BOOL) hasCycMode {
  return resultAcparameterNotify.hasCycMode;
}
- (CycMode) cycMode {
  return resultAcparameterNotify.cycMode;
}
- (ACParameterNotifyBuilder*) setCycMode:(CycMode) value {
  resultAcparameterNotify.hasCycMode = YES;
  resultAcparameterNotify.cycMode = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearCycMode {
  resultAcparameterNotify.hasCycMode = NO;
  resultAcparameterNotify.cycMode = CycModeCycModeInside;
  return self;
}
- (BOOL) hasBlowMode {
  return resultAcparameterNotify.hasBlowMode;
}
- (BlowMode) blowMode {
  return resultAcparameterNotify.blowMode;
}
- (ACParameterNotifyBuilder*) setBlowMode:(BlowMode) value {
  resultAcparameterNotify.hasBlowMode = YES;
  resultAcparameterNotify.blowMode = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearBlowMode {
  resultAcparameterNotify.hasBlowMode = NO;
  resultAcparameterNotify.blowMode = BlowModeBlowFace;
  return self;
}
- (BOOL) hasWindSpeed {
  return resultAcparameterNotify.hasWindSpeed;
}
- (UInt32) windSpeed {
  return resultAcparameterNotify.windSpeed;
}
- (ACParameterNotifyBuilder*) setWindSpeed:(UInt32) value {
  resultAcparameterNotify.hasWindSpeed = YES;
  resultAcparameterNotify.windSpeed = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearWindSpeed {
  resultAcparameterNotify.hasWindSpeed = NO;
  resultAcparameterNotify.windSpeed = 0;
  return self;
}
- (BOOL) hasTemperature0 {
  return resultAcparameterNotify.hasTemperature0;
}
- (UInt32) temperature0 {
  return resultAcparameterNotify.temperature0;
}
- (ACParameterNotifyBuilder*) setTemperature0:(UInt32) value {
  resultAcparameterNotify.hasTemperature0 = YES;
  resultAcparameterNotify.temperature0 = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearTemperature0 {
  resultAcparameterNotify.hasTemperature0 = NO;
  resultAcparameterNotify.temperature0 = 0;
  return self;
}
- (BOOL) hasTemperature1 {
  return resultAcparameterNotify.hasTemperature1;
}
- (UInt32) temperature1 {
  return resultAcparameterNotify.temperature1;
}
- (ACParameterNotifyBuilder*) setTemperature1:(UInt32) value {
  resultAcparameterNotify.hasTemperature1 = YES;
  resultAcparameterNotify.temperature1 = value;
  return self;
}
- (ACParameterNotifyBuilder*) clearTemperature1 {
  resultAcparameterNotify.hasTemperature1 = NO;
  resultAcparameterNotify.temperature1 = 0;
  return self;
}
@end

@interface ACParameterSetReq ()
@property BOOL onOff;
@property BOOL acopen;
@property BOOL autoOpen;
@property BOOL dualOpen;
@property BOOL blowModeSwitch;
@property BOOL backDefrostSwitch;
@property BOOL frontDefrostSwitch;
@property BOOL cycModeSwitch;
@property WindOption windOption;
@property TempOption tempOption0;
@property TempOption tempOption1;
@end

@implementation ACParameterSetReq

- (BOOL) hasOnOff {
  return !!hasOnOff_;
}
- (void) setHasOnOff:(BOOL) _value_ {
  hasOnOff_ = !!_value_;
}
- (BOOL) onOff {
  return !!onOff_;
}
- (void) setOnOff:(BOOL) _value_ {
  onOff_ = !!_value_;
}
- (BOOL) hasAcopen {
  return !!hasAcopen_;
}
- (void) setHasAcopen:(BOOL) _value_ {
  hasAcopen_ = !!_value_;
}
- (BOOL) acopen {
  return !!acopen_;
}
- (void) setAcopen:(BOOL) _value_ {
  acopen_ = !!_value_;
}
- (BOOL) hasAutoOpen {
  return !!hasAutoOpen_;
}
- (void) setHasAutoOpen:(BOOL) _value_ {
  hasAutoOpen_ = !!_value_;
}
- (BOOL) autoOpen {
  return !!autoOpen_;
}
- (void) setAutoOpen:(BOOL) _value_ {
  autoOpen_ = !!_value_;
}
- (BOOL) hasDualOpen {
  return !!hasDualOpen_;
}
- (void) setHasDualOpen:(BOOL) _value_ {
  hasDualOpen_ = !!_value_;
}
- (BOOL) dualOpen {
  return !!dualOpen_;
}
- (void) setDualOpen:(BOOL) _value_ {
  dualOpen_ = !!_value_;
}
- (BOOL) hasBlowModeSwitch {
  return !!hasBlowModeSwitch_;
}
- (void) setHasBlowModeSwitch:(BOOL) _value_ {
  hasBlowModeSwitch_ = !!_value_;
}
- (BOOL) blowModeSwitch {
  return !!blowModeSwitch_;
}
- (void) setBlowModeSwitch:(BOOL) _value_ {
  blowModeSwitch_ = !!_value_;
}
- (BOOL) hasBackDefrostSwitch {
  return !!hasBackDefrostSwitch_;
}
- (void) setHasBackDefrostSwitch:(BOOL) _value_ {
  hasBackDefrostSwitch_ = !!_value_;
}
- (BOOL) backDefrostSwitch {
  return !!backDefrostSwitch_;
}
- (void) setBackDefrostSwitch:(BOOL) _value_ {
  backDefrostSwitch_ = !!_value_;
}
- (BOOL) hasFrontDefrostSwitch {
  return !!hasFrontDefrostSwitch_;
}
- (void) setHasFrontDefrostSwitch:(BOOL) _value_ {
  hasFrontDefrostSwitch_ = !!_value_;
}
- (BOOL) frontDefrostSwitch {
  return !!frontDefrostSwitch_;
}
- (void) setFrontDefrostSwitch:(BOOL) _value_ {
  frontDefrostSwitch_ = !!_value_;
}
- (BOOL) hasCycModeSwitch {
  return !!hasCycModeSwitch_;
}
- (void) setHasCycModeSwitch:(BOOL) _value_ {
  hasCycModeSwitch_ = !!_value_;
}
- (BOOL) cycModeSwitch {
  return !!cycModeSwitch_;
}
- (void) setCycModeSwitch:(BOOL) _value_ {
  cycModeSwitch_ = !!_value_;
}
- (BOOL) hasWindOption {
  return !!hasWindOption_;
}
- (void) setHasWindOption:(BOOL) _value_ {
  hasWindOption_ = !!_value_;
}
@synthesize windOption;
- (BOOL) hasTempOption0 {
  return !!hasTempOption0_;
}
- (void) setHasTempOption0:(BOOL) _value_ {
  hasTempOption0_ = !!_value_;
}
@synthesize tempOption0;
- (BOOL) hasTempOption1 {
  return !!hasTempOption1_;
}
- (void) setHasTempOption1:(BOOL) _value_ {
  hasTempOption1_ = !!_value_;
}
@synthesize tempOption1;
- (instancetype) init {
  if ((self = [super init])) {
    self.onOff = NO;
    self.acopen = NO;
    self.autoOpen = NO;
    self.dualOpen = NO;
    self.blowModeSwitch = NO;
    self.backDefrostSwitch = NO;
    self.frontDefrostSwitch = NO;
    self.cycModeSwitch = NO;
    self.windOption = WindOptionSpeedUp;
    self.tempOption0 = TempOptionTempUp;
    self.tempOption1 = TempOptionTempUp;
  }
  return self;
}
static ACParameterSetReq* defaultACParameterSetReqInstance = nil;
+ (void) initialize {
  if (self == [ACParameterSetReq class]) {
    defaultACParameterSetReqInstance = [[ACParameterSetReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultACParameterSetReqInstance;
}
- (instancetype) defaultInstance {
  return defaultACParameterSetReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOnOff) {
    [output writeBool:1 value:self.onOff];
  }
  if (self.hasAcopen) {
    [output writeBool:2 value:self.acopen];
  }
  if (self.hasAutoOpen) {
    [output writeBool:3 value:self.autoOpen];
  }
  if (self.hasDualOpen) {
    [output writeBool:4 value:self.dualOpen];
  }
  if (self.hasBlowModeSwitch) {
    [output writeBool:5 value:self.blowModeSwitch];
  }
  if (self.hasBackDefrostSwitch) {
    [output writeBool:6 value:self.backDefrostSwitch];
  }
  if (self.hasFrontDefrostSwitch) {
    [output writeBool:7 value:self.frontDefrostSwitch];
  }
  if (self.hasCycModeSwitch) {
    [output writeBool:8 value:self.cycModeSwitch];
  }
  if (self.hasWindOption) {
    [output writeEnum:9 value:self.windOption];
  }
  if (self.hasTempOption0) {
    [output writeEnum:10 value:self.tempOption0];
  }
  if (self.hasTempOption1) {
    [output writeEnum:11 value:self.tempOption1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOnOff) {
    size_ += computeBoolSize(1, self.onOff);
  }
  if (self.hasAcopen) {
    size_ += computeBoolSize(2, self.acopen);
  }
  if (self.hasAutoOpen) {
    size_ += computeBoolSize(3, self.autoOpen);
  }
  if (self.hasDualOpen) {
    size_ += computeBoolSize(4, self.dualOpen);
  }
  if (self.hasBlowModeSwitch) {
    size_ += computeBoolSize(5, self.blowModeSwitch);
  }
  if (self.hasBackDefrostSwitch) {
    size_ += computeBoolSize(6, self.backDefrostSwitch);
  }
  if (self.hasFrontDefrostSwitch) {
    size_ += computeBoolSize(7, self.frontDefrostSwitch);
  }
  if (self.hasCycModeSwitch) {
    size_ += computeBoolSize(8, self.cycModeSwitch);
  }
  if (self.hasWindOption) {
    size_ += computeEnumSize(9, self.windOption);
  }
  if (self.hasTempOption0) {
    size_ += computeEnumSize(10, self.tempOption0);
  }
  if (self.hasTempOption1) {
    size_ += computeEnumSize(11, self.tempOption1);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ACParameterSetReq*) parseFromData:(NSData*) data {
  return (ACParameterSetReq*)[[[ACParameterSetReq builder] mergeFromData:data] build];
}
+ (ACParameterSetReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterSetReq*)[[[ACParameterSetReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ACParameterSetReq*) parseFromInputStream:(NSInputStream*) input {
  return (ACParameterSetReq*)[[[ACParameterSetReq builder] mergeFromInputStream:input] build];
}
+ (ACParameterSetReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterSetReq*)[[[ACParameterSetReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ACParameterSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ACParameterSetReq*)[[[ACParameterSetReq builder] mergeFromCodedInputStream:input] build];
}
+ (ACParameterSetReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ACParameterSetReq*)[[[ACParameterSetReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ACParameterSetReqBuilder*) builder {
  return [[ACParameterSetReqBuilder alloc] init];
}
+ (ACParameterSetReqBuilder*) builderWithPrototype:(ACParameterSetReq*) prototype {
  return [[ACParameterSetReq builder] mergeFrom:prototype];
}
- (ACParameterSetReqBuilder*) builder {
  return [ACParameterSetReq builder];
}
- (ACParameterSetReqBuilder*) toBuilder {
  return [ACParameterSetReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOnOff) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onOff", [NSNumber numberWithBool:self.onOff]];
  }
  if (self.hasAcopen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"acopen", [NSNumber numberWithBool:self.acopen]];
  }
  if (self.hasAutoOpen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"autoOpen", [NSNumber numberWithBool:self.autoOpen]];
  }
  if (self.hasDualOpen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dualOpen", [NSNumber numberWithBool:self.dualOpen]];
  }
  if (self.hasBlowModeSwitch) {
    [output appendFormat:@"%@%@: %@\n", indent, @"blowModeSwitch", [NSNumber numberWithBool:self.blowModeSwitch]];
  }
  if (self.hasBackDefrostSwitch) {
    [output appendFormat:@"%@%@: %@\n", indent, @"backDefrostSwitch", [NSNumber numberWithBool:self.backDefrostSwitch]];
  }
  if (self.hasFrontDefrostSwitch) {
    [output appendFormat:@"%@%@: %@\n", indent, @"frontDefrostSwitch", [NSNumber numberWithBool:self.frontDefrostSwitch]];
  }
  if (self.hasCycModeSwitch) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cycModeSwitch", [NSNumber numberWithBool:self.cycModeSwitch]];
  }
  if (self.hasWindOption) {
    [output appendFormat:@"%@%@: %@\n", indent, @"windOption", NSStringFromWindOption(self.windOption)];
  }
  if (self.hasTempOption0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tempOption0", NSStringFromTempOption(self.tempOption0)];
  }
  if (self.hasTempOption1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tempOption1", NSStringFromTempOption(self.tempOption1)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOnOff) {
    [dictionary setObject: [NSNumber numberWithBool:self.onOff] forKey: @"onOff"];
  }
  if (self.hasAcopen) {
    [dictionary setObject: [NSNumber numberWithBool:self.acopen] forKey: @"acopen"];
  }
  if (self.hasAutoOpen) {
    [dictionary setObject: [NSNumber numberWithBool:self.autoOpen] forKey: @"autoOpen"];
  }
  if (self.hasDualOpen) {
    [dictionary setObject: [NSNumber numberWithBool:self.dualOpen] forKey: @"dualOpen"];
  }
  if (self.hasBlowModeSwitch) {
    [dictionary setObject: [NSNumber numberWithBool:self.blowModeSwitch] forKey: @"blowModeSwitch"];
  }
  if (self.hasBackDefrostSwitch) {
    [dictionary setObject: [NSNumber numberWithBool:self.backDefrostSwitch] forKey: @"backDefrostSwitch"];
  }
  if (self.hasFrontDefrostSwitch) {
    [dictionary setObject: [NSNumber numberWithBool:self.frontDefrostSwitch] forKey: @"frontDefrostSwitch"];
  }
  if (self.hasCycModeSwitch) {
    [dictionary setObject: [NSNumber numberWithBool:self.cycModeSwitch] forKey: @"cycModeSwitch"];
  }
  if (self.hasWindOption) {
    [dictionary setObject: @(self.windOption) forKey: @"windOption"];
  }
  if (self.hasTempOption0) {
    [dictionary setObject: @(self.tempOption0) forKey: @"tempOption0"];
  }
  if (self.hasTempOption1) {
    [dictionary setObject: @(self.tempOption1) forKey: @"tempOption1"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ACParameterSetReq class]]) {
    return NO;
  }
  ACParameterSetReq *otherMessage = other;
  return
      self.hasOnOff == otherMessage.hasOnOff &&
      (!self.hasOnOff || self.onOff == otherMessage.onOff) &&
      self.hasAcopen == otherMessage.hasAcopen &&
      (!self.hasAcopen || self.acopen == otherMessage.acopen) &&
      self.hasAutoOpen == otherMessage.hasAutoOpen &&
      (!self.hasAutoOpen || self.autoOpen == otherMessage.autoOpen) &&
      self.hasDualOpen == otherMessage.hasDualOpen &&
      (!self.hasDualOpen || self.dualOpen == otherMessage.dualOpen) &&
      self.hasBlowModeSwitch == otherMessage.hasBlowModeSwitch &&
      (!self.hasBlowModeSwitch || self.blowModeSwitch == otherMessage.blowModeSwitch) &&
      self.hasBackDefrostSwitch == otherMessage.hasBackDefrostSwitch &&
      (!self.hasBackDefrostSwitch || self.backDefrostSwitch == otherMessage.backDefrostSwitch) &&
      self.hasFrontDefrostSwitch == otherMessage.hasFrontDefrostSwitch &&
      (!self.hasFrontDefrostSwitch || self.frontDefrostSwitch == otherMessage.frontDefrostSwitch) &&
      self.hasCycModeSwitch == otherMessage.hasCycModeSwitch &&
      (!self.hasCycModeSwitch || self.cycModeSwitch == otherMessage.cycModeSwitch) &&
      self.hasWindOption == otherMessage.hasWindOption &&
      (!self.hasWindOption || self.windOption == otherMessage.windOption) &&
      self.hasTempOption0 == otherMessage.hasTempOption0 &&
      (!self.hasTempOption0 || self.tempOption0 == otherMessage.tempOption0) &&
      self.hasTempOption1 == otherMessage.hasTempOption1 &&
      (!self.hasTempOption1 || self.tempOption1 == otherMessage.tempOption1) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOnOff) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.onOff] hash];
  }
  if (self.hasAcopen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.acopen] hash];
  }
  if (self.hasAutoOpen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.autoOpen] hash];
  }
  if (self.hasDualOpen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.dualOpen] hash];
  }
  if (self.hasBlowModeSwitch) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.blowModeSwitch] hash];
  }
  if (self.hasBackDefrostSwitch) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.backDefrostSwitch] hash];
  }
  if (self.hasFrontDefrostSwitch) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.frontDefrostSwitch] hash];
  }
  if (self.hasCycModeSwitch) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.cycModeSwitch] hash];
  }
  if (self.hasWindOption) {
    hashCode = hashCode * 31 + self.windOption;
  }
  if (self.hasTempOption0) {
    hashCode = hashCode * 31 + self.tempOption0;
  }
  if (self.hasTempOption1) {
    hashCode = hashCode * 31 + self.tempOption1;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ACParameterSetReqBuilder()
@property (strong) ACParameterSetReq* resultAcparameterSetReq;
@end

@implementation ACParameterSetReqBuilder
@synthesize resultAcparameterSetReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAcparameterSetReq = [[ACParameterSetReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAcparameterSetReq;
}
- (ACParameterSetReqBuilder*) clear {
  self.resultAcparameterSetReq = [[ACParameterSetReq alloc] init];
  return self;
}
- (ACParameterSetReqBuilder*) clone {
  return [ACParameterSetReq builderWithPrototype:resultAcparameterSetReq];
}
- (ACParameterSetReq*) defaultInstance {
  return [ACParameterSetReq defaultInstance];
}
- (ACParameterSetReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ACParameterSetReq*) buildPartial {
  ACParameterSetReq* returnMe = resultAcparameterSetReq;
  self.resultAcparameterSetReq = nil;
  return returnMe;
}
- (ACParameterSetReqBuilder*) mergeFrom:(ACParameterSetReq*) other {
  if (other == [ACParameterSetReq defaultInstance]) {
    return self;
  }
  if (other.hasOnOff) {
    [self setOnOff:other.onOff];
  }
  if (other.hasAcopen) {
    [self setAcopen:other.acopen];
  }
  if (other.hasAutoOpen) {
    [self setAutoOpen:other.autoOpen];
  }
  if (other.hasDualOpen) {
    [self setDualOpen:other.dualOpen];
  }
  if (other.hasBlowModeSwitch) {
    [self setBlowModeSwitch:other.blowModeSwitch];
  }
  if (other.hasBackDefrostSwitch) {
    [self setBackDefrostSwitch:other.backDefrostSwitch];
  }
  if (other.hasFrontDefrostSwitch) {
    [self setFrontDefrostSwitch:other.frontDefrostSwitch];
  }
  if (other.hasCycModeSwitch) {
    [self setCycModeSwitch:other.cycModeSwitch];
  }
  if (other.hasWindOption) {
    [self setWindOption:other.windOption];
  }
  if (other.hasTempOption0) {
    [self setTempOption0:other.tempOption0];
  }
  if (other.hasTempOption1) {
    [self setTempOption1:other.tempOption1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ACParameterSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ACParameterSetReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOnOff:[input readBool]];
        break;
      }
      case 16: {
        [self setAcopen:[input readBool]];
        break;
      }
      case 24: {
        [self setAutoOpen:[input readBool]];
        break;
      }
      case 32: {
        [self setDualOpen:[input readBool]];
        break;
      }
      case 40: {
        [self setBlowModeSwitch:[input readBool]];
        break;
      }
      case 48: {
        [self setBackDefrostSwitch:[input readBool]];
        break;
      }
      case 56: {
        [self setFrontDefrostSwitch:[input readBool]];
        break;
      }
      case 64: {
        [self setCycModeSwitch:[input readBool]];
        break;
      }
      case 72: {
        WindOption value = (WindOption)[input readEnum];
        if (WindOptionIsValidValue(value)) {
          [self setWindOption:value];
        } else {
          [unknownFields mergeVarintField:9 value:value];
        }
        break;
      }
      case 80: {
        TempOption value = (TempOption)[input readEnum];
        if (TempOptionIsValidValue(value)) {
          [self setTempOption0:value];
        } else {
          [unknownFields mergeVarintField:10 value:value];
        }
        break;
      }
      case 88: {
        TempOption value = (TempOption)[input readEnum];
        if (TempOptionIsValidValue(value)) {
          [self setTempOption1:value];
        } else {
          [unknownFields mergeVarintField:11 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasOnOff {
  return resultAcparameterSetReq.hasOnOff;
}
- (BOOL) onOff {
  return resultAcparameterSetReq.onOff;
}
- (ACParameterSetReqBuilder*) setOnOff:(BOOL) value {
  resultAcparameterSetReq.hasOnOff = YES;
  resultAcparameterSetReq.onOff = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearOnOff {
  resultAcparameterSetReq.hasOnOff = NO;
  resultAcparameterSetReq.onOff = NO;
  return self;
}
- (BOOL) hasAcopen {
  return resultAcparameterSetReq.hasAcopen;
}
- (BOOL) acopen {
  return resultAcparameterSetReq.acopen;
}
- (ACParameterSetReqBuilder*) setAcopen:(BOOL) value {
  resultAcparameterSetReq.hasAcopen = YES;
  resultAcparameterSetReq.acopen = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearAcopen {
  resultAcparameterSetReq.hasAcopen = NO;
  resultAcparameterSetReq.acopen = NO;
  return self;
}
- (BOOL) hasAutoOpen {
  return resultAcparameterSetReq.hasAutoOpen;
}
- (BOOL) autoOpen {
  return resultAcparameterSetReq.autoOpen;
}
- (ACParameterSetReqBuilder*) setAutoOpen:(BOOL) value {
  resultAcparameterSetReq.hasAutoOpen = YES;
  resultAcparameterSetReq.autoOpen = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearAutoOpen {
  resultAcparameterSetReq.hasAutoOpen = NO;
  resultAcparameterSetReq.autoOpen = NO;
  return self;
}
- (BOOL) hasDualOpen {
  return resultAcparameterSetReq.hasDualOpen;
}
- (BOOL) dualOpen {
  return resultAcparameterSetReq.dualOpen;
}
- (ACParameterSetReqBuilder*) setDualOpen:(BOOL) value {
  resultAcparameterSetReq.hasDualOpen = YES;
  resultAcparameterSetReq.dualOpen = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearDualOpen {
  resultAcparameterSetReq.hasDualOpen = NO;
  resultAcparameterSetReq.dualOpen = NO;
  return self;
}
- (BOOL) hasBlowModeSwitch {
  return resultAcparameterSetReq.hasBlowModeSwitch;
}
- (BOOL) blowModeSwitch {
  return resultAcparameterSetReq.blowModeSwitch;
}
- (ACParameterSetReqBuilder*) setBlowModeSwitch:(BOOL) value {
  resultAcparameterSetReq.hasBlowModeSwitch = YES;
  resultAcparameterSetReq.blowModeSwitch = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearBlowModeSwitch {
  resultAcparameterSetReq.hasBlowModeSwitch = NO;
  resultAcparameterSetReq.blowModeSwitch = NO;
  return self;
}
- (BOOL) hasBackDefrostSwitch {
  return resultAcparameterSetReq.hasBackDefrostSwitch;
}
- (BOOL) backDefrostSwitch {
  return resultAcparameterSetReq.backDefrostSwitch;
}
- (ACParameterSetReqBuilder*) setBackDefrostSwitch:(BOOL) value {
  resultAcparameterSetReq.hasBackDefrostSwitch = YES;
  resultAcparameterSetReq.backDefrostSwitch = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearBackDefrostSwitch {
  resultAcparameterSetReq.hasBackDefrostSwitch = NO;
  resultAcparameterSetReq.backDefrostSwitch = NO;
  return self;
}
- (BOOL) hasFrontDefrostSwitch {
  return resultAcparameterSetReq.hasFrontDefrostSwitch;
}
- (BOOL) frontDefrostSwitch {
  return resultAcparameterSetReq.frontDefrostSwitch;
}
- (ACParameterSetReqBuilder*) setFrontDefrostSwitch:(BOOL) value {
  resultAcparameterSetReq.hasFrontDefrostSwitch = YES;
  resultAcparameterSetReq.frontDefrostSwitch = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearFrontDefrostSwitch {
  resultAcparameterSetReq.hasFrontDefrostSwitch = NO;
  resultAcparameterSetReq.frontDefrostSwitch = NO;
  return self;
}
- (BOOL) hasCycModeSwitch {
  return resultAcparameterSetReq.hasCycModeSwitch;
}
- (BOOL) cycModeSwitch {
  return resultAcparameterSetReq.cycModeSwitch;
}
- (ACParameterSetReqBuilder*) setCycModeSwitch:(BOOL) value {
  resultAcparameterSetReq.hasCycModeSwitch = YES;
  resultAcparameterSetReq.cycModeSwitch = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearCycModeSwitch {
  resultAcparameterSetReq.hasCycModeSwitch = NO;
  resultAcparameterSetReq.cycModeSwitch = NO;
  return self;
}
- (BOOL) hasWindOption {
  return resultAcparameterSetReq.hasWindOption;
}
- (WindOption) windOption {
  return resultAcparameterSetReq.windOption;
}
- (ACParameterSetReqBuilder*) setWindOption:(WindOption) value {
  resultAcparameterSetReq.hasWindOption = YES;
  resultAcparameterSetReq.windOption = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearWindOption {
  resultAcparameterSetReq.hasWindOption = NO;
  resultAcparameterSetReq.windOption = WindOptionSpeedUp;
  return self;
}
- (BOOL) hasTempOption0 {
  return resultAcparameterSetReq.hasTempOption0;
}
- (TempOption) tempOption0 {
  return resultAcparameterSetReq.tempOption0;
}
- (ACParameterSetReqBuilder*) setTempOption0:(TempOption) value {
  resultAcparameterSetReq.hasTempOption0 = YES;
  resultAcparameterSetReq.tempOption0 = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearTempOption0 {
  resultAcparameterSetReq.hasTempOption0 = NO;
  resultAcparameterSetReq.tempOption0 = TempOptionTempUp;
  return self;
}
- (BOOL) hasTempOption1 {
  return resultAcparameterSetReq.hasTempOption1;
}
- (TempOption) tempOption1 {
  return resultAcparameterSetReq.tempOption1;
}
- (ACParameterSetReqBuilder*) setTempOption1:(TempOption) value {
  resultAcparameterSetReq.hasTempOption1 = YES;
  resultAcparameterSetReq.tempOption1 = value;
  return self;
}
- (ACParameterSetReqBuilder*) clearTempOption1 {
  resultAcparameterSetReq.hasTempOption1 = NO;
  resultAcparameterSetReq.tempOption1 = TempOptionTempUp;
  return self;
}
@end

@interface ConnectReq ()
@property (strong) NSString* deviceSn;
@property (strong) NSString* softwareVersion;
@end

@implementation ConnectReq

- (BOOL) hasDeviceSn {
  return !!hasDeviceSn_;
}
- (void) setHasDeviceSn:(BOOL) _value_ {
  hasDeviceSn_ = !!_value_;
}
@synthesize deviceSn;
- (BOOL) hasSoftwareVersion {
  return !!hasSoftwareVersion_;
}
- (void) setHasSoftwareVersion:(BOOL) _value_ {
  hasSoftwareVersion_ = !!_value_;
}
@synthesize softwareVersion;
- (instancetype) init {
  if ((self = [super init])) {
    self.deviceSn = @"";
    self.softwareVersion = @"";
  }
  return self;
}
static ConnectReq* defaultConnectReqInstance = nil;
+ (void) initialize {
  if (self == [ConnectReq class]) {
    defaultConnectReqInstance = [[ConnectReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultConnectReqInstance;
}
- (instancetype) defaultInstance {
  return defaultConnectReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDeviceSn) {
    return NO;
  }
  if (!self.hasSoftwareVersion) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDeviceSn) {
    [output writeString:1 value:self.deviceSn];
  }
  if (self.hasSoftwareVersion) {
    [output writeString:2 value:self.softwareVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDeviceSn) {
    size_ += computeStringSize(1, self.deviceSn);
  }
  if (self.hasSoftwareVersion) {
    size_ += computeStringSize(2, self.softwareVersion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConnectReq*) parseFromData:(NSData*) data {
  return (ConnectReq*)[[[ConnectReq builder] mergeFromData:data] build];
}
+ (ConnectReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectReq*)[[[ConnectReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ConnectReq*) parseFromInputStream:(NSInputStream*) input {
  return (ConnectReq*)[[[ConnectReq builder] mergeFromInputStream:input] build];
}
+ (ConnectReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectReq*)[[[ConnectReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConnectReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ConnectReq*)[[[ConnectReq builder] mergeFromCodedInputStream:input] build];
}
+ (ConnectReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectReq*)[[[ConnectReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConnectReqBuilder*) builder {
  return [[ConnectReqBuilder alloc] init];
}
+ (ConnectReqBuilder*) builderWithPrototype:(ConnectReq*) prototype {
  return [[ConnectReq builder] mergeFrom:prototype];
}
- (ConnectReqBuilder*) builder {
  return [ConnectReq builder];
}
- (ConnectReqBuilder*) toBuilder {
  return [ConnectReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDeviceSn) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceSn", self.deviceSn];
  }
  if (self.hasSoftwareVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"softwareVersion", self.softwareVersion];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDeviceSn) {
    [dictionary setObject: self.deviceSn forKey: @"deviceSn"];
  }
  if (self.hasSoftwareVersion) {
    [dictionary setObject: self.softwareVersion forKey: @"softwareVersion"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ConnectReq class]]) {
    return NO;
  }
  ConnectReq *otherMessage = other;
  return
      self.hasDeviceSn == otherMessage.hasDeviceSn &&
      (!self.hasDeviceSn || [self.deviceSn isEqual:otherMessage.deviceSn]) &&
      self.hasSoftwareVersion == otherMessage.hasSoftwareVersion &&
      (!self.hasSoftwareVersion || [self.softwareVersion isEqual:otherMessage.softwareVersion]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDeviceSn) {
    hashCode = hashCode * 31 + [self.deviceSn hash];
  }
  if (self.hasSoftwareVersion) {
    hashCode = hashCode * 31 + [self.softwareVersion hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ConnectReqBuilder()
@property (strong) ConnectReq* resultConnectReq;
@end

@implementation ConnectReqBuilder
@synthesize resultConnectReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConnectReq = [[ConnectReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConnectReq;
}
- (ConnectReqBuilder*) clear {
  self.resultConnectReq = [[ConnectReq alloc] init];
  return self;
}
- (ConnectReqBuilder*) clone {
  return [ConnectReq builderWithPrototype:resultConnectReq];
}
- (ConnectReq*) defaultInstance {
  return [ConnectReq defaultInstance];
}
- (ConnectReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ConnectReq*) buildPartial {
  ConnectReq* returnMe = resultConnectReq;
  self.resultConnectReq = nil;
  return returnMe;
}
- (ConnectReqBuilder*) mergeFrom:(ConnectReq*) other {
  if (other == [ConnectReq defaultInstance]) {
    return self;
  }
  if (other.hasDeviceSn) {
    [self setDeviceSn:other.deviceSn];
  }
  if (other.hasSoftwareVersion) {
    [self setSoftwareVersion:other.softwareVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ConnectReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ConnectReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDeviceSn:[input readString]];
        break;
      }
      case 18: {
        [self setSoftwareVersion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDeviceSn {
  return resultConnectReq.hasDeviceSn;
}
- (NSString*) deviceSn {
  return resultConnectReq.deviceSn;
}
- (ConnectReqBuilder*) setDeviceSn:(NSString*) value {
  resultConnectReq.hasDeviceSn = YES;
  resultConnectReq.deviceSn = value;
  return self;
}
- (ConnectReqBuilder*) clearDeviceSn {
  resultConnectReq.hasDeviceSn = NO;
  resultConnectReq.deviceSn = @"";
  return self;
}
- (BOOL) hasSoftwareVersion {
  return resultConnectReq.hasSoftwareVersion;
}
- (NSString*) softwareVersion {
  return resultConnectReq.softwareVersion;
}
- (ConnectReqBuilder*) setSoftwareVersion:(NSString*) value {
  resultConnectReq.hasSoftwareVersion = YES;
  resultConnectReq.softwareVersion = value;
  return self;
}
- (ConnectReqBuilder*) clearSoftwareVersion {
  resultConnectReq.hasSoftwareVersion = NO;
  resultConnectReq.softwareVersion = @"";
  return self;
}
@end

@interface ConnectRsp ()
@property RspCode result;
@property UInt32 developId;
@property (strong) NSString* deviceSn;
@property (strong) NSString* softwareVersion;
@end

@implementation ConnectRsp

- (BOOL) hasResult {
  return !!hasResult_;
}
- (void) setHasResult:(BOOL) _value_ {
  hasResult_ = !!_value_;
}
@synthesize result;
- (BOOL) hasDevelopId {
  return !!hasDevelopId_;
}
- (void) setHasDevelopId:(BOOL) _value_ {
  hasDevelopId_ = !!_value_;
}
@synthesize developId;
- (BOOL) hasDeviceSn {
  return !!hasDeviceSn_;
}
- (void) setHasDeviceSn:(BOOL) _value_ {
  hasDeviceSn_ = !!_value_;
}
@synthesize deviceSn;
- (BOOL) hasSoftwareVersion {
  return !!hasSoftwareVersion_;
}
- (void) setHasSoftwareVersion:(BOOL) _value_ {
  hasSoftwareVersion_ = !!_value_;
}
@synthesize softwareVersion;
- (instancetype) init {
  if ((self = [super init])) {
    self.result = RspCodeFailed;
    self.developId = 0;
    self.deviceSn = @"";
    self.softwareVersion = @"";
  }
  return self;
}
static ConnectRsp* defaultConnectRspInstance = nil;
+ (void) initialize {
  if (self == [ConnectRsp class]) {
    defaultConnectRspInstance = [[ConnectRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultConnectRspInstance;
}
- (instancetype) defaultInstance {
  return defaultConnectRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasResult) {
    return NO;
  }
  if (!self.hasDevelopId) {
    return NO;
  }
  if (!self.hasDeviceSn) {
    return NO;
  }
  if (!self.hasSoftwareVersion) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResult) {
    [output writeEnum:1 value:self.result];
  }
  if (self.hasDevelopId) {
    [output writeUInt32:2 value:self.developId];
  }
  if (self.hasDeviceSn) {
    [output writeString:3 value:self.deviceSn];
  }
  if (self.hasSoftwareVersion) {
    [output writeString:4 value:self.softwareVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResult) {
    size_ += computeEnumSize(1, self.result);
  }
  if (self.hasDevelopId) {
    size_ += computeUInt32Size(2, self.developId);
  }
  if (self.hasDeviceSn) {
    size_ += computeStringSize(3, self.deviceSn);
  }
  if (self.hasSoftwareVersion) {
    size_ += computeStringSize(4, self.softwareVersion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConnectRsp*) parseFromData:(NSData*) data {
  return (ConnectRsp*)[[[ConnectRsp builder] mergeFromData:data] build];
}
+ (ConnectRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectRsp*)[[[ConnectRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ConnectRsp*) parseFromInputStream:(NSInputStream*) input {
  return (ConnectRsp*)[[[ConnectRsp builder] mergeFromInputStream:input] build];
}
+ (ConnectRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectRsp*)[[[ConnectRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConnectRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ConnectRsp*)[[[ConnectRsp builder] mergeFromCodedInputStream:input] build];
}
+ (ConnectRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectRsp*)[[[ConnectRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConnectRspBuilder*) builder {
  return [[ConnectRspBuilder alloc] init];
}
+ (ConnectRspBuilder*) builderWithPrototype:(ConnectRsp*) prototype {
  return [[ConnectRsp builder] mergeFrom:prototype];
}
- (ConnectRspBuilder*) builder {
  return [ConnectRsp builder];
}
- (ConnectRspBuilder*) toBuilder {
  return [ConnectRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"result", NSStringFromRspCode(self.result)];
  }
  if (self.hasDevelopId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"developId", [NSNumber numberWithInteger:self.developId]];
  }
  if (self.hasDeviceSn) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceSn", self.deviceSn];
  }
  if (self.hasSoftwareVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"softwareVersion", self.softwareVersion];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResult) {
    [dictionary setObject: @(self.result) forKey: @"result"];
  }
  if (self.hasDevelopId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.developId] forKey: @"developId"];
  }
  if (self.hasDeviceSn) {
    [dictionary setObject: self.deviceSn forKey: @"deviceSn"];
  }
  if (self.hasSoftwareVersion) {
    [dictionary setObject: self.softwareVersion forKey: @"softwareVersion"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ConnectRsp class]]) {
    return NO;
  }
  ConnectRsp *otherMessage = other;
  return
      self.hasResult == otherMessage.hasResult &&
      (!self.hasResult || self.result == otherMessage.result) &&
      self.hasDevelopId == otherMessage.hasDevelopId &&
      (!self.hasDevelopId || self.developId == otherMessage.developId) &&
      self.hasDeviceSn == otherMessage.hasDeviceSn &&
      (!self.hasDeviceSn || [self.deviceSn isEqual:otherMessage.deviceSn]) &&
      self.hasSoftwareVersion == otherMessage.hasSoftwareVersion &&
      (!self.hasSoftwareVersion || [self.softwareVersion isEqual:otherMessage.softwareVersion]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResult) {
    hashCode = hashCode * 31 + self.result;
  }
  if (self.hasDevelopId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.developId] hash];
  }
  if (self.hasDeviceSn) {
    hashCode = hashCode * 31 + [self.deviceSn hash];
  }
  if (self.hasSoftwareVersion) {
    hashCode = hashCode * 31 + [self.softwareVersion hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ConnectRspBuilder()
@property (strong) ConnectRsp* resultConnectRsp;
@end

@implementation ConnectRspBuilder
@synthesize resultConnectRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConnectRsp = [[ConnectRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConnectRsp;
}
- (ConnectRspBuilder*) clear {
  self.resultConnectRsp = [[ConnectRsp alloc] init];
  return self;
}
- (ConnectRspBuilder*) clone {
  return [ConnectRsp builderWithPrototype:resultConnectRsp];
}
- (ConnectRsp*) defaultInstance {
  return [ConnectRsp defaultInstance];
}
- (ConnectRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ConnectRsp*) buildPartial {
  ConnectRsp* returnMe = resultConnectRsp;
  self.resultConnectRsp = nil;
  return returnMe;
}
- (ConnectRspBuilder*) mergeFrom:(ConnectRsp*) other {
  if (other == [ConnectRsp defaultInstance]) {
    return self;
  }
  if (other.hasResult) {
    [self setResult:other.result];
  }
  if (other.hasDevelopId) {
    [self setDevelopId:other.developId];
  }
  if (other.hasDeviceSn) {
    [self setDeviceSn:other.deviceSn];
  }
  if (other.hasSoftwareVersion) {
    [self setSoftwareVersion:other.softwareVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ConnectRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ConnectRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        RspCode value = (RspCode)[input readEnum];
        if (RspCodeIsValidValue(value)) {
          [self setResult:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setDevelopId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setDeviceSn:[input readString]];
        break;
      }
      case 34: {
        [self setSoftwareVersion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasResult {
  return resultConnectRsp.hasResult;
}
- (RspCode) result {
  return resultConnectRsp.result;
}
- (ConnectRspBuilder*) setResult:(RspCode) value {
  resultConnectRsp.hasResult = YES;
  resultConnectRsp.result = value;
  return self;
}
- (ConnectRspBuilder*) clearResult {
  resultConnectRsp.hasResult = NO;
  resultConnectRsp.result = RspCodeFailed;
  return self;
}
- (BOOL) hasDevelopId {
  return resultConnectRsp.hasDevelopId;
}
- (UInt32) developId {
  return resultConnectRsp.developId;
}
- (ConnectRspBuilder*) setDevelopId:(UInt32) value {
  resultConnectRsp.hasDevelopId = YES;
  resultConnectRsp.developId = value;
  return self;
}
- (ConnectRspBuilder*) clearDevelopId {
  resultConnectRsp.hasDevelopId = NO;
  resultConnectRsp.developId = 0;
  return self;
}
- (BOOL) hasDeviceSn {
  return resultConnectRsp.hasDeviceSn;
}
- (NSString*) deviceSn {
  return resultConnectRsp.deviceSn;
}
- (ConnectRspBuilder*) setDeviceSn:(NSString*) value {
  resultConnectRsp.hasDeviceSn = YES;
  resultConnectRsp.deviceSn = value;
  return self;
}
- (ConnectRspBuilder*) clearDeviceSn {
  resultConnectRsp.hasDeviceSn = NO;
  resultConnectRsp.deviceSn = @"";
  return self;
}
- (BOOL) hasSoftwareVersion {
  return resultConnectRsp.hasSoftwareVersion;
}
- (NSString*) softwareVersion {
  return resultConnectRsp.softwareVersion;
}
- (ConnectRspBuilder*) setSoftwareVersion:(NSString*) value {
  resultConnectRsp.hasSoftwareVersion = YES;
  resultConnectRsp.softwareVersion = value;
  return self;
}
- (ConnectRspBuilder*) clearSoftwareVersion {
  resultConnectRsp.hasSoftwareVersion = NO;
  resultConnectRsp.softwareVersion = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
